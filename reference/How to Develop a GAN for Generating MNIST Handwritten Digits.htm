<!DOCTYPE html>
<!-- saved from url=(0137)https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/ -->
<html lang="en-US" style="min-height: 100%;" class=" js csstransforms3d csstransitions"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><script id="twitter-wjs" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/widgets.js"></script><script id="twitcount_plugins" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/twitcount.js"></script><script type="text/javascript" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/form"></script><script type="text/javascript" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/visit"></script>



<link rel="pingback" href="https://machinelearningmastery.com/xmlrpc.php">

<!--  Mobile viewport scale -->
<meta content="initial-scale=1.0, maximum-scale=1.0, user-scalable=yes" name="viewport">

<!-- This site is optimized with the Yoast SEO plugin v12.8 - https://yoast.com/wordpress/plugins/seo/ -->
<title>How to Develop a GAN for Generating MNIST Handwritten Digits</title>
<meta name="robots" content="max-snippet:-1, max-image-preview:large, max-video-preview:-1">
<link rel="canonical" href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/">
<meta property="og:locale" content="en_US">
<meta property="og:type" content="article">
<meta property="og:title" content="How to Develop a GAN for Generating MNIST Handwritten Digits">
<meta property="og:description" content="Generative Adversarial Networks, or GANs, are an architecture for training generative models, such as deep convolutional neural networks for generating images. Developing a GAN for generating images requires both a discriminator convolutional neural network model for classifying whether a given image is real or generated and a generator model that uses inverse convolutional layers to …">
<meta property="og:url" content="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/">
<meta property="og:site_name" content="Machine Learning Mastery">
<meta property="article:publisher" content="https://www.facebook.com/MachineLearningMastery/">
<meta property="article:author" content="https://www.facebook.com/jason.brownlee.39">
<meta property="article:section" content="Generative Adversarial Networks">
<meta property="article:published_time" content="2019-06-27T19:00:18+00:00">
<meta property="article:modified_time" content="2019-07-12T01:12:16+00:00">
<meta property="og:updated_time" content="2019-07-12T01:12:16+00:00">
<meta property="og:image" content="https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/uploads/2019/04/Plot-of-100-GAN-Generated-MNIST-Figures-After-100-Epochs.png">
<meta property="og:image:secure_url" content="https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/uploads/2019/04/Plot-of-100-GAN-Generated-MNIST-Figures-After-100-Epochs.png">
<meta property="og:image:width" content="640">
<meta property="og:image:height" content="480">
<script type="text/javascript" async="" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/client.js"></script><script type="text/javascript" async="" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/9556588.js"></script><script type="application/ld+json" class="yoast-schema-graph yoast-schema-graph--main">{"@context":"https://schema.org","@graph":[{"@type":"Organization","@id":"https://machinelearningmastery.com/#organization","name":"Machine Learning Mastery","url":"https://machinelearningmastery.com/","sameAs":["https://www.facebook.com/MachineLearningMastery/","https://www.linkedin.com/company/machine-learning-mastery","https://twitter.com/TeachTheMachine"],"logo":{"@type":"ImageObject","@id":"https://machinelearningmastery.com/#logo","url":"https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/uploads/2016/09/cropped-icon.png","width":512,"height":512,"caption":"Machine Learning Mastery"},"image":{"@id":"https://machinelearningmastery.com/#logo"}},{"@type":"WebSite","@id":"https://machinelearningmastery.com/#website","url":"https://machinelearningmastery.com/","name":"Machine Learning Mastery","description":"Making developers awesome at machine learning","publisher":{"@id":"https://machinelearningmastery.com/#organization"},"potentialAction":{"@type":"SearchAction","target":"https://machinelearningmastery.com/?s={search_term_string}","query-input":"required name=search_term_string"}},{"@type":"ImageObject","@id":"https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#primaryimage","url":"https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/uploads/2019/04/Plot-of-100-GAN-Generated-MNIST-Figures-After-100-Epochs.png","width":640,"height":480,"caption":"Plot of 100 GAN Generated MNIST Figures After 100 Epochs"},{"@type":"WebPage","@id":"https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#webpage","url":"https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/","inLanguage":"en-US","name":"How to Develop a GAN for Generating MNIST Handwritten Digits","isPartOf":{"@id":"https://machinelearningmastery.com/#website"},"primaryImageOfPage":{"@id":"https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#primaryimage"},"datePublished":"2019-06-27T19:00:18+00:00","dateModified":"2019-07-12T01:12:16+00:00"},{"@type":"Article","@id":"https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#article","isPartOf":{"@id":"https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#webpage"},"author":{"@id":"https://machinelearningmastery.com/#/schema/person/e2d0ff4828d406a3b47e5a3c9a0591e8"},"headline":"How to Develop a GAN for Generating MNIST Handwritten Digits","datePublished":"2019-06-27T19:00:18+00:00","dateModified":"2019-07-12T01:12:16+00:00","commentCount":"31","mainEntityOfPage":{"@id":"https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#webpage"},"publisher":{"@id":"https://machinelearningmastery.com/#organization"},"image":{"@id":"https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#primaryimage"},"articleSection":"Generative Adversarial Networks"},{"@type":["Person"],"@id":"https://machinelearningmastery.com/#/schema/person/e2d0ff4828d406a3b47e5a3c9a0591e8","name":"Jason Brownlee","image":{"@type":"ImageObject","@id":"https://machinelearningmastery.com/#authorlogo","url":"https://secure.gravatar.com/avatar/1d75d46040c28497f0dee5d8e100db37?s=96&d=mm&r=g","caption":"Jason Brownlee"},"description":"Jason Brownlee, PhD is a machine learning specialist who teaches developers how to get results with modern machine learning methods via hands-on tutorials.","sameAs":["https://www.facebook.com/jason.brownlee.39","https://twitter.com/teachthemachine"]}]}</script>
<!-- / Yoast SEO plugin. -->

<link rel="dns-prefetch" href="https://s.w.org/">
<link rel="alternate" type="application/rss+xml" title="Machine Learning Mastery » Feed" href="https://feeds.feedburner.com/MachineLearningMastery">
<link rel="alternate" type="application/rss+xml" title="Machine Learning Mastery » Comments Feed" href="https://machinelearningmastery.com/comments/feed/">
<link rel="alternate" type="application/rss+xml" title="Machine Learning Mastery » How to Develop a GAN for Generating MNIST Handwritten Digits Comments Feed" href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/feed/">
		<script type="text/javascript">
			window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/12.0.0-1\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/12.0.0-1\/svg\/","svgExt":".svg","source":{"concatemoji":"https:\/\/machinelearningmastery.com\/wp-includes\/js\/wp-emoji-release.min.js?ver=5.3.2"}};
			!function(e,a,t){var r,n,o,i,p=a.createElement("canvas"),s=p.getContext&&p.getContext("2d");function c(e,t){var a=String.fromCharCode;s.clearRect(0,0,p.width,p.height),s.fillText(a.apply(this,e),0,0);var r=p.toDataURL();return s.clearRect(0,0,p.width,p.height),s.fillText(a.apply(this,t),0,0),r===p.toDataURL()}function l(e){if(!s||!s.fillText)return!1;switch(s.textBaseline="top",s.font="600 32px Arial",e){case"flag":return!c([127987,65039,8205,9895,65039],[127987,65039,8203,9895,65039])&&(!c([55356,56826,55356,56819],[55356,56826,8203,55356,56819])&&!c([55356,57332,56128,56423,56128,56418,56128,56421,56128,56430,56128,56423,56128,56447],[55356,57332,8203,56128,56423,8203,56128,56418,8203,56128,56421,8203,56128,56430,8203,56128,56423,8203,56128,56447]));case"emoji":return!c([55357,56424,55356,57342,8205,55358,56605,8205,55357,56424,55356,57340],[55357,56424,55356,57342,8203,55358,56605,8203,55357,56424,55356,57340])}return!1}function d(e){var t=a.createElement("script");t.src=e,t.defer=t.type="text/javascript",a.getElementsByTagName("head")[0].appendChild(t)}for(i=Array("flag","emoji"),t.supports={everything:!0,everythingExceptFlag:!0},o=0;o<i.length;o++)t.supports[i[o]]=l(i[o]),t.supports.everything=t.supports.everything&&t.supports[i[o]],"flag"!==i[o]&&(t.supports.everythingExceptFlag=t.supports.everythingExceptFlag&&t.supports[i[o]]);t.supports.everythingExceptFlag=t.supports.everythingExceptFlag&&!t.supports.flag,t.DOMReady=!1,t.readyCallback=function(){t.DOMReady=!0},t.supports.everything||(n=function(){t.readyCallback()},a.addEventListener?(a.addEventListener("DOMContentLoaded",n,!1),e.addEventListener("load",n,!1)):(e.attachEvent("onload",n),a.attachEvent("onreadystatechange",function(){"complete"===a.readyState&&t.readyCallback()})),(r=t.source||{}).concatemoji?d(r.concatemoji):r.wpemoji&&r.twemoji&&(d(r.twemoji),d(r.wpemoji)))}(window,document,window._wpemojiSettings);
		</script><script src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/wp-emoji-release.min.js" type="text/javascript" defer=""></script>
		<style type="text/css">
img.wp-smiley,
img.emoji {
	display: inline !important;
	border: none !important;
	box-shadow: none !important;
	height: 1em !important;
	width: 1em !important;
	margin: 0 .07em !important;
	vertical-align: -0.1em !important;
	background: none !important;
	padding: 0 !important;
}
</style>
	<link rel="stylesheet" id="crayon-css" href="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/crayon.min.css" type="text/css" media="all">
<link rel="stylesheet" id="crayon-theme-classic-css" href="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/classic.css" type="text/css" media="all">
<link rel="stylesheet" id="crayon-font-monaco-css" href="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/monaco.css" type="text/css" media="all">
<link rel="stylesheet" id="wp-block-library-css" href="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/style.min.css" type="text/css" media="all">
<link rel="stylesheet" id="simple-sitemap-css-css" href="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/simple-sitemap.css" type="text/css" media="all">
<link rel="stylesheet" id="contact-form-7-css" href="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/styles.css" type="text/css" media="all">
<link rel="stylesheet" id="ssb-front-css-css" href="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/front.css" type="text/css" media="all">
<link rel="stylesheet" id="ewd-ufaq-style-css" href="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/ewd-ufaq-styles.css" type="text/css" media="all">
<link rel="stylesheet" id="ewd-ufaq-rrssb-css" href="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/rrssb-min.css" type="text/css" media="all">
<link rel="stylesheet" id="woo-testimonials-css-css" href="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/testimonials.css" type="text/css" media="all">
<link rel="stylesheet" id="theme-stylesheet-css" href="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/style.css" type="text/css" media="all">
<!--[if lt IE 9]>
<link href="https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/themes/canvas-new/css/non-responsive.css" rel="stylesheet" type="text/css" />
<style type="text/css">.col-full, #wrapper { width: 960px; max-width: 960px; } #inner-wrapper { padding: 0; } body.full-width #header, #nav-container, body.full-width #content, body.full-width #footer-widgets, body.full-width #footer { padding-left: 0; padding-right: 0; } body.fixed-mobile #top, body.fixed-mobile #header-container, body.fixed-mobile #footer-container, body.fixed-mobile #nav-container, body.fixed-mobile #footer-widgets-container { min-width: 960px; padding: 0 1em; } body.full-width #content { width: auto; padding: 0 1em;}</style>
<![endif]-->
<script type="text/javascript" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/jquery.js"></script><style>@media print {#ghostery-purple-box {display:none !important}}</style>
<script type="text/javascript" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/jquery-migrate.min.js"></script>
<script type="text/javascript">
/* <![CDATA[ */
var CrayonSyntaxSettings = {"version":"_2.7.2_beta","is_admin":"0","ajaxurl":"https:\/\/machinelearningmastery.com\/wp-admin\/admin-ajax.php","prefix":"crayon-","setting":"crayon-setting","selected":"crayon-setting-selected","changed":"crayon-setting-changed","special":"crayon-setting-special","orig_value":"data-orig-value","debug":""};
var CrayonSyntaxStrings = {"copy":"Press %s to Copy, %s to Paste","minimize":"Click To Expand Code"};
/* ]]> */
</script>
<script type="text/javascript" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/crayon.min.js"></script>
<script type="text/javascript" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/front.js"></script>
<script type="text/javascript" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/third-party.min.js"></script>
<script type="text/javascript" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/modernizr.min.js"></script>
<script type="text/javascript" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/general.min.js"></script>
<link rel="https://api.w.org/" href="https://machinelearningmastery.com/wp-json/">
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://machinelearningmastery.com/xmlrpc.php?rsd">
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-includes/wlwmanifest.xml"> 
<link rel="shortlink" href="https://machinelearningmastery.com/?p=8099">
<link rel="alternate" type="application/json+oembed" href="https://machinelearningmastery.com/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fmachinelearningmastery.com%2Fhow-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras%2F">
<link rel="alternate" type="text/xml+oembed" href="https://machinelearningmastery.com/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fmachinelearningmastery.com%2Fhow-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras%2F&amp;format=xml">
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async="" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/js"></script>
<script>
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());

gtag('config', 'UA-44039733-3', { 'optimize_id': 'GTM-MV6J2DK'});
</script>
 <style media="screen">

		.simplesocialbuttons.simplesocialbuttons_inline .ssb-fb-like {
	  margin: ;
	}
		 /*inline margin*/
	
	
	
	
	
	
			 .simplesocialbuttons.simplesocialbuttons_inline.simplesocial-simple-icons button{
		 margin: ;
	 }

			 /*margin-digbar*/

	
	
	
	
	
	
	
</style>
    <script type="text/javascript">
        var ajaxurl = 'https://machinelearningmastery.com/wp-admin/admin-ajax.php';
    </script>

<!-- Custom CSS Styling -->
<style type="text/css">
#logo .site-title, #logo .site-description { display:none; }
body {background-repeat:no-repeat;background-position:top left;background-attachment:scroll;border-top:0px solid #000000;}
#header {background-repeat:no-repeat;background-position:left top;margin-top:0px;margin-bottom:0px;padding-top:10px;padding-bottom:10px;border:0px solid ;}
#logo .site-title a {font:bold 40px/1em "Helvetica Neue", Helvetica, sans-serif;color:#222222;}
#logo .site-description {font:normal 13px/1em "Helvetica Neue", Helvetica, sans-serif;color:#999999;}
body, p { font:normal 14px/1.5em "Helvetica Neue", Helvetica, sans-serif;color:#555555; }
h1 { font:bold 28px/1.2em "Helvetica Neue", Helvetica, sans-serif;color:#222222; }h2 { font:bold 24px/1.2em "Helvetica Neue", Helvetica, sans-serif;color:#222222; }h3 { font:bold 20px/1.2em "Helvetica Neue", Helvetica, sans-serif;color:#222222; }h4 { font:bold 16px/1.2em "Helvetica Neue", Helvetica, sans-serif;color:#222222; }h5 { font:bold 14px/1.2em "Helvetica Neue", Helvetica, sans-serif;color:#222222; }h6 { font:bold 12px/1.2em "Helvetica Neue", Helvetica, sans-serif;color:#222222; }
.page-title, .post .title, .page .title {font:bold 28px/1.1em "Helvetica Neue", Helvetica, sans-serif;color:#222222;}
.post .title a:link, .post .title a:visited, .page .title a:link, .page .title a:visited {color:#222222}
.post-meta { font:normal 12px/1.5em "Helvetica Neue", Helvetica, sans-serif;color:#999999; }
.entry, .entry p{ font:normal 15px/1.5em "Helvetica Neue", Helvetica, sans-serif;color:#555555; }
.post-more {font:normal 13px/1.5em "Helvetica Neue", Helvetica, sans-serif;color:;border-top:0px solid #e6e6e6;border-bottom:0px solid #e6e6e6;}
#post-author, #connect {border-top:1px solid #e6e6e6;border-bottom:1px solid #e6e6e6;border-left:1px solid #e6e6e6;border-right:1px solid #e6e6e6;border-radius:5px;-moz-border-radius:5px;-webkit-border-radius:5px;background-color:#fafafa}
.nav-entries a, .woo-pagination { font:normal 13px/1em "Helvetica Neue", Helvetica, sans-serif;color:#888; }
.woo-pagination a, .woo-pagination a:hover {color:#888!important}
.widget h3 {font:bold 14px/1.2em "Helvetica Neue", Helvetica, sans-serif;color:#555555;border-bottom:1px solid #e6e6e6;}
.widget_recent_comments li, #twitter li { border-color: #e6e6e6;}
.widget p, .widget .textwidget { font:normal 13px/1.5em "Helvetica Neue", Helvetica, sans-serif;color:#555555; }
.widget {font:normal 13px/1.5em "Helvetica Neue", Helvetica, sans-serif;color:#555555;border-radius:0px;-moz-border-radius:0px;-webkit-border-radius:0px;}
#tabs .inside li a, .widget_woodojo_tabs .tabbable .tab-pane li a { font:bold 12px/1.5em "Helvetica Neue", Helvetica, sans-serif;color:#555555; }
#tabs .inside li span.meta, .widget_woodojo_tabs .tabbable .tab-pane li span.meta { font:300 11px/1.5em "Helvetica Neue", Helvetica, sans-serif;color:#999999; }
#tabs ul.wooTabs li a, .widget_woodojo_tabs .tabbable .nav-tabs li a { font:300 11px/2em "Helvetica Neue", Helvetica, sans-serif;color:#999999; }
@media only screen and (min-width:768px) {
ul.nav li a, #navigation ul.rss a, #navigation ul.cart a.cart-contents, #navigation .cart-contents #navigation ul.rss, #navigation ul.nav-search, #navigation ul.nav-search a { font:bold 15px/1.2em "Helvetica Neue", Helvetica, sans-serif;color:#ffffff; } #navigation ul.rss li a:before, #navigation ul.nav-search a.search-contents:before { color:#ffffff;}
#navigation ul.nav > li a:hover, #navigation ul.nav > li:hover a, #navigation ul.nav li ul li a, #navigation ul.cart > li:hover > a, #navigation ul.cart > li > ul > div, #navigation ul.cart > li > ul > div p, #navigation ul.cart > li > ul span, #navigation ul.cart .cart_list a, #navigation ul.nav li.current_page_item a, #navigation ul.nav li.current_page_parent a, #navigation ul.nav li.current-menu-ancestor a, #navigation ul.nav li.current-cat a, #navigation ul.nav li.current-menu-item a { color:#eeeeee!important; }
#navigation ul.nav > li a:hover, #navigation ul.nav > li:hover, #navigation ul.nav li ul, #navigation ul.cart li:hover a.cart-contents, #navigation ul.nav-search li:hover a.search-contents, #navigation ul.nav-search a.search-contents + ul, #navigation ul.cart a.cart-contents + ul, #navigation ul.nav li.current_page_item a, #navigation ul.nav li.current_page_parent a, #navigation ul.nav li.current-menu-ancestor a, #navigation ul.nav li.current-cat a, #navigation ul.nav li.current-menu-item a{background-color:#84abc7!important}
#navigation ul.nav li ul, #navigation ul.cart > li > ul > div  { border: 0px solid #dbdbdb; }
#navigation ul.nav > li:hover > ul  { left: 0; }
#navigation ul.nav > li  { border-right: 0px solid #dbdbdb; }#navigation ul.nav > li:hover > ul  { left: 0; }
#navigation { box-shadow: none; -moz-box-shadow: none; -webkit-box-shadow: none; }#navigation ul li:first-child, #navigation ul li:first-child a { border-radius:0px 0 0 0px; -moz-border-radius:0px 0 0 0px; -webkit-border-radius:0px 0 0 0px; }
#navigation {background:#84abc7;border-top:0px solid #dbdbdb;border-bottom:0px solid #dbdbdb;border-left:0px solid #dbdbdb;border-right:0px solid #dbdbdb;border-radius:0px; -moz-border-radius:0px; -webkit-border-radius:0px;}
#top ul.nav li a { font:normal 12px/1.6em "Helvetica Neue", Helvetica, sans-serif;color:#ddd; }
}
#footer, #footer p { font:normal 13px/1.4em "Helvetica Neue", Helvetica, sans-serif;color:#999999; }
#footer {border-top:1px solid #dbdbdb;border-bottom:0px solid ;border-left:0px solid ;border-right:0px solid ;border-radius:0px; -moz-border-radius:0px; -webkit-border-radius:0px;}
.magazine #loopedSlider .content h2.title a { font:bold 24px/1em Arial, sans-serif;color:#ffffff; }
.wooslider-theme-magazine .slide-title a { font:bold 24px/1em Arial, sans-serif;color:#ffffff; }
.magazine #loopedSlider .content .excerpt p { font:300 13px/1.5em Arial, sans-serif;color:#cccccc; }
.wooslider-theme-magazine .slide-content p, .wooslider-theme-magazine .slide-excerpt p { font:300 13px/1.5em Arial, sans-serif;color:#cccccc; }
.magazine .block .post .title a {font:bold 18px/1.2em Helvetica Neue, Helvetica, sans-serif;color:#222222; }
#loopedSlider.business-slider .content h2 { font:bold 24px/1em Arial, sans-serif;color:#ffffff; }
#loopedSlider.business-slider .content h2.title a { font:bold 24px/1em Arial, sans-serif;color:#ffffff; }
.wooslider-theme-business .has-featured-image .slide-title { font:bold 24px/1em Arial, sans-serif;color:#ffffff; }
.wooslider-theme-business .has-featured-image .slide-title a { font:bold 24px/1em Arial, sans-serif;color:#ffffff; }
#wrapper #loopedSlider.business-slider .content p { font:300 13px/1.5em Arial, sans-serif;color:#cccccc; }
.wooslider-theme-business .has-featured-image .slide-content p { font:300 13px/1.5em Arial, sans-serif;color:#cccccc; }
.wooslider-theme-business .has-featured-image .slide-excerpt p { font:300 13px/1.5em Arial, sans-serif;color:#cccccc; }
.archive_header { font:bold 18px/1em Arial, sans-serif;color:#222222; }
.archive_header {border-bottom:1px solid #e6e6e6;}
.archive_header .catrss { display:none; }
</style>

<!-- Custom Favicon -->
<link rel="shortcut icon" href="https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/uploads/2019/09/icon-16x16.png">

<!-- Woo Shortcodes CSS -->
<link href="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/shortcodes.css" rel="stylesheet" type="text/css">

<!-- Custom Stylesheet -->
<link href="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/custom.css" rel="stylesheet" type="text/css">

<!-- Theme version -->
<meta name="generator" content="Canvas 5.9.21">
<meta name="generator" content="WooFramework 6.2.9">
<link rel="icon" href="https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/uploads/2016/09/cropped-icon-32x32.png" sizes="32x32">
<link rel="icon" href="https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/uploads/2016/09/cropped-icon-192x192.png" sizes="192x192">
<link rel="apple-touch-icon-precomposed" href="https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/uploads/2016/09/cropped-icon-180x180.png">
<meta name="msapplication-TileImage" content="https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/uploads/2016/09/cropped-icon-270x270.png">
		<style type="text/css" id="wp-custom-css">
			.display-posts-listing.image-left .listing-item {
	overflow: hidden; 
	margin-bottom: 30px;
	width: 100%;
}

.display-posts-listing.image-left .image {
	float: left;
	margin: 0 10px 0 0;
}

.display-posts-listing.image-left .attachment-thumbnail {
	height: auto; 
	width: auto; 
	max-width: 50px; 
	max-height: 50px;
	border-radius: 50%;
}

.display-posts-listing.image-left .title {
	display: block;
}

.display-posts-listing.image-left .excerpt-dash { 
	display: none; 
}

.display-posts-listing.image-left {
	margin: 0 0 40px 0;
}		</style>
		<script src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/can-i-show.js"></script><style id="fit-vids-style">.fluid-width-video-wrapper{width:100%;position:relative;padding:0;}  .fluid-width-video-wrapper iframe,.fluid-width-video-wrapper object,.fluid-width-video-wrapper embed {position:absolute;top:0;left:0;width:100%;height:100%;}</style><style type="text/css">
  /* === Form-Specific Styles === */
  /* stylelint-disable */

  #drip-2211 .drip-content,
  #drip-2211 .drip-header {
    background: rgb(116,174,203) !important;
    background: rgba(116,174,203,0.90) !important;
  }

  #drip-2211 .drip-content h3 {
    color: #333333 !important;
    font-size: 21px !important;
  }

  #drip-2211 .drip-submit-button {
    background-color: #333333 !important;
    font-size: 12px !important;
  }

  #drip-2211 .drip-submit-button:hover {
    background-color: #191919 !important;
  }

  #drip-2211 .drip-submit-button:active {
    background-color: #000000 !important;
  }

  #drip-2211 dl dt,
  #drip-2211 .drip-content .drip-description,
  #drip-2211 .drip-content .classic--checkbox,
  #drip-2211 .drip-errors {
    font-size: 13px !important;
  }

  #drip-2211 .drip-text-field {
    font-size: 14px !important;
  }

  /* === Reset styles === */

  .drip-tab h1,
  .drip-tab h2,
  .drip-tab h3,
  .drip-tab div,
  .drip-tab dl,
  .drip-tab dt,
  .drip-tab dd,
  .drip-tab p,
  .drip-tab a,
  .drip-tab .drip-text-field,
  .drip-tab .drip-text-field:focus,
  .drip-tab .drip-submit-button {
    margin: 0;
    padding: 0;
    border: 0;
    font-size: 100%;
    font: inherit;
    vertical-align: baseline;
    float: none;
    width: auto;
    background-image: none;
    letter-spacing: 0;
    -webkit-box-shadow: none;
       -moz-box-shadow: none;
            box-shadow: none;
    -webkit-text-shadow: none !important;
       -moz-text-shadow: none !important;
            text-shadow: none !important;
  }

  .drip-tab a {
    text-decoration: none;
  }

  .drip-tab :focus {
    outline: 0;
  }

  /* === Clearfix === */

  .drip-clearfix:after {
    visibility: hidden;
    display: block;
    font-size: 0;
    content: " ";
    clear: both;
    height: 0;
  }
  * html .drip-clearfix             { zoom: 1; } /* IE6 */
  *:first-child+html .drip-clearfix { zoom: 1; } /* IE7 */

  /* === Main Container === */

  .drip-tab-container * {
    box-sizing: content-box;
  }

  /* === Content === */

  .drip-tab .drip-content {
    margin: 0;
    padding: 5px;
    width: 330px;
    position: fixed;
    font-size: 100%;
    font: inherit;
    z-index: 10000;
    color: #333;
    vertical-align: baseline;
    text-align: left;
    box-sizing: border-box;
    -webkit-box-shadow: 0px 0px 20px rgba(0,0,0,0.25);
       -moz-box-shadow: 0px 0px 20px rgba(0,0,0,0.25);
            box-shadow: 0px 0px 20px rgba(0,0,0,0.25);
  }

  .drip-tab.bottom .drip-content {
    bottom: -800px;
    -webkit-border-radius: 8px 8px 0 0;
       -moz-border-radius: 8px 8px 0 0;
            border-radius: 8px 8px 0 0;
    -webkit-transition: bottom 200ms ease-in;
       -moz-transition: bottom 200ms ease-in;
         -o-transition: bottom 200ms ease-in;
            transition: bottom 200ms ease-in;
  }

  .drip-tab.bottom.left .drip-content {
    left: 40px;
  }

  .drip-tab.bottom.right .drip-content {
    right: 40px;
  }

  .drip-tab.image-left .drip-content,
  .drip-tab.image-right .drip-content {
    width: 510px;
  }

  .drip-tab.side .drip-content {
    top: 10%;
  }

  .drip-tab.side.right .drip-content {
    right: -550px;
    -webkit-border-radius: 8px 0 0 8px;
       -moz-border-radius: 8px 0 0 8px;
            border-radius: 8px 0 0 8px;
    -webkit-transition: right 200ms ease-in;
       -moz-transition: right 200ms ease-in;
         -o-transition: right 200ms ease-in;
            transition: right 200ms ease-in;
  }

  .drip-tab.side.left .drip-content {
    left: -550px;
    -webkit-border-radius: 0 8px 8px 0;
       -moz-border-radius: 0 8px 8px 0;
            border-radius: 0 8px 8px 0;
    -webkit-transition: left 200ms ease-in;
       -moz-transition: left 200ms ease-in;
         -o-transition: left 200ms ease-in;
            transition: left 200ms ease-in;
  }

  .drip-tab.mobile .drip-content {
    width: 100% !important;
    bottom: -800px;
    left: 0;
    -webkit-border-radius: 0;
       -moz-border-radius: 0;
            border-radius: 0;
    -webkit-transition: bottom 200ms ease-in;
       -moz-transition: bottom 200ms ease-in;
         -o-transition: bottom 200ms ease-in;
            transition: bottom 200ms ease-in;
  }

  .drip-tab.drip-scrollable .drip-content {
    overflow-y: scroll;
  }

  /* === Header === */

  .drip-tab .drip-header {
    margin: 0;
    padding: 0;
    position: fixed;
    font-size: 100%;
    font: inherit;
    z-index: 10000;
    color: #333;
    vertical-align: baseline;
    text-align: left;
    -webkit-border-radius: 8px 8px 0 0;
       -moz-border-radius: 8px 8px 0 0;
            border-radius: 8px 8px 0 0;
    -webkit-box-shadow: 0px 10px 28px rgba(0,0,0,0.36);
       -moz-box-shadow: 0px 10px 28px rgba(0,0,0,0.36);
            box-shadow: 0px 10px 28px rgba(0,0,0,0.36);
  }

  .drip-tab.bottom .drip-header {
    width: 330px;
    bottom: 0;
    -webkit-transition: bottom 200ms ease-in;
       -moz-transition: bottom 200ms ease-in;
         -o-transition: bottom 200ms ease-in;
            transition: bottom 200ms ease-in;
  }

  .drip-tab.bottom .drip-header.drip-hidden {
    bottom: -800px;
  }

  .drip-tab.bottom.left .drip-header {
    left: 40px;
  }

  .drip-tab.bottom.right .drip-header {
    right: 40px;
  }

  .drip-tab.bottom.image-left .drip-header,
  .drip-tab.bottom.image-right .drip-header {
    width: 510px;
  }

  .drip-tab.side .drip-header {
    width: 330px;
    top: 10%;
  }

  .drip-tab.side.right .drip-header {
    right: -100px;
    -webkit-transition: right 400ms ease-in;
       -moz-transition: right 400ms ease-in;
         -o-transition: right 400ms ease-in;
            transition: right 400ms ease-in;
    -webkit-transform: rotate(-90deg) !important;
       -moz-transform: rotate(-90deg) !important;
        -ms-transform: rotate(-90deg) !important;
         -o-transform: rotate(-90deg) !important;
            transform: rotate(-90deg) !important;
    -webkit-transform-origin: right center;
       -moz-transform-origin: right center;
         -o-transform-origin: right center;
            transform-origin: right center;
  }

  .drip-tab.side.right .drip-header.drip-hidden {
    right: -100px;
  }

  .drip-tab.side.left .drip-header {
    left: -100px;
    -webkit-transition: left 400ms ease-in;
       -moz-transition: left 400ms ease-in;
         -o-transition: left 400ms ease-in;
            transition: left 400ms ease-in;
    -webkit-transform: rotate(90deg) !important;
       -moz-transform: rotate(90deg) !important;
        -ms-transform: rotate(90deg) !important;
         -o-transform: rotate(90deg) !important;
            transform: rotate(90deg) !important;
    -webkit-transform-origin: left center;
       -moz-transform-origin: left center;
         -o-transform-origin: left center;
            transform-origin: left center;
  }

  .drip-tab.side.left .drip-header.drip-hidden {
    left: -100px;
  }

  .drip-tab.mobile .drip-header {
    width: 100% !important;
    bottom: 0;
    left: 0;
    -webkit-border-radius: 0;
       -moz-border-radius: 0;
            border-radius: 0;
    -webkit-transition: bottom 200ms ease-in;
       -moz-transition: bottom 200ms ease-in;
         -o-transition: bottom 200ms ease-in;
            transition: bottom 200ms ease-in;
  }

  .drip-tab.mobile .drip-header.drip-hidden {
    bottom: -300px;
  }

  /* === Header Toggle === */

  .drip-tab .drip-toggle {
    display: block;
    text-decoration: none;
    padding: 10px 50px 10px 20px; /* extra padding for the arrow */
  }

  /* === Teaser === */

  .drip-tab .drip-header h2 {
    display: block;
    margin: 0 !important;
    padding: 0 !important;
    border: 0 !important;
    font-size: 14px !important;
    line-height: 1.5 !important;
    font-weight: bold !important;
    text-align: left !important;
    color: #fff !important;
    clear: none !important;
    letter-spacing: 0 !important;
    width: auto !important;
  }

  /* === Arrows === */

  .drip-tab .drip-header span.drip-arrow {
    display: block;
    position: absolute;
    margin: 0;
    padding: 0;
    width: 0;
    height: 0;
    line-height: 0;
    top: 17px;
    right: 32px;
  }

  /* === Panel === */

  .drip-tab .drip-content > div.drip-panel {
    padding: 15px 15px 12px;
    background-color: #fff;
    -webkit-border-radius: 6px;
       -moz-border-radius: 6px;
            border-radius: 6px;
  }

  /* === Powered By === */

  .drip-tab .drip-powered-by {
    padding: 8px;
    margin-bottom: -5px;
    font-family: Helvetica, Arial, sans-serif;
    text-align: left;
    font-weight: bold;
    font-size: 10px;
    line-height: 16px;
    color: #ffffff;
    letter-spacing: 1px;
    text-align: center;
    text-transform: uppercase;
    display: -webkit-box;
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .drip-tab .drip-powered-by a {
    color: #ffffff !important;
    text-decoration: underline !important;
    letter-spacing: 1px;
    margin-left: 6px;
  }

  /* === Content Headings & Paragraphs === */

  .drip-tab .drip-content h3 {
    display: block;
    margin: 0 20px 0 0 !important;
    padding: 0 0 15px 0 !important;
    line-height: 1.4 !important;
    font-weight: bold !important;
    text-align: left !important;
    color: #4477bd !important;
    clear: none !important;
  }

  .drip-tab .drip-content .drip-description {
    margin: 0;
    padding: 0 0 20px 0;
    line-height: 1.6;
    text-align: left;
  }

  .drip-tab.image-left .drip-content .drip-description {
    margin-left: 170px;
  }

  .drip-tab.image-right .drip-content .drip-description {
    margin-right: 170px;
  }

  @media screen and (max-width: 510px) {
    .drip-tab.image-left .drip-content .drip-description {
      margin-left: 0; /* 120px; */
    }

    .drip-tab.image-right .drip-content .drip-description {
      margin-right: 0; /* 120px; */
    }
  }

  .drip-tab .drip-content .drip-description a {
    text-decoration: underline;
  }

  .drip-tab .drip-content .drip-description em {
    font-style: italic;
  }

  .drip-tab .drip-content .drip-description ul,
  .drip-tab .drip-content .drip-description ol {
    list-style-position: outside;
    margin: 8px 0 8px 30px;
  }

  .drip-tab .drip-content .drip-description ul li
  .drip-tab .drip-content .drip-description ol li {
    padding: 0;
  }

  .drip-tab .drip-content img.drip-image {
    margin-bottom: 20px;
  }

  .drip-tab.image-left .drip-content img.drip-image {
    float: left;
    width: 150px;
  }

  .drip-tab.image-right .drip-content img.drip-image {
    float: right;
    width: 150px;
  }

  @media screen and (max-width: 510px) {
    .drip-tab.image-left .drip-content img.drip-image {
      margin-right: 20px;
      width: 100px;
    }

    .drip-tab.image-right .drip-content img.drip-image {
      margin-left: 20px;
      width: 100px;
    }
  }

  .drip-tab .drip-content a.drip-close {
    font-family: Arial, Helvetica, sans-serif;
    margin: -1px 0 0 0;
    float: right;
    font-size: 28px;
    line-height: 15px;
    font-weight: normal;
    color: #333;
    opacity: 0.4;
  }

  .drip-tab .drip-content a.drip-close:hover {
    text-decoration: none;
    cursor: pointer;
    opacity: 0.6;
  }

  /* === Content Subscribe Form === */

  .drip-tab form {
    margin: 0 !important;
    padding: 0 !important;
  }

  .drip-tab dl {
    display: block;
    margin: 0;
    padding: 0;
  }

  .drip-tab dl dt {
    display: block;
    padding: 0 0 5px 0;
    font-weight: bold;
  }

  .drip-tab dl.no-labels dt {
    display: none;
  }

  .drip-tab dl dd {
    display: block;
    padding: 0 0 10px 0;
  }

  .drip-tab .drip-text-field {
    margin: 0 !important;
    padding: 6px !important;
    height: auto !important;
    width: 100% !important;
    color: #333 !important;
    background-color: #fff !important;
    border: 1px solid #c4c4c4 !important;
    -webkit-box-shadow: inset 0 0 3px rgba(0,0,0,0.18) !important;
       -moz-box-shadow: inset 0 0 3px rgba(0,0,0,0.18) !important;
            box-shadow: inset 0 0 3px rgba(0,0,0,0.18) !important;
    -webkit-border-radius: 4px !important;
       -moz-border-radius: 4px !important;
            border-radius: 4px !important;
    -webkit-box-sizing: border-box !important;
       -moz-box-sizing: border-box !important;
        -ms-box-sizing: border-box !important;
            box-sizing: border-box !important;
    background-image: none !important;
    min-width: 0 !important;
    min-height: 0 !important;
  }

  .drip-tab .drip-text-field::-webkit-input-placeholder { /* WebKit browsers */
    color: #999999 !important;
  }
  .drip-tab .drip-text-field:-moz-placeholder { /* Mozilla Firefox 4 to 18 */
    color: #999999 !important;
  }
  .drip-tab .drip-text-field::-moz-placeholder { /* Mozilla Firefox 19+ */
    color: #999999 !important;
  }
  .drip-tab .drip-text-field:-ms-input-placeholder { /* Internet Explorer 10+ */
    color: #999999 !important;
  }

  .drip-tab .drip-text-field:focus {
    border-color: #a4a4a4 !important;
    outline: 0;
    background-image: none;
    background-color: #fff !important;
  }

  .drip-tab.mobile .drip-text-field {
    font-size: 16px;
  }

  .drip-tab .drip-errors {
    padding: 5px 0 0 0;
    font-weight: normal;
    color: red;
  }

  .drip-tab .drip-submit-button {
    font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif !important;
    padding: 3px 12px !important;
    color: #ffffff !important;
    font-weight: bold !important;
    line-height: 1.6 !important;
    border: 0 !important;
    -webkit-border-radius: 15px !important;
       -moz-border-radius: 15px !important;
            border-radius: 15px !important;
    cursor: pointer !important;
    background-image: none !important;
    min-width: 0 !important;
    min-height: 0 !important;
    height: auto;
  }

  .drip-tab .drip-submit-button:hover {
    background-image: none !important;
  }

  .drip-tab .drip-submit-button:active {
    background-image: none !important;
  }

  /* checkbox */
  .drip-tab .classic--checkbox.hidden {
    margin-bottom: -8px;
    display: none;
  }

  .drip-tab .classic--checkbox input[type="checkbox"] {
    display: inline-block;
    width: auto;
  }

  /* stylelint-enable */

</style><link rel="stylesheet" type="text/css" href="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/twitcount.css" media="all"></head>
<body class="post-template-default single single-post postid-8099 single-format-standard chrome alt-style-default two-col-left width-960 two-col-left-960">
<div id="wrapper">

	<div id="inner-wrapper">

	<h3 class="nav-toggle icon"><a href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#navigation">Navigation</a></h3>

	<header id="header" class="col-full">

		<div id="logo">
<a href="https://machinelearningmastery.com/" title="Making developers awesome at machine learning"><img src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/Header_smaller_text_better-1.png" alt="Machine Learning Mastery"></a>
<span class="site-title"><a href="https://machinelearningmastery.com/">Machine Learning Mastery</a></span>
<span class="site-description">Making developers awesome at machine learning</span>
</div>
	    <div class="header-widget">
	        <div id="custom_html-32" class="widget_text widget widget_custom_html"><div class="textwidget custom-html-widget"><div style="text-align: right;">
	<a href="https://machinelearningmastery.lpages.co/ganwp-mini-course/">Click to Take the FREE GANs Crash-Course</a>
</div></div></div><div id="search-4" class="widget widget_search"><div class="search_main">
    <form method="get" class="searchform" action="https://machinelearningmastery.com/">
        <input type="text" class="field s" name="s" value="Search..." onfocus="if (this.value == &#39;Search...&#39;) {this.value = &#39;&#39;;}" onblur="if (this.value == &#39;&#39;) {this.value = &#39;Search...&#39;;}">
		<input type="hidden" name="post_type" value="post">
        <button type="submit" class="fa fa-search submit" name="submit" value="Search"></button>
    </form>
    <div class="fix"></div>
</div></div>	    </div>
	
	</header>
	<nav id="navigation" class="col-full" role="navigation">

	
	<section class="menus">

		<a href="https://machinelearningmastery.com/" class="nav-home"><span>Home</span></a>

	<h3>Main Menu</h3><ul id="main-nav" class="nav fl"><li id="menu-item-6503" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-6503"><a href="https://machinelearningmastery.com/start-here/">Get Started</a></li>
<li id="menu-item-6501" class="menu-item menu-item-type-post_type menu-item-object-page current_page_parent menu-item-6501"><a href="https://machinelearningmastery.com/blog/">Blog</a></li>
<li id="menu-item-6506" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-has-children menu-item-6506 parent"><a href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#">Topics</a>
<ul class="sub-menu">
	<li id="menu-item-6508" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-6508"><a href="https://machinelearningmastery.com/category/deep-learning/">Deep Learning (keras)</a></li>
	<li id="menu-item-7921" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-7921"><a href="https://machinelearningmastery.com/category/deep-learning-for-computer-vision/">Computer Vision</a></li>
	<li id="menu-item-6509" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-6509"><a href="https://machinelearningmastery.com/category/deep-learning-time-series/">Deep Learning for Time Series</a></li>
	<li id="menu-item-6515" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-6515"><a href="https://machinelearningmastery.com/category/natural-language-processing/">NLP (Text)</a></li>
	<li id="menu-item-8576" class="menu-item menu-item-type-taxonomy menu-item-object-category current-post-ancestor current-menu-parent current-post-parent menu-item-8576"><a href="https://machinelearningmastery.com/category/generative-adversarial-networks/">GANs</a></li>
	<li id="menu-item-6511" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-6511"><a href="https://machinelearningmastery.com/category/lstm/">LSTMs</a></li>
	<li id="menu-item-7106" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-7106"><a href="https://machinelearningmastery.com/category/better-deep-learning/">Deep Learning Performance</a></li>
	<li id="menu-item-6512" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-6512"><a href="https://machinelearningmastery.com/category/machine-learning-algorithms/">Intro to Algorithms</a></li>
	<li id="menu-item-6507" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-6507"><a href="https://machinelearningmastery.com/category/algorithms-from-scratch/">Code Algorithms</a></li>
	<li id="menu-item-6520" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-6520"><a href="https://machinelearningmastery.com/category/time-series/">Intro to Time Series</a></li>
	<li id="menu-item-9966" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-9966"><a href="https://machinelearningmastery.com/category/imbalanced-classification/">Imbalanced Classification</a></li>
	<li id="menu-item-6516" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-6516"><a href="https://machinelearningmastery.com/category/python-machine-learning/">Python (scikit-learn)</a></li>
	<li id="menu-item-6517" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-6517"><a href="https://machinelearningmastery.com/category/r-machine-learning/">R (caret)</a></li>
	<li id="menu-item-6522" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-6522"><a href="https://machinelearningmastery.com/category/weka-machine-learning/">Weka (no code)</a></li>
	<li id="menu-item-6510" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-6510"><a href="https://machinelearningmastery.com/category/linear-algebra/">Linear Algebra</a></li>
	<li id="menu-item-6519" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-6519"><a href="https://machinelearningmastery.com/category/statistical-methods/">Statistics</a></li>
	<li id="menu-item-8989" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-8989"><a href="https://machinelearningmastery.com/category/probability/">Probability</a></li>
	<li id="menu-item-6523" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-6523"><a href="https://machinelearningmastery.com/category/xgboost/">XGBoost</a></li>
</ul>
</li>
<li id="menu-item-6502" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-6502"><a href="https://machinelearningmastery.com/products/">EBooks</a></li>
<li id="menu-item-6500" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-6500"><a href="https://machinelearningmastery.com/faq/">FAQ</a></li>
<li id="menu-item-6504" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-6504"><a href="https://machinelearningmastery.com/about/">About</a></li>
<li id="menu-item-6505" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-6505"><a href="https://machinelearningmastery.com/contact/">Contact</a></li>
</ul>	<div class="side-nav">
		</div><!-- /#side-nav -->

	</section><!-- /.menus -->

	<a href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#top" class="nav-close"><span>Return to Content</span></a>

</nav>
       
    <!-- #content Starts -->
	    <div id="content" class="col-full">
    
    	<div id="main-sidebar-container">    

            <!-- #main Starts -->
                        <section id="main">                       
<article class="post-8099 post type-post status-publish format-standard has-post-thumbnail hentry category-generative-adversarial-networks">
	<header>
	<h1 class="title entry-title">How to Develop a GAN for Generating MNIST Handwritten Digits</h1>	</header>
<div class="post-meta"><span class="small">By</span> <span class="author vcard"><span class="fn"><a href="https://machinelearningmastery.com/author/jasonb/" title="Posts by Jason Brownlee" rel="author">Jason Brownlee</a></span></span> <span class="small">on</span> <abbr class="date time published updated" title="2019-06-28T05:00:18+1000">June 28, 2019</abbr>  <span class="small">in</span> <span class="categories"><a href="https://machinelearningmastery.com/category/generative-adversarial-networks/" title="View all items in Generative Adversarial Networks">Generative Adversarial Networks</a></span>  </div>
	<section class="entry">
<div class="simplesocialbuttons simplesocial-simple-icons simplesocialbuttons_inline simplesocialbuttons-align-left post-8099 post  simplesocialbuttons-inline-no-animation simplesocialbuttons-inline-in">
<button class="ssb_tweet-icon" data-href="https://twitter.com/share?text=How+to+Develop+a+GAN+for+Generating+MNIST+Handwritten+Digits&amp;url=https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/" rel="nofollow" onclick="javascript:window.open(this.dataset.href, &#39;&#39;, &#39;menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=600,width=600&#39;);return false;">
						<span class="icon"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path fill="none" d="M0 0h72v72H0z"></path><path class="icon" fill="#fff" d="M68.812 15.14c-2.348 1.04-4.87 1.744-7.52 2.06 2.704-1.62 4.78-4.186 5.757-7.243-2.53 1.5-5.33 2.592-8.314 3.176C56.35 10.59 52.948 9 49.182 9c-7.23 0-13.092 5.86-13.092 13.093 0 1.026.118 2.02.338 2.98C25.543 24.527 15.9 19.318 9.44 11.396c-1.125 1.936-1.77 4.184-1.77 6.58 0 4.543 2.312 8.552 5.824 10.9-2.146-.07-4.165-.658-5.93-1.64-.002.056-.002.11-.002.163 0 6.345 4.513 11.638 10.504 12.84-1.1.298-2.256.457-3.45.457-.845 0-1.666-.078-2.464-.23 1.667 5.2 6.5 8.985 12.23 9.09-4.482 3.51-10.13 5.605-16.26 5.605-1.055 0-2.096-.06-3.122-.184 5.794 3.717 12.676 5.882 20.067 5.882 24.083 0 37.25-19.95 37.25-37.25 0-.565-.013-1.133-.038-1.693 2.558-1.847 4.778-4.15 6.532-6.774z"></path></svg></span><i class="simplesocialtxt">Tweet </i></button>
		<button class="ssb_fbshare-icon" target="_blank" data-href="https://www.facebook.com/sharer/sharer.php?u=https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/" onclick="javascript:window.open(this.dataset.href, &#39;&#39;, &#39;menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=600,width=600&#39;);return false;">
						<span class="icon"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" class="_1pbq" color="#ffffff"><path fill="#ffffff" fill-rule="evenodd" class="icon" d="M8 14H3.667C2.733 13.9 2 13.167 2 12.233V3.667A1.65 1.65 0 0 1 3.667 2h8.666A1.65 1.65 0 0 1 14 3.667v8.566c0 .934-.733 1.667-1.667 1.767H10v-3.967h1.3l.7-2.066h-2V6.933c0-.466.167-.9.867-.9H12v-1.8c.033 0-.933-.266-1.533-.266-1.267 0-2.434.7-2.467 2.133v1.867H6v2.066h2V14z"></path></svg></span>
						<span class="simplesocialtxt">Share </span> </button>
<button class="ssb_linkedin-icon" data-href="https://www.linkedin.com/cws/share?url=https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/" onclick="javascript:window.open(this.dataset.href, &#39;&#39;, &#39;menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=600,width=600&#39;);return false;">
						<span class="icon"> <svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="15px" height="14.1px" viewBox="-301.4 387.5 15 14.1" enable-background="new -301.4 387.5 15 14.1" xml:space="preserve"> <g id="XMLID_398_"> <path id="XMLID_399_" fill="#FFFFFF" d="M-296.2,401.6c0-3.2,0-6.3,0-9.5h0.1c1,0,2,0,2.9,0c0.1,0,0.1,0,0.1,0.1c0,0.4,0,0.8,0,1.2 c0.1-0.1,0.2-0.3,0.3-0.4c0.5-0.7,1.2-1,2.1-1.1c0.8-0.1,1.5,0,2.2,0.3c0.7,0.4,1.2,0.8,1.5,1.4c0.4,0.8,0.6,1.7,0.6,2.5 c0,1.8,0,3.6,0,5.4v0.1c-1.1,0-2.1,0-3.2,0c0-0.1,0-0.1,0-0.2c0-1.6,0-3.2,0-4.8c0-0.4,0-0.8-0.2-1.2c-0.2-0.7-0.8-1-1.6-1 c-0.8,0.1-1.3,0.5-1.6,1.2c-0.1,0.2-0.1,0.5-0.1,0.8c0,1.7,0,3.4,0,5.1c0,0.2,0,0.2-0.2,0.2c-1,0-1.9,0-2.9,0 C-296.1,401.6-296.2,401.6-296.2,401.6z"></path> <path id="XMLID_400_" fill="#FFFFFF" d="M-298,401.6L-298,401.6c-1.1,0-2.1,0-3,0c-0.1,0-0.1,0-0.1-0.1c0-3.1,0-6.1,0-9.2 c0-0.1,0-0.1,0.1-0.1c1,0,2,0,2.9,0h0.1C-298,395.3-298,398.5-298,401.6z"></path> <path id="XMLID_401_" fill="#FFFFFF" d="M-299.6,390.9c-0.7-0.1-1.2-0.3-1.6-0.8c-0.5-0.8-0.2-2.1,1-2.4c0.6-0.2,1.2-0.1,1.8,0.2 c0.5,0.4,0.7,0.9,0.6,1.5c-0.1,0.7-0.5,1.1-1.1,1.3C-299.1,390.8-299.4,390.8-299.6,390.9L-299.6,390.9z"></path> </g> </svg> </span>
						<span class="simplesocialtxt">Share</span> </button>
</div>
<p class="post-last-modified">Last Updated on <time class="post-last-modified-td">July 12, 2019</time></p><p><a href="https://machinelearningmastery.com/what-are-generative-adversarial-networks-gans/">Generative Adversarial Networks</a>, or GANs, are an architecture for training generative models, such as deep convolutional neural networks for generating images.</p>
<p>Developing a GAN for generating images requires both a discriminator convolutional neural network model for classifying whether a given image is real or generated and a generator model that uses inverse convolutional layers to transform an input to a full two-dimensional image of pixel values.</p>
<p>It can be challenging to understand both how GANs work and how deep convolutional neural network models can be trained in a GAN architecture for image generation. A good starting point for beginners is to practice developing and using GANs on standard image datasets used in the field of computer vision, such as the MNIST handwritten digit dataset. Using small and well-understood datasets means that smaller models can be developed and trained quickly, allowing the focus to be put on the model architecture and image generation process itself.</p>
<p>In this tutorial, you will discover how to develop a generative adversarial network with deep convolutional networks for generating handwritten digits.</p>
<p>After completing this tutorial, you will know:</p>
<ul>
<li>How to define and train the standalone discriminator model for learning the difference between real and fake images.</li>
<li>How to define the standalone generator model and train the composite generator and discriminator model.</li>
<li>How to evaluate the performance of the GAN and use the final standalone generator model to generate new images.</li>
</ul>
<p>Discover how to develop DCGANs, conditional GANs, Pix2Pix, CycleGANs, and more with Keras <a href="https://machinelearningmastery.com/generative_adversarial_networks/" rel="nofollow">in my new GANs book</a>, with 29 step-by-step tutorials and full source code.</p>
<p>Let’s get started.</p>
<div id="attachment_8114" style="width: 650px" class="wp-caption aligncenter"><img aria-describedby="caption-attachment-8114" class="size-full wp-image-8114" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/How-to-Develop-a-Generative-Adversarial-Network-for-an-MNIST-Handwritten-Digits-From-Scratch-in-Keras.jpg" alt="How to Develop a Generative Adversarial Network for an MNIST Handwritten Digits From Scratch in Keras" width="640" height="426" srcset="https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/uploads/2019/06/How-to-Develop-a-Generative-Adversarial-Network-for-an-MNIST-Handwritten-Digits-From-Scratch-in-Keras.jpg 640w, https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/uploads/2019/06/How-to-Develop-a-Generative-Adversarial-Network-for-an-MNIST-Handwritten-Digits-From-Scratch-in-Keras-300x200.jpg 300w" sizes="(max-width: 640px) 100vw, 640px"><p id="caption-attachment-8114" class="wp-caption-text">How to Develop a Generative Adversarial Network for an MNIST Handwritten Digits From Scratch in Keras<br>Photo by <a href="https://www.flickr.com/photos/jcookfisher/3410004359/">jcookfisher</a>, some rights reserved.</p></div>
<h2>Tutorial Overview</h2>
<p>This tutorial is divided into seven parts; they are:</p>
<ol>
<li>MNIST Handwritten Digit Dataset</li>
<li>How to Define and Train the Discriminator Model</li>
<li>How to Define and Use the Generator Model</li>
<li>How to Train the Generator Model</li>
<li>How to Evaluate GAN Model Performance</li>
<li>Complete Example of GAN for MNIST</li>
<li>How to Use the Final Generator Model to Generate Images</li>
</ol>
<h2>MNIST Handwritten Digit Dataset</h2>
<p>The <a href="https://en.wikipedia.org/wiki/MNIST_database">MNIST dataset</a> is an acronym that stands for the Modified National Institute of Standards and Technology dataset.</p>
<p>It is a dataset of 70,000 small square 28×28 pixel grayscale images of handwritten single digits between 0 and 9.</p>
<p>The task is to classify a given image of a handwritten digit into one of 10 classes representing integer values from 0 to 9, inclusively.</p>
<p>Keras provides access to the MNIST dataset via the <a href="https://keras.io/datasets/#mnist-database-of-handwritten-digits">mnist.load_dataset() function</a>. It returns two tuples, one with the input and output elements for the standard training dataset, and another with the input and output elements for the standard test dataset.</p>
<p>The example below loads the dataset and summarizes the shape of the loaded dataset.</p>
<p><strong>Note</strong>: the first time you load the dataset, Keras will automatically download a compressed version of the images and save them under your home directory in <em>~/.keras/datasets/</em>. The download is fast as the dataset is only about eleven megabytes in its compressed form.</p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div id="crayon-5e19f52d36955614126278" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover" style="margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important; height: auto;">
		
			<div class="crayon-toolbar" data-settings=" mouseover overlay hide delay" style="font-size: 12px !important; height: 18px !important; line-height: 18px !important; margin-top: -19px; display: none; position: absolute; z-index: 2;"><span class="crayon-title"></span>
			<div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><div class="crayon-button crayon-nums-button crayon-pressed" title="Toggle Line Numbers"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-expand-button" title="Expand Code" style="display: none;"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div></div></div>
			<div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important;"></div>
			<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly="" style="tab-size: 4; font-size: 12px !important; line-height: 15px !important; z-index: 0; opacity: 0; overflow: hidden;"># example of loading the mnist dataset
from keras.datasets.mnist import load_data
# load the images into memory
(trainX, trainy), (testX, testy) = load_data()
# summarize the shape of the dataset
print('Train', trainX.shape, trainy.shape)
print('Test', testX.shape, testy.shape)</textarea></div>
			<div class="crayon-main" style="position: relative; z-index: 1; overflow: hidden;">
				<table class="crayon-table" style="">
					<tbody><tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-5e19f52d36955614126278-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36955614126278-2">2</div><div class="crayon-num" data-line="crayon-5e19f52d36955614126278-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36955614126278-4">4</div><div class="crayon-num" data-line="crayon-5e19f52d36955614126278-5">5</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36955614126278-6">6</div><div class="crayon-num" data-line="crayon-5e19f52d36955614126278-7">7</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-5e19f52d36955614126278-1"><span class="crayon-p"># example of loading the mnist dataset</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36955614126278-2"><span class="crayon-e">from </span><span class="crayon-v">keras</span><span class="crayon-sy">.</span><span class="crayon-v">datasets</span><span class="crayon-sy">.</span><span class="crayon-e">mnist </span><span class="crayon-e">import </span><span class="crayon-v">load_data</span></div><div class="crayon-line" id="crayon-5e19f52d36955614126278-3"><span class="crayon-p"># load the images into memory</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36955614126278-4"><span class="crayon-sy">(</span><span class="crayon-v">trainX</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">trainy</span><span class="crayon-sy">)</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-v">testX</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">testy</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">load_data</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36955614126278-5"><span class="crayon-p"># summarize the shape of the dataset</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36955614126278-6"><span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-s">'Train'</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">trainX</span><span class="crayon-sy">.</span><span class="crayon-v">shape</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">trainy</span><span class="crayon-sy">.</span><span class="crayon-v">shape</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36955614126278-7"><span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-s">'Test'</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">testX</span><span class="crayon-sy">.</span><span class="crayon-v">shape</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">testy</span><span class="crayon-sy">.</span><span class="crayon-v">shape</span><span class="crayon-sy">)</span></div></div></td>
					</tr>
				</tbody></table>
			</div>
		</div>
<!-- [Format Time: 0.0003 seconds] -->
<p>Running the example loads the dataset and prints the shape of the input and output components of the train and test splits of images.</p>
<p>We can see that there are 60K examples in the training set and 10K in the test set and that each image is a square of 28 by 28 pixels.</p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div id="crayon-5e19f52d3695b516871918" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover" style="margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important; height: auto;">
		
			<div class="crayon-toolbar" data-settings=" mouseover overlay hide delay" style="font-size: 12px !important; height: 18px !important; line-height: 18px !important; margin-top: -19px; display: none; z-index: 4;"><span class="crayon-title"></span>
			<div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><div class="crayon-button crayon-nums-button crayon-pressed" title="Toggle Line Numbers"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-expand-button" title="Expand Code" style="display: none;"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div></div></div>
			<div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important;"></div>
			<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly="" style="tab-size: 4; font-size: 12px !important; line-height: 15px !important; z-index: 0; opacity: 0; overflow: hidden;">Train (60000, 28, 28) (60000,)
Test (10000, 28, 28) (10000,)</textarea></div>
			<div class="crayon-main" style="position: relative; z-index: 1; overflow: hidden;">
				<table class="crayon-table" style="">
					<tbody><tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-5e19f52d3695b516871918-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3695b516871918-2">2</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-5e19f52d3695b516871918-1">Train (60000, 28, 28) (60000,)</div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3695b516871918-2">Test (10000, 28, 28) (10000,)</div></div></td>
					</tr>
				</tbody></table>
			</div>
		</div>
<!-- [Format Time: 0.0000 seconds] -->
<p>The images are grayscale with a black background (0 pixel value) and the handwritten digits in white (pixel values near 255). This means if the images were plotted, they would be mostly black with a white digit in the middle.</p>
<p>We can plot some of the images from the training dataset using the matplotlib library using the <a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.imshow.html">imshow() function</a> and specify the color map via the ‘<em>cmap</em>‘ argument as ‘<em>gray</em>‘ to show the pixel values correctly.</p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div id="crayon-5e19f52d3695c877929671" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover" style="margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important; height: auto;">
		
			<div class="crayon-toolbar" data-settings=" mouseover overlay hide delay" style="font-size: 12px !important; height: 18px !important; line-height: 18px !important; margin-top: -19px; display: none; z-index: 4;"><span class="crayon-title"></span>
			<div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><div class="crayon-button crayon-nums-button crayon-pressed" title="Toggle Line Numbers"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-expand-button" title="Expand Code" style="display: none;"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div></div></div>
			<div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important;"></div>
			<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly="" style="tab-size: 4; font-size: 12px !important; line-height: 15px !important; z-index: 0; opacity: 0; overflow: hidden;"># plot raw pixel data
pyplot.imshow(trainX[i], cmap='gray')</textarea></div>
			<div class="crayon-main" style="position: relative; z-index: 1; overflow: hidden;">
				<table class="crayon-table" style="">
					<tbody><tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-5e19f52d3695c877929671-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3695c877929671-2">2</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-5e19f52d3695c877929671-1"><span class="crayon-p"># plot raw pixel data</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3695c877929671-2"><span class="crayon-v">pyplot</span><span class="crayon-sy">.</span><span class="crayon-e">imshow</span><span class="crayon-sy">(</span><span class="crayon-v">trainX</span><span class="crayon-sy">[</span><span class="crayon-v">i</span><span class="crayon-sy">]</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">cmap</span><span class="crayon-o">=</span><span class="crayon-s">'gray'</span><span class="crayon-sy">)</span></div></div></td>
					</tr>
				</tbody></table>
			</div>
		</div>
<!-- [Format Time: 0.0001 seconds] -->
<p>Alternately, the images are easier to review when we reverse the colors and plot the background as white and the handwritten digits in black.</p>
<p>They are easier to view as most of the image is now white with the area of interest in black. This can be achieved using a reverse grayscale color map, as follows:</p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div id="crayon-5e19f52d3695d731222595" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover" style="margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important; height: auto;">
		
			<div class="crayon-toolbar" data-settings=" mouseover overlay hide delay" style="font-size: 12px !important; height: 18px !important; line-height: 18px !important; margin-top: -19px; display: none; z-index: 4;"><span class="crayon-title"></span>
			<div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><div class="crayon-button crayon-nums-button crayon-pressed" title="Toggle Line Numbers"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-expand-button" title="Expand Code" style="display: none;"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div></div></div>
			<div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important;"></div>
			<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly="" style="tab-size: 4; font-size: 12px !important; line-height: 15px !important; z-index: 0; opacity: 0; overflow: hidden;"># plot raw pixel data
pyplot.imshow(trainX[i], cmap='gray_r')</textarea></div>
			<div class="crayon-main" style="position: relative; z-index: 1; overflow: hidden;">
				<table class="crayon-table" style="">
					<tbody><tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-5e19f52d3695d731222595-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3695d731222595-2">2</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-5e19f52d3695d731222595-1"><span class="crayon-p"># plot raw pixel data</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3695d731222595-2"><span class="crayon-v">pyplot</span><span class="crayon-sy">.</span><span class="crayon-e">imshow</span><span class="crayon-sy">(</span><span class="crayon-v">trainX</span><span class="crayon-sy">[</span><span class="crayon-v">i</span><span class="crayon-sy">]</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">cmap</span><span class="crayon-o">=</span><span class="crayon-s">'gray_r'</span><span class="crayon-sy">)</span></div></div></td>
					</tr>
				</tbody></table>
			</div>
		</div>
<!-- [Format Time: 0.0001 seconds] -->
<p>The example below plots the first 25 images from the training dataset in a 5 by 5 square.</p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div id="crayon-5e19f52d3695e346649984" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover" style="margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important; height: auto;">
		
			<div class="crayon-toolbar" data-settings=" mouseover overlay hide delay" style="font-size: 12px !important; height: 18px !important; line-height: 18px !important; margin-top: -19px; display: none; position: absolute; z-index: 2;"><span class="crayon-title"></span>
			<div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><div class="crayon-button crayon-nums-button crayon-pressed" title="Toggle Line Numbers"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-expand-button" title="Expand Code" style="display: none;"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div></div></div>
			<div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important;"></div>
			<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly="" style="tab-size: 4; font-size: 12px !important; line-height: 15px !important; z-index: 0; opacity: 0; overflow: hidden;"># example of loading the mnist dataset
from keras.datasets.mnist import load_data
from matplotlib import pyplot
# load the images into memory
(trainX, trainy), (testX, testy) = load_data()
# plot images from the training dataset
for i in range(25):
	# define subplot
	pyplot.subplot(5, 5, 1 + i)
	# turn off axis
	pyplot.axis('off')
	# plot raw pixel data
	pyplot.imshow(trainX[i], cmap='gray_r')
pyplot.show()</textarea></div>
			<div class="crayon-main" style="position: relative; z-index: 1; overflow: hidden;">
				<table class="crayon-table" style="">
					<tbody><tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-5e19f52d3695e346649984-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3695e346649984-2">2</div><div class="crayon-num" data-line="crayon-5e19f52d3695e346649984-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3695e346649984-4">4</div><div class="crayon-num" data-line="crayon-5e19f52d3695e346649984-5">5</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3695e346649984-6">6</div><div class="crayon-num" data-line="crayon-5e19f52d3695e346649984-7">7</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3695e346649984-8">8</div><div class="crayon-num" data-line="crayon-5e19f52d3695e346649984-9">9</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3695e346649984-10">10</div><div class="crayon-num" data-line="crayon-5e19f52d3695e346649984-11">11</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3695e346649984-12">12</div><div class="crayon-num" data-line="crayon-5e19f52d3695e346649984-13">13</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3695e346649984-14">14</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-5e19f52d3695e346649984-1"><span class="crayon-p"># example of loading the mnist dataset</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3695e346649984-2"><span class="crayon-e">from </span><span class="crayon-v">keras</span><span class="crayon-sy">.</span><span class="crayon-v">datasets</span><span class="crayon-sy">.</span><span class="crayon-e">mnist </span><span class="crayon-e">import </span><span class="crayon-e">load_data</span></div><div class="crayon-line" id="crayon-5e19f52d3695e346649984-3"><span class="crayon-e">from </span><span class="crayon-e">matplotlib </span><span class="crayon-e">import </span><span class="crayon-v">pyplot</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3695e346649984-4"><span class="crayon-p"># load the images into memory</span></div><div class="crayon-line" id="crayon-5e19f52d3695e346649984-5"><span class="crayon-sy">(</span><span class="crayon-v">trainX</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">trainy</span><span class="crayon-sy">)</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-v">testX</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">testy</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">load_data</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3695e346649984-6"><span class="crayon-p"># plot images from the training dataset</span></div><div class="crayon-line" id="crayon-5e19f52d3695e346649984-7"><span class="crayon-st">for</span><span class="crayon-h"> </span><span class="crayon-i">i</span><span class="crayon-h"> </span><span class="crayon-st">in</span><span class="crayon-h"> </span><span class="crayon-e">range</span><span class="crayon-sy">(</span><span class="crayon-cn">25</span><span class="crayon-sy">)</span><span class="crayon-o">:</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3695e346649984-8"><span class="crayon-h">	</span><span class="crayon-p"># define subplot</span></div><div class="crayon-line" id="crayon-5e19f52d3695e346649984-9"><span class="crayon-h">	</span><span class="crayon-v">pyplot</span><span class="crayon-sy">.</span><span class="crayon-e">subplot</span><span class="crayon-sy">(</span><span class="crayon-cn">5</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">5</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">1</span><span class="crayon-h"> </span><span class="crayon-o">+</span><span class="crayon-h"> </span><span class="crayon-v">i</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3695e346649984-10"><span class="crayon-h">	</span><span class="crayon-p"># turn off axis</span></div><div class="crayon-line" id="crayon-5e19f52d3695e346649984-11"><span class="crayon-h">	</span><span class="crayon-v">pyplot</span><span class="crayon-sy">.</span><span class="crayon-e">axis</span><span class="crayon-sy">(</span><span class="crayon-s">'off'</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3695e346649984-12"><span class="crayon-h">	</span><span class="crayon-p"># plot raw pixel data</span></div><div class="crayon-line" id="crayon-5e19f52d3695e346649984-13"><span class="crayon-h">	</span><span class="crayon-v">pyplot</span><span class="crayon-sy">.</span><span class="crayon-e">imshow</span><span class="crayon-sy">(</span><span class="crayon-v">trainX</span><span class="crayon-sy">[</span><span class="crayon-v">i</span><span class="crayon-sy">]</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">cmap</span><span class="crayon-o">=</span><span class="crayon-s">'gray_r'</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3695e346649984-14"><span class="crayon-v">pyplot</span><span class="crayon-sy">.</span><span class="crayon-e">show</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span></div></div></td>
					</tr>
				</tbody></table>
			</div>
		</div>
<!-- [Format Time: 0.0004 seconds] -->
<p>Running the example creates a plot of 25 images from the MNIST training dataset, arranged in a 5×5 square.</p>
<div id="attachment_8104" style="width: 1034px" class="wp-caption aligncenter"><img aria-describedby="caption-attachment-8104" class="size-large wp-image-8104" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/Plot-of-the-First-25-Handwritten-Digits-From-the-MNIST-Dataset-1024x768.png" alt="Plot of the First 25 Handwritten Digits From the MNIST Dataset." width="1024" height="768" srcset="https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/uploads/2019/04/Plot-of-the-First-25-Handwritten-Digits-From-the-MNIST-Dataset-1024x768.png 1024w, https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/uploads/2019/04/Plot-of-the-First-25-Handwritten-Digits-From-the-MNIST-Dataset-300x225.png 300w, https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/uploads/2019/04/Plot-of-the-First-25-Handwritten-Digits-From-the-MNIST-Dataset-768x576.png 768w, https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/uploads/2019/04/Plot-of-the-First-25-Handwritten-Digits-From-the-MNIST-Dataset.png 1280w" sizes="(max-width: 1024px) 100vw, 1024px"><p id="caption-attachment-8104" class="wp-caption-text">Plot of the First 25 Handwritten Digits From the MNIST Dataset.</p></div>
<p>We will use the images in the training dataset as the basis for training a Generative Adversarial Network.</p>
<p>Specifically, the generator model will learn how to generate new plausible handwritten digits between 0 and 9, using a discriminator that will try to distinguish between real images from the MNIST training dataset and new images output by the generator model.</p>
<p>This is a relatively simple problem that does not require a sophisticated generator or discriminator model, although it does require the generation of a grayscale output image.</p>
<div class="woo-sc-hr"></div>
<center>
<h3>Want to Develop GANs from Scratch?</h3>
<p>Take my free 7-day email crash course now (with sample code).</p>
<p>Click to sign-up and also get a free PDF Ebook version of the course.</p>
<p><a href="https://machinelearningmastery.lpages.co/leadbox/162526e1b172a2%3A164f8be4f346dc/5926953912500224/" target="_blank" style="background: rgb(255, 206, 10); color: rgb(255, 255, 255); text-decoration: none; font-family: Helvetica, Arial, sans-serif; font-weight: bold; font-size: 16px; line-height: 20px; padding: 10px; display: inline-block; max-width: 300px; border-radius: 5px; text-shadow: rgba(0, 0, 0, 0.25) 0px -1px 1px; box-shadow: rgba(255, 255, 255, 0.5) 0px 1px 3px inset, rgba(0, 0, 0, 0.5) 0px 1px 3px;" rel="noopener noreferrer" data-leadbox="https://machinelearningmastery.lpages.co/leadbox/162526e1b172a2%3A164f8be4f346dc/5926953912500224/" data-leadbox-id="162526e1b172a2:164f8be4f346dc">Download Your FREE Mini-Course</a><script data-leadbox="162526e1b172a2:164f8be4f346dc" data-url="https://machinelearningmastery.lpages.co/leadbox/162526e1b172a2%3A164f8be4f346dc/5926953912500224/" data-config="%7B%7D" type="text/javascript" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/leadbox-1562872266.js"></script></p>
</center>
<div class="woo-sc-hr"></div>
<h2>How to Define and Train the Discriminator Model</h2>
<p>The first step is to define the discriminator model.</p>
<p>The model must take a sample image from our dataset as input and output a classification prediction as to whether the sample is real or fake.</p>
<p>This is a binary classification problem:</p>
<ul>
<li><strong>Inputs</strong>: Image with one channel and 28×28 pixels in size.</li>
<li><strong>Outputs</strong>: Binary classification, likelihood the sample is real (or fake).</li>
</ul>
<p>The discriminator model has two <a href="https://machinelearningmastery.com/convolutional-layers-for-deep-learning-neural-networks/">convolutional layers</a> with 64 filters each, a small kernel size of 3, and larger than normal stride of 2. The model has no pooling layers and a single node in the output layer with the sigmoid activation function to predict whether the input sample is real or fake. The model is trained to minimize the <a href="https://machinelearningmastery.com/how-to-choose-loss-functions-when-training-deep-learning-neural-networks/">binary cross entropy loss function</a>, appropriate for binary classification.</p>
<p>We will use some best practices in defining the discriminator model, such as the use of LeakyReLU instead of <a href="https://machinelearningmastery.com/rectified-linear-activation-function-for-deep-learning-neural-networks/">ReLU</a>, using <a href="https://machinelearningmastery.com/how-to-reduce-overfitting-with-dropout-regularization-in-keras/">Dropout</a>, and using the <a href="https://machinelearningmastery.com/adam-optimization-algorithm-for-deep-learning/">Adam version of stochastic gradient descent</a> with a learning rate of 0.0002 and a momentum of 0.5.</p>
<p>The function <em>define_discriminator()</em> below defines the discriminator model and parametrizes the size of the input image.</p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div id="crayon-5e19f52d3695f536109314" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover" style="margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important; height: auto;">
		
			<div class="crayon-toolbar" data-settings=" mouseover overlay hide delay" style="font-size: 12px !important; height: 18px !important; line-height: 18px !important; margin-top: -19px; display: none; position: absolute; z-index: 2;"><span class="crayon-title"></span>
			<div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><div class="crayon-button crayon-nums-button crayon-pressed" title="Toggle Line Numbers"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div></div></div>
			<div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important;"></div>
			<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly="" style="tab-size: 4; font-size: 12px !important; line-height: 15px !important; z-index: 0; opacity: 0; overflow: hidden;"># define the standalone discriminator model
def define_discriminator(in_shape=(28,28,1)):
	model = Sequential()
	model.add(Conv2D(64, (3,3), strides=(2, 2), padding='same', input_shape=in_shape))
	model.add(LeakyReLU(alpha=0.2))
	model.add(Dropout(0.4))
	model.add(Conv2D(64, (3,3), strides=(2, 2), padding='same'))
	model.add(LeakyReLU(alpha=0.2))
	model.add(Dropout(0.4))
	model.add(Flatten())
	model.add(Dense(1, activation='sigmoid'))
	# compile model
	opt = Adam(lr=0.0002, beta_1=0.5)
	model.compile(loss='binary_crossentropy', optimizer=opt, metrics=['accuracy'])
	return model</textarea></div>
			<div class="crayon-main" style="position: relative; z-index: 1; overflow: hidden;">
				<table class="crayon-table" style="">
					<tbody><tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-5e19f52d3695f536109314-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3695f536109314-2">2</div><div class="crayon-num" data-line="crayon-5e19f52d3695f536109314-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3695f536109314-4">4</div><div class="crayon-num" data-line="crayon-5e19f52d3695f536109314-5">5</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3695f536109314-6">6</div><div class="crayon-num" data-line="crayon-5e19f52d3695f536109314-7">7</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3695f536109314-8">8</div><div class="crayon-num" data-line="crayon-5e19f52d3695f536109314-9">9</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3695f536109314-10">10</div><div class="crayon-num" data-line="crayon-5e19f52d3695f536109314-11">11</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3695f536109314-12">12</div><div class="crayon-num" data-line="crayon-5e19f52d3695f536109314-13">13</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3695f536109314-14">14</div><div class="crayon-num" data-line="crayon-5e19f52d3695f536109314-15">15</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-5e19f52d3695f536109314-1"><span class="crayon-p"># define the standalone discriminator model</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3695f536109314-2"><span class="crayon-e">def </span><span class="crayon-e">define_discriminator</span><span class="crayon-sy">(</span><span class="crayon-v">in_shape</span><span class="crayon-o">=</span><span class="crayon-sy">(</span><span class="crayon-cn">28</span><span class="crayon-sy">,</span><span class="crayon-cn">28</span><span class="crayon-sy">,</span><span class="crayon-cn">1</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span><span class="crayon-o">:</span></div><div class="crayon-line" id="crayon-5e19f52d3695f536109314-3"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">Sequential</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3695f536109314-4"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">Conv2D</span><span class="crayon-sy">(</span><span class="crayon-cn">64</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-cn">3</span><span class="crayon-sy">,</span><span class="crayon-cn">3</span><span class="crayon-sy">)</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">strides</span><span class="crayon-o">=</span><span class="crayon-sy">(</span><span class="crayon-cn">2</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">2</span><span class="crayon-sy">)</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">padding</span><span class="crayon-o">=</span><span class="crayon-s">'same'</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">input_shape</span><span class="crayon-o">=</span><span class="crayon-v">in_shape</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d3695f536109314-5"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">LeakyReLU</span><span class="crayon-sy">(</span><span class="crayon-v">alpha</span><span class="crayon-o">=</span><span class="crayon-cn">0.2</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3695f536109314-6"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">Dropout</span><span class="crayon-sy">(</span><span class="crayon-cn">0.4</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d3695f536109314-7"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">Conv2D</span><span class="crayon-sy">(</span><span class="crayon-cn">64</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-cn">3</span><span class="crayon-sy">,</span><span class="crayon-cn">3</span><span class="crayon-sy">)</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">strides</span><span class="crayon-o">=</span><span class="crayon-sy">(</span><span class="crayon-cn">2</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">2</span><span class="crayon-sy">)</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">padding</span><span class="crayon-o">=</span><span class="crayon-s">'same'</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3695f536109314-8"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">LeakyReLU</span><span class="crayon-sy">(</span><span class="crayon-v">alpha</span><span class="crayon-o">=</span><span class="crayon-cn">0.2</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d3695f536109314-9"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">Dropout</span><span class="crayon-sy">(</span><span class="crayon-cn">0.4</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3695f536109314-10"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">Flatten</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d3695f536109314-11"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">Dense</span><span class="crayon-sy">(</span><span class="crayon-cn">1</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">activation</span><span class="crayon-o">=</span><span class="crayon-s">'sigmoid'</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3695f536109314-12"><span class="crayon-h">	</span><span class="crayon-p"># compile model</span></div><div class="crayon-line" id="crayon-5e19f52d3695f536109314-13"><span class="crayon-h">	</span><span class="crayon-v">opt</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">Adam</span><span class="crayon-sy">(</span><span class="crayon-v">lr</span><span class="crayon-o">=</span><span class="crayon-cn">0.0002</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">beta_1</span><span class="crayon-o">=</span><span class="crayon-cn">0.5</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3695f536109314-14"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">compile</span><span class="crayon-sy">(</span><span class="crayon-v">loss</span><span class="crayon-o">=</span><span class="crayon-s">'binary_crossentropy'</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">optimizer</span><span class="crayon-o">=</span><span class="crayon-v">opt</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">metrics</span><span class="crayon-o">=</span><span class="crayon-sy">[</span><span class="crayon-s">'accuracy'</span><span class="crayon-sy">]</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d3695f536109314-15"><span class="crayon-h">	</span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-v">model</span></div></div></td>
					</tr>
				</tbody></table>
			</div>
		</div>
<!-- [Format Time: 0.0008 seconds] -->
<p>We can use this function to define the discriminator model and summarize it.</p>
<p>The complete example is listed below.</p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div id="crayon-5e19f52d36960270503827" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover" style="margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important; height: auto;">
		
			<div class="crayon-toolbar" data-settings=" mouseover overlay hide delay" style="font-size: 12px !important; height: 18px !important; line-height: 18px !important; margin-top: -19px; display: none; position: absolute; z-index: 2;"><span class="crayon-title"></span>
			<div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><div class="crayon-button crayon-nums-button crayon-pressed" title="Toggle Line Numbers"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div></div></div>
			<div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important;"></div>
			<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly="" style="tab-size: 4; font-size: 12px !important; line-height: 15px !important; z-index: 0; opacity: 0; overflow: hidden;"># example of defining the discriminator model
from keras.models import Sequential
from keras.optimizers import Adam
from keras.layers import Dense
from keras.layers import Conv2D
from keras.layers import Flatten
from keras.layers import Dropout
from keras.layers import LeakyReLU
from keras.utils.vis_utils import plot_model

# define the standalone discriminator model
def define_discriminator(in_shape=(28,28,1)):
	model = Sequential()
	model.add(Conv2D(64, (3,3), strides=(2, 2), padding='same', input_shape=in_shape))
	model.add(LeakyReLU(alpha=0.2))
	model.add(Dropout(0.4))
	model.add(Conv2D(64, (3,3), strides=(2, 2), padding='same'))
	model.add(LeakyReLU(alpha=0.2))
	model.add(Dropout(0.4))
	model.add(Flatten())
	model.add(Dense(1, activation='sigmoid'))
	# compile model
	opt = Adam(lr=0.0002, beta_1=0.5)
	model.compile(loss='binary_crossentropy', optimizer=opt, metrics=['accuracy'])
	return model

# define model
model = define_discriminator()
# summarize the model
model.summary()
# plot the model
plot_model(model, to_file='discriminator_plot.png', show_shapes=True, show_layer_names=True)</textarea></div>
			<div class="crayon-main" style="position: relative; z-index: 1; overflow: hidden;">
				<table class="crayon-table" style="">
					<tbody><tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-5e19f52d36960270503827-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36960270503827-2">2</div><div class="crayon-num" data-line="crayon-5e19f52d36960270503827-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36960270503827-4">4</div><div class="crayon-num" data-line="crayon-5e19f52d36960270503827-5">5</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36960270503827-6">6</div><div class="crayon-num" data-line="crayon-5e19f52d36960270503827-7">7</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36960270503827-8">8</div><div class="crayon-num" data-line="crayon-5e19f52d36960270503827-9">9</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36960270503827-10">10</div><div class="crayon-num" data-line="crayon-5e19f52d36960270503827-11">11</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36960270503827-12">12</div><div class="crayon-num" data-line="crayon-5e19f52d36960270503827-13">13</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36960270503827-14">14</div><div class="crayon-num" data-line="crayon-5e19f52d36960270503827-15">15</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36960270503827-16">16</div><div class="crayon-num" data-line="crayon-5e19f52d36960270503827-17">17</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36960270503827-18">18</div><div class="crayon-num" data-line="crayon-5e19f52d36960270503827-19">19</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36960270503827-20">20</div><div class="crayon-num" data-line="crayon-5e19f52d36960270503827-21">21</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36960270503827-22">22</div><div class="crayon-num" data-line="crayon-5e19f52d36960270503827-23">23</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36960270503827-24">24</div><div class="crayon-num" data-line="crayon-5e19f52d36960270503827-25">25</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36960270503827-26">26</div><div class="crayon-num" data-line="crayon-5e19f52d36960270503827-27">27</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36960270503827-28">28</div><div class="crayon-num" data-line="crayon-5e19f52d36960270503827-29">29</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36960270503827-30">30</div><div class="crayon-num" data-line="crayon-5e19f52d36960270503827-31">31</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36960270503827-32">32</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-5e19f52d36960270503827-1"><span class="crayon-p"># example of defining the discriminator model</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36960270503827-2"><span class="crayon-e">from </span><span class="crayon-v">keras</span><span class="crayon-sy">.</span><span class="crayon-e">models </span><span class="crayon-e">import </span><span class="crayon-e">Sequential</span></div><div class="crayon-line" id="crayon-5e19f52d36960270503827-3"><span class="crayon-e">from </span><span class="crayon-v">keras</span><span class="crayon-sy">.</span><span class="crayon-e">optimizers </span><span class="crayon-e">import </span><span class="crayon-e">Adam</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36960270503827-4"><span class="crayon-e">from </span><span class="crayon-v">keras</span><span class="crayon-sy">.</span><span class="crayon-e">layers </span><span class="crayon-e">import </span><span class="crayon-e">Dense</span></div><div class="crayon-line" id="crayon-5e19f52d36960270503827-5"><span class="crayon-e">from </span><span class="crayon-v">keras</span><span class="crayon-sy">.</span><span class="crayon-e">layers </span><span class="crayon-e">import </span><span class="crayon-e">Conv2D</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36960270503827-6"><span class="crayon-e">from </span><span class="crayon-v">keras</span><span class="crayon-sy">.</span><span class="crayon-e">layers </span><span class="crayon-e">import </span><span class="crayon-e">Flatten</span></div><div class="crayon-line" id="crayon-5e19f52d36960270503827-7"><span class="crayon-e">from </span><span class="crayon-v">keras</span><span class="crayon-sy">.</span><span class="crayon-e">layers </span><span class="crayon-e">import </span><span class="crayon-e">Dropout</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36960270503827-8"><span class="crayon-e">from </span><span class="crayon-v">keras</span><span class="crayon-sy">.</span><span class="crayon-e">layers </span><span class="crayon-e">import </span><span class="crayon-e">LeakyReLU</span></div><div class="crayon-line" id="crayon-5e19f52d36960270503827-9"><span class="crayon-e">from </span><span class="crayon-v">keras</span><span class="crayon-sy">.</span><span class="crayon-v">utils</span><span class="crayon-sy">.</span><span class="crayon-e">vis_utils </span><span class="crayon-e">import </span><span class="crayon-v">plot_model</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36960270503827-10">&nbsp;</div><div class="crayon-line" id="crayon-5e19f52d36960270503827-11"><span class="crayon-p"># define the standalone discriminator model</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36960270503827-12"><span class="crayon-e">def </span><span class="crayon-e">define_discriminator</span><span class="crayon-sy">(</span><span class="crayon-v">in_shape</span><span class="crayon-o">=</span><span class="crayon-sy">(</span><span class="crayon-cn">28</span><span class="crayon-sy">,</span><span class="crayon-cn">28</span><span class="crayon-sy">,</span><span class="crayon-cn">1</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span><span class="crayon-o">:</span></div><div class="crayon-line" id="crayon-5e19f52d36960270503827-13"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">Sequential</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36960270503827-14"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">Conv2D</span><span class="crayon-sy">(</span><span class="crayon-cn">64</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-cn">3</span><span class="crayon-sy">,</span><span class="crayon-cn">3</span><span class="crayon-sy">)</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">strides</span><span class="crayon-o">=</span><span class="crayon-sy">(</span><span class="crayon-cn">2</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">2</span><span class="crayon-sy">)</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">padding</span><span class="crayon-o">=</span><span class="crayon-s">'same'</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">input_shape</span><span class="crayon-o">=</span><span class="crayon-v">in_shape</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36960270503827-15"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">LeakyReLU</span><span class="crayon-sy">(</span><span class="crayon-v">alpha</span><span class="crayon-o">=</span><span class="crayon-cn">0.2</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36960270503827-16"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">Dropout</span><span class="crayon-sy">(</span><span class="crayon-cn">0.4</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36960270503827-17"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">Conv2D</span><span class="crayon-sy">(</span><span class="crayon-cn">64</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-cn">3</span><span class="crayon-sy">,</span><span class="crayon-cn">3</span><span class="crayon-sy">)</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">strides</span><span class="crayon-o">=</span><span class="crayon-sy">(</span><span class="crayon-cn">2</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">2</span><span class="crayon-sy">)</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">padding</span><span class="crayon-o">=</span><span class="crayon-s">'same'</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36960270503827-18"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">LeakyReLU</span><span class="crayon-sy">(</span><span class="crayon-v">alpha</span><span class="crayon-o">=</span><span class="crayon-cn">0.2</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36960270503827-19"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">Dropout</span><span class="crayon-sy">(</span><span class="crayon-cn">0.4</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36960270503827-20"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">Flatten</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36960270503827-21"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">Dense</span><span class="crayon-sy">(</span><span class="crayon-cn">1</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">activation</span><span class="crayon-o">=</span><span class="crayon-s">'sigmoid'</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36960270503827-22"><span class="crayon-h">	</span><span class="crayon-p"># compile model</span></div><div class="crayon-line" id="crayon-5e19f52d36960270503827-23"><span class="crayon-h">	</span><span class="crayon-v">opt</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">Adam</span><span class="crayon-sy">(</span><span class="crayon-v">lr</span><span class="crayon-o">=</span><span class="crayon-cn">0.0002</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">beta_1</span><span class="crayon-o">=</span><span class="crayon-cn">0.5</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36960270503827-24"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">compile</span><span class="crayon-sy">(</span><span class="crayon-v">loss</span><span class="crayon-o">=</span><span class="crayon-s">'binary_crossentropy'</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">optimizer</span><span class="crayon-o">=</span><span class="crayon-v">opt</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">metrics</span><span class="crayon-o">=</span><span class="crayon-sy">[</span><span class="crayon-s">'accuracy'</span><span class="crayon-sy">]</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36960270503827-25"><span class="crayon-h">	</span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-v">model</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36960270503827-26">&nbsp;</div><div class="crayon-line" id="crayon-5e19f52d36960270503827-27"><span class="crayon-p"># define model</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36960270503827-28"><span class="crayon-v">model</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">define_discriminator</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36960270503827-29"><span class="crayon-p"># summarize the model</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36960270503827-30"><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">summary</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36960270503827-31"><span class="crayon-p"># plot the model</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36960270503827-32"><span class="crayon-e">plot_model</span><span class="crayon-sy">(</span><span class="crayon-v">model</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">to_file</span><span class="crayon-o">=</span><span class="crayon-s">'discriminator_plot.png'</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">show_shapes</span><span class="crayon-o">=</span><span class="crayon-t">True</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">show_layer_names</span><span class="crayon-o">=</span><span class="crayon-t">True</span><span class="crayon-sy">)</span></div></div></td>
					</tr>
				</tbody></table>
			</div>
		</div>
<!-- [Format Time: 0.0017 seconds] -->
<p>Running the example first summarizes the model architecture, showing the input and output from each layer.</p>
<p>We can see that the aggressive <a href="https://machinelearningmastery.com/padding-and-stride-for-convolutional-neural-networks/">2×2 stride acts to down-sample the input image</a>, first from 28×28 to 14×14, then to 7×7, before the model makes an output prediction.</p>
<p>This pattern is by design as we do not use pooling layers and use the large stride as achieve a similar downsampling effect. We will see a similar pattern, but in reverse, in the generator model in the next section.</p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div id="crayon-5e19f52d36961020505108" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover" style="margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important; height: auto;">
		
			<div class="crayon-toolbar" data-settings=" mouseover overlay hide delay" style="font-size: 12px !important; height: 18px !important; line-height: 18px !important; margin-top: -19px; display: none; position: absolute; z-index: 2;"><span class="crayon-title"></span>
			<div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><div class="crayon-button crayon-nums-button crayon-pressed" title="Toggle Line Numbers"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-expand-button" title="Expand Code" style="display: none;"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div></div></div>
			<div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important;"></div>
			<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly="" style="tab-size: 4; font-size: 12px !important; line-height: 15px !important; z-index: 0; opacity: 0; overflow: hidden;">_________________________________________________________________
Layer (type)                 Output Shape              Param #
=================================================================
conv2d_1 (Conv2D)            (None, 14, 14, 64)        640
_________________________________________________________________
leaky_re_lu_1 (LeakyReLU)    (None, 14, 14, 64)        0
_________________________________________________________________
dropout_1 (Dropout)          (None, 14, 14, 64)        0
_________________________________________________________________
conv2d_2 (Conv2D)            (None, 7, 7, 64)          36928
_________________________________________________________________
leaky_re_lu_2 (LeakyReLU)    (None, 7, 7, 64)          0
_________________________________________________________________
dropout_2 (Dropout)          (None, 7, 7, 64)          0
_________________________________________________________________
flatten_1 (Flatten)          (None, 3136)              0
_________________________________________________________________
dense_1 (Dense)              (None, 1)                 3137
=================================================================
Total params: 40,705
Trainable params: 40,705
Non-trainable params: 0
_________________________________________________________________</textarea></div>
			<div class="crayon-main" style="position: relative; z-index: 1; overflow: hidden;">
				<table class="crayon-table" style="">
					<tbody><tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-5e19f52d36961020505108-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36961020505108-2">2</div><div class="crayon-num" data-line="crayon-5e19f52d36961020505108-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36961020505108-4">4</div><div class="crayon-num" data-line="crayon-5e19f52d36961020505108-5">5</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36961020505108-6">6</div><div class="crayon-num" data-line="crayon-5e19f52d36961020505108-7">7</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36961020505108-8">8</div><div class="crayon-num" data-line="crayon-5e19f52d36961020505108-9">9</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36961020505108-10">10</div><div class="crayon-num" data-line="crayon-5e19f52d36961020505108-11">11</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36961020505108-12">12</div><div class="crayon-num" data-line="crayon-5e19f52d36961020505108-13">13</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36961020505108-14">14</div><div class="crayon-num" data-line="crayon-5e19f52d36961020505108-15">15</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36961020505108-16">16</div><div class="crayon-num" data-line="crayon-5e19f52d36961020505108-17">17</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36961020505108-18">18</div><div class="crayon-num" data-line="crayon-5e19f52d36961020505108-19">19</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36961020505108-20">20</div><div class="crayon-num" data-line="crayon-5e19f52d36961020505108-21">21</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36961020505108-22">22</div><div class="crayon-num" data-line="crayon-5e19f52d36961020505108-23">23</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-5e19f52d36961020505108-1">_________________________________________________________________</div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36961020505108-2">Layer (type)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Output Shape&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Param #</div><div class="crayon-line" id="crayon-5e19f52d36961020505108-3">=================================================================</div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36961020505108-4">conv2d_1 (Conv2D)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(None, 14, 14, 64)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;640</div><div class="crayon-line" id="crayon-5e19f52d36961020505108-5">_________________________________________________________________</div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36961020505108-6">leaky_re_lu_1 (LeakyReLU)&nbsp;&nbsp;&nbsp;&nbsp;(None, 14, 14, 64)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0</div><div class="crayon-line" id="crayon-5e19f52d36961020505108-7">_________________________________________________________________</div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36961020505108-8">dropout_1 (Dropout)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(None, 14, 14, 64)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0</div><div class="crayon-line" id="crayon-5e19f52d36961020505108-9">_________________________________________________________________</div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36961020505108-10">conv2d_2 (Conv2D)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(None, 7, 7, 64)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;36928</div><div class="crayon-line" id="crayon-5e19f52d36961020505108-11">_________________________________________________________________</div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36961020505108-12">leaky_re_lu_2 (LeakyReLU)&nbsp;&nbsp;&nbsp;&nbsp;(None, 7, 7, 64)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0</div><div class="crayon-line" id="crayon-5e19f52d36961020505108-13">_________________________________________________________________</div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36961020505108-14">dropout_2 (Dropout)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(None, 7, 7, 64)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0</div><div class="crayon-line" id="crayon-5e19f52d36961020505108-15">_________________________________________________________________</div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36961020505108-16">flatten_1 (Flatten)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(None, 3136)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0</div><div class="crayon-line" id="crayon-5e19f52d36961020505108-17">_________________________________________________________________</div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36961020505108-18">dense_1 (Dense)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(None, 1)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3137</div><div class="crayon-line" id="crayon-5e19f52d36961020505108-19">=================================================================</div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36961020505108-20">Total params: 40,705</div><div class="crayon-line" id="crayon-5e19f52d36961020505108-21">Trainable params: 40,705</div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36961020505108-22">Non-trainable params: 0</div><div class="crayon-line" id="crayon-5e19f52d36961020505108-23">_________________________________________________________________</div></div></td>
					</tr>
				</tbody></table>
			</div>
		</div>
<!-- [Format Time: 0.0001 seconds] -->
<p>A plot of the model is also created and we can see that the model expects two inputs and will predict a single output.</p>
<p><strong>Note</strong>: creating this plot assumes that the pydot and graphviz libraries are installed. If this is a problem, you can comment out the import statement for the <em>plot_model</em> function and the call to the <em>plot_model()</em> function.</p>
<div id="attachment_8105" style="width: 485px" class="wp-caption aligncenter"><img aria-describedby="caption-attachment-8105" class="size-full wp-image-8105" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/Plot-of-the-Discriminator-Model-in-the-MNIST-GAN.png" alt="Plot of the Discriminator Model in the MNIST GAN" width="475" height="945" srcset="https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/uploads/2019/04/Plot-of-the-Discriminator-Model-in-the-MNIST-GAN.png 475w, https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/uploads/2019/04/Plot-of-the-Discriminator-Model-in-the-MNIST-GAN-151x300.png 151w" sizes="(max-width: 475px) 100vw, 475px"><p id="caption-attachment-8105" class="wp-caption-text">Plot of the Discriminator Model in the MNIST GAN</p></div>
<p>We could start training this model now with real examples with a class label of one, and randomly generated samples with a class label of zero.</p>
<p>The development of these elements will be useful later, and it helps to see that the discriminator is just a normal neural network model for binary classification.</p>
<p>First, we need a function to load and prepare the dataset of real images.</p>
<p>We will use the <em>mnist.load_data()</em> function to load the MNIST dataset and just use the input part of the training dataset as the real images.</p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div id="crayon-5e19f52d36962401389071" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover" style="margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important; height: auto;">
		
			<div class="crayon-toolbar" data-settings=" mouseover overlay hide delay" style="font-size: 12px !important; height: 18px !important; line-height: 18px !important; margin-top: -19px; display: none; z-index: 4;"><span class="crayon-title"></span>
			<div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><div class="crayon-button crayon-nums-button crayon-pressed" title="Toggle Line Numbers"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-expand-button" title="Expand Code" style="display: none;"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div></div></div>
			<div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important;"></div>
			<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly="" style="tab-size: 4; font-size: 12px !important; line-height: 15px !important; z-index: 0; opacity: 0; overflow: hidden;"># load mnist dataset
(trainX, _), (_, _) = load_data()</textarea></div>
			<div class="crayon-main" style="position: relative; z-index: 1; overflow: hidden;">
				<table class="crayon-table" style="">
					<tbody><tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-5e19f52d36962401389071-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36962401389071-2">2</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-5e19f52d36962401389071-1"><span class="crayon-p"># load mnist dataset</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36962401389071-2"><span class="crayon-sy">(</span><span class="crayon-v">trainX</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">_</span><span class="crayon-sy">)</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-v">_</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">_</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">load_data</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span></div></div></td>
					</tr>
				</tbody></table>
			</div>
		</div>
<!-- [Format Time: 0.0001 seconds] -->
<p>The images are 2D arrays of pixels and convolutional neural networks expect 3D arrays of images as input, where each image has one or more channels.</p>
<p>We must update the images to have an additional dimension for the grayscale channel. We can do this using the <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.expand_dims.html">expand_dims() NumPy function</a> and specify the final dimension for the channels-last image format.</p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div id="crayon-5e19f52d36963182377421" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover" style="margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important; height: auto;">
		
			<div class="crayon-toolbar" data-settings=" mouseover overlay hide delay" style="font-size: 12px !important; height: 18px !important; line-height: 18px !important; margin-top: -19px; display: none; z-index: 4;"><span class="crayon-title"></span>
			<div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><div class="crayon-button crayon-nums-button crayon-pressed" title="Toggle Line Numbers"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-expand-button" title="Expand Code" style="display: none;"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div></div></div>
			<div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important;"></div>
			<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly="" style="tab-size: 4; font-size: 12px !important; line-height: 15px !important; z-index: 0; opacity: 0; overflow: hidden;"># expand to 3d, e.g. add channels dimension
X = expand_dims(trainX, axis=-1)</textarea></div>
			<div class="crayon-main" style="position: relative; z-index: 1; overflow: hidden;">
				<table class="crayon-table" style="">
					<tbody><tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-5e19f52d36963182377421-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36963182377421-2">2</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-5e19f52d36963182377421-1"><span class="crayon-p"># expand to 3d, e.g. add channels dimension</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36963182377421-2"><span class="crayon-v">X</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">expand_dims</span><span class="crayon-sy">(</span><span class="crayon-v">trainX</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">axis</span><span class="crayon-o">=</span><span class="crayon-o">-</span><span class="crayon-cn">1</span><span class="crayon-sy">)</span></div></div></td>
					</tr>
				</tbody></table>
			</div>
		</div>
<!-- [Format Time: 0.0001 seconds] -->
<p>Finally, we must <a href="https://machinelearningmastery.com/how-to-manually-scale-image-pixel-data-for-deep-learning/">scale the pixel values</a> from the range of unsigned integers in [0,255] to the normalized range of [0,1].</p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div id="crayon-5e19f52d36964391155691" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover" style="margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important; height: auto;">
		
			<div class="crayon-toolbar" data-settings=" mouseover overlay hide delay" style="font-size: 12px !important; height: 18px !important; line-height: 18px !important; margin-top: -19px; display: none; position: absolute; z-index: 2;"><span class="crayon-title"></span>
			<div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><div class="crayon-button crayon-nums-button crayon-pressed" title="Toggle Line Numbers"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-expand-button" title="Expand Code" style="display: none;"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div></div></div>
			<div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important;"></div>
			<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly="" style="tab-size: 4; font-size: 12px !important; line-height: 15px !important; z-index: 0; opacity: 0; overflow: hidden;"># convert from unsigned ints to floats
X = X.astype('float32')
# scale from [0,255] to [0,1]
X = X / 255.0</textarea></div>
			<div class="crayon-main" style="position: relative; z-index: 1; overflow: hidden;">
				<table class="crayon-table" style="">
					<tbody><tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-5e19f52d36964391155691-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36964391155691-2">2</div><div class="crayon-num" data-line="crayon-5e19f52d36964391155691-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36964391155691-4">4</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-5e19f52d36964391155691-1"><span class="crayon-p"># convert from unsigned ints to floats</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36964391155691-2"><span class="crayon-v">X</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">X</span><span class="crayon-sy">.</span><span class="crayon-e">astype</span><span class="crayon-sy">(</span><span class="crayon-s">'float32'</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36964391155691-3"><span class="crayon-p"># scale from [0,255] to [0,1]</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36964391155691-4"><span class="crayon-v">X</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">X</span><span class="crayon-h"> </span><span class="crayon-o">/</span><span class="crayon-h"> </span><span class="crayon-cn">255.0</span></div></div></td>
					</tr>
				</tbody></table>
			</div>
		</div>
<!-- [Format Time: 0.0001 seconds] -->
<p>The <em>load_real_samples()</em> function below implements this.</p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div id="crayon-5e19f52d36965531174407" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover" style="margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important; height: auto;">
		
			<div class="crayon-toolbar" data-settings=" mouseover overlay hide delay" style="font-size: 12px !important; height: 18px !important; line-height: 18px !important; margin-top: -19px; display: none; position: absolute; z-index: 2;"><span class="crayon-title"></span>
			<div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><div class="crayon-button crayon-nums-button crayon-pressed" title="Toggle Line Numbers"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-expand-button" title="Expand Code" style="display: none;"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div></div></div>
			<div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important;"></div>
			<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly="" style="tab-size: 4; font-size: 12px !important; line-height: 15px !important; z-index: 0; opacity: 0; overflow: hidden;"># load and prepare mnist training images
def load_real_samples():
	# load mnist dataset
	(trainX, _), (_, _) = load_data()
	# expand to 3d, e.g. add channels dimension
	X = expand_dims(trainX, axis=-1)
	# convert from unsigned ints to floats
	X = X.astype('float32')
	# scale from [0,255] to [0,1]
	X = X / 255.0
	return X</textarea></div>
			<div class="crayon-main" style="position: relative; z-index: 1; overflow: hidden;">
				<table class="crayon-table" style="">
					<tbody><tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-5e19f52d36965531174407-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36965531174407-2">2</div><div class="crayon-num" data-line="crayon-5e19f52d36965531174407-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36965531174407-4">4</div><div class="crayon-num" data-line="crayon-5e19f52d36965531174407-5">5</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36965531174407-6">6</div><div class="crayon-num" data-line="crayon-5e19f52d36965531174407-7">7</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36965531174407-8">8</div><div class="crayon-num" data-line="crayon-5e19f52d36965531174407-9">9</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36965531174407-10">10</div><div class="crayon-num" data-line="crayon-5e19f52d36965531174407-11">11</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-5e19f52d36965531174407-1"><span class="crayon-p"># load and prepare mnist training images</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36965531174407-2"><span class="crayon-e">def </span><span class="crayon-e">load_real_samples</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span><span class="crayon-o">:</span></div><div class="crayon-line" id="crayon-5e19f52d36965531174407-3"><span class="crayon-h">	</span><span class="crayon-p"># load mnist dataset</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36965531174407-4"><span class="crayon-h">	</span><span class="crayon-sy">(</span><span class="crayon-v">trainX</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">_</span><span class="crayon-sy">)</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-v">_</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">_</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">load_data</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36965531174407-5"><span class="crayon-h">	</span><span class="crayon-p"># expand to 3d, e.g. add channels dimension</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36965531174407-6"><span class="crayon-h">	</span><span class="crayon-v">X</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">expand_dims</span><span class="crayon-sy">(</span><span class="crayon-v">trainX</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">axis</span><span class="crayon-o">=</span><span class="crayon-o">-</span><span class="crayon-cn">1</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36965531174407-7"><span class="crayon-h">	</span><span class="crayon-p"># convert from unsigned ints to floats</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36965531174407-8"><span class="crayon-h">	</span><span class="crayon-v">X</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">X</span><span class="crayon-sy">.</span><span class="crayon-e">astype</span><span class="crayon-sy">(</span><span class="crayon-s">'float32'</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36965531174407-9"><span class="crayon-h">	</span><span class="crayon-p"># scale from [0,255] to [0,1]</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36965531174407-10"><span class="crayon-h">	</span><span class="crayon-v">X</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">X</span><span class="crayon-h"> </span><span class="crayon-o">/</span><span class="crayon-h"> </span><span class="crayon-cn">255.0</span></div><div class="crayon-line" id="crayon-5e19f52d36965531174407-11"><span class="crayon-h">	</span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-v">X</span></div></div></td>
					</tr>
				</tbody></table>
			</div>
		</div>
<!-- [Format Time: 0.0003 seconds] -->
<p>The model will be updated in batches, specifically with a collection of real samples and a collection of generated samples. On training, epoch is defined as one pass through the entire training dataset.</p>
<p>We could systematically enumerate all samples in the training dataset, and that is a good approach, but good training via stochastic gradient descent requires that the training dataset be shuffled prior to each epoch. A simpler approach is to select random samples of images from the training dataset.</p>
<p>The <em>generate_real_samples()</em> function below will take the training dataset as an argument and will select a random subsample of images; it will also return class labels for the sample, specifically a class label of 1, to indicate real images.</p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div id="crayon-5e19f52d36966253968346" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover" style="margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important; height: auto;">
		
			<div class="crayon-toolbar" data-settings=" mouseover overlay hide delay" style="font-size: 12px !important; height: 18px !important; line-height: 18px !important; margin-top: -19px; display: none; position: absolute; z-index: 2;"><span class="crayon-title"></span>
			<div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><div class="crayon-button crayon-nums-button crayon-pressed" title="Toggle Line Numbers"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-expand-button" title="Expand Code" style="display: none;"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div></div></div>
			<div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important;"></div>
			<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly="" style="tab-size: 4; font-size: 12px !important; line-height: 15px !important; z-index: 0; opacity: 0; overflow: hidden;"># select real samples
def generate_real_samples(dataset, n_samples):
	# choose random instances
	ix = randint(0, dataset.shape[0], n_samples)
	# retrieve selected images
	X = dataset[ix]
	# generate 'real' class labels (1)
	y = ones((n_samples, 1))
	return X, y</textarea></div>
			<div class="crayon-main" style="position: relative; z-index: 1; overflow: hidden;">
				<table class="crayon-table" style="">
					<tbody><tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-5e19f52d36966253968346-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36966253968346-2">2</div><div class="crayon-num" data-line="crayon-5e19f52d36966253968346-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36966253968346-4">4</div><div class="crayon-num" data-line="crayon-5e19f52d36966253968346-5">5</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36966253968346-6">6</div><div class="crayon-num" data-line="crayon-5e19f52d36966253968346-7">7</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36966253968346-8">8</div><div class="crayon-num" data-line="crayon-5e19f52d36966253968346-9">9</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-5e19f52d36966253968346-1"><span class="crayon-p"># select real samples</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36966253968346-2"><span class="crayon-e">def </span><span class="crayon-e">generate_real_samples</span><span class="crayon-sy">(</span><span class="crayon-v">dataset</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">n_samples</span><span class="crayon-sy">)</span><span class="crayon-o">:</span></div><div class="crayon-line" id="crayon-5e19f52d36966253968346-3"><span class="crayon-h">	</span><span class="crayon-p"># choose random instances</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36966253968346-4"><span class="crayon-h">	</span><span class="crayon-v">ix</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">randint</span><span class="crayon-sy">(</span><span class="crayon-cn">0</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">dataset</span><span class="crayon-sy">.</span><span class="crayon-v">shape</span><span class="crayon-sy">[</span><span class="crayon-cn">0</span><span class="crayon-sy">]</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">n_samples</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36966253968346-5"><span class="crayon-h">	</span><span class="crayon-p"># retrieve selected images</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36966253968346-6"><span class="crayon-h">	</span><span class="crayon-v">X</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">dataset</span><span class="crayon-sy">[</span><span class="crayon-v">ix</span><span class="crayon-sy">]</span></div><div class="crayon-line" id="crayon-5e19f52d36966253968346-7"><span class="crayon-h">	</span><span class="crayon-p"># generate 'real' class labels (1)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36966253968346-8"><span class="crayon-h">	</span><span class="crayon-v">y</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">ones</span><span class="crayon-sy">(</span><span class="crayon-sy">(</span><span class="crayon-v">n_samples</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">1</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36966253968346-9"><span class="crayon-h">	</span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-v">X</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">y</span></div></div></td>
					</tr>
				</tbody></table>
			</div>
		</div>
<!-- [Format Time: 0.0003 seconds] -->
<p>Now, we need a source of fake images.</p>
<p>We don’t have a generator model yet, so instead, we can generate images comprised of random pixel values, specifically <a href="https://machinelearningmastery.com/how-to-generate-random-numbers-in-python/">random pixel values</a> in the range [0,1] like our scaled real images.</p>
<p>The <em>generate_fake_samples()</em> function below implements this behavior and generates images of random pixel values and their associated class label of 0, for fake.</p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div id="crayon-5e19f52d36967779852318" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover" style="margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important; height: auto;">
		
			<div class="crayon-toolbar" data-settings=" mouseover overlay hide delay" style="font-size: 12px !important; height: 18px !important; line-height: 18px !important; margin-top: -19px; display: none; position: absolute; z-index: 2;"><span class="crayon-title"></span>
			<div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><div class="crayon-button crayon-nums-button crayon-pressed" title="Toggle Line Numbers"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-expand-button" title="Expand Code" style="display: none;"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div></div></div>
			<div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important;"></div>
			<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly="" style="tab-size: 4; font-size: 12px !important; line-height: 15px !important; z-index: 0; opacity: 0; overflow: hidden;"># generate n fake samples with class labels
def generate_fake_samples(n_samples):
	# generate uniform random numbers in [0,1]
	X = rand(28 * 28 * n_samples)
	# reshape into a batch of grayscale images
	X = X.reshape((n_samples, 28, 28, 1))
	# generate 'fake' class labels (0)
	y = zeros((n_samples, 1))
	return X, y</textarea></div>
			<div class="crayon-main" style="position: relative; z-index: 1; overflow: hidden;">
				<table class="crayon-table" style="">
					<tbody><tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-5e19f52d36967779852318-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36967779852318-2">2</div><div class="crayon-num" data-line="crayon-5e19f52d36967779852318-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36967779852318-4">4</div><div class="crayon-num" data-line="crayon-5e19f52d36967779852318-5">5</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36967779852318-6">6</div><div class="crayon-num" data-line="crayon-5e19f52d36967779852318-7">7</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36967779852318-8">8</div><div class="crayon-num" data-line="crayon-5e19f52d36967779852318-9">9</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-5e19f52d36967779852318-1"><span class="crayon-p"># generate n fake samples with class labels</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36967779852318-2"><span class="crayon-e">def </span><span class="crayon-e">generate_fake_samples</span><span class="crayon-sy">(</span><span class="crayon-v">n_samples</span><span class="crayon-sy">)</span><span class="crayon-o">:</span></div><div class="crayon-line" id="crayon-5e19f52d36967779852318-3"><span class="crayon-h">	</span><span class="crayon-p"># generate uniform random numbers in [0,1]</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36967779852318-4"><span class="crayon-h">	</span><span class="crayon-v">X</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">rand</span><span class="crayon-sy">(</span><span class="crayon-cn">28</span><span class="crayon-h"> </span><span class="crayon-o">*</span><span class="crayon-h"> </span><span class="crayon-cn">28</span><span class="crayon-h"> </span><span class="crayon-o">*</span><span class="crayon-h"> </span><span class="crayon-v">n_samples</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36967779852318-5"><span class="crayon-h">	</span><span class="crayon-p"># reshape into a batch of grayscale images</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36967779852318-6"><span class="crayon-h">	</span><span class="crayon-v">X</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">X</span><span class="crayon-sy">.</span><span class="crayon-e">reshape</span><span class="crayon-sy">(</span><span class="crayon-sy">(</span><span class="crayon-v">n_samples</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">28</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">28</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">1</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36967779852318-7"><span class="crayon-h">	</span><span class="crayon-p"># generate 'fake' class labels (0)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36967779852318-8"><span class="crayon-h">	</span><span class="crayon-v">y</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">zeros</span><span class="crayon-sy">(</span><span class="crayon-sy">(</span><span class="crayon-v">n_samples</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">1</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36967779852318-9"><span class="crayon-h">	</span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-v">X</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">y</span></div></div></td>
					</tr>
				</tbody></table>
			</div>
		</div>
<!-- [Format Time: 0.0003 seconds] -->
<p>Finally, we need to train the discriminator model.</p>
<p>This involves repeatedly retrieving samples of real images and samples of generated images and updating the model for a fixed number of iterations.</p>
<p>We will ignore the idea of epochs for now (e.g. complete passes through the training dataset) and fit the discriminator model for a fixed number of batches. The model will learn to discriminate between real and fake (randomly generated) images rapidly, therefore, not many batches will be required before it learns to discriminate perfectly.</p>
<p>The <em>train_discriminator()</em> function implements this, using a batch size of 256 images where 128 are real and 128 are fake each iteration.</p>
<p>We update the discriminator separately for real and fake examples so that we can calculate the accuracy of the model on each sample prior to the update. This gives insight into how the discriminator model is performing over time.</p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div id="crayon-5e19f52d36968536775810" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover" style="margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important; height: auto;">
		
			<div class="crayon-toolbar" data-settings=" mouseover overlay hide delay" style="font-size: 12px !important; height: 18px !important; line-height: 18px !important; margin-top: -19px; display: none; position: absolute; z-index: 2;"><span class="crayon-title"></span>
			<div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><div class="crayon-button crayon-nums-button crayon-pressed" title="Toggle Line Numbers"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-expand-button" title="Expand Code" style="display: none;"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div></div></div>
			<div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important;"></div>
			<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly="" style="tab-size: 4; font-size: 12px !important; line-height: 15px !important; z-index: 0; opacity: 0; overflow: hidden;"># train the discriminator model
def train_discriminator(model, dataset, n_iter=100, n_batch=256):
	half_batch = int(n_batch / 2)
	# manually enumerate epochs
	for i in range(n_iter):
		# get randomly selected 'real' samples
		X_real, y_real = generate_real_samples(dataset, half_batch)
		# update discriminator on real samples
		_, real_acc = model.train_on_batch(X_real, y_real)
		# generate 'fake' examples
		X_fake, y_fake = generate_fake_samples(half_batch)
		# update discriminator on fake samples
		_, fake_acc = model.train_on_batch(X_fake, y_fake)
		# summarize performance
		print('&gt;%d real=%.0f%% fake=%.0f%%' % (i+1, real_acc*100, fake_acc*100))</textarea></div>
			<div class="crayon-main" style="position: relative; z-index: 1; overflow: hidden;">
				<table class="crayon-table" style="">
					<tbody><tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-5e19f52d36968536775810-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36968536775810-2">2</div><div class="crayon-num" data-line="crayon-5e19f52d36968536775810-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36968536775810-4">4</div><div class="crayon-num" data-line="crayon-5e19f52d36968536775810-5">5</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36968536775810-6">6</div><div class="crayon-num" data-line="crayon-5e19f52d36968536775810-7">7</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36968536775810-8">8</div><div class="crayon-num" data-line="crayon-5e19f52d36968536775810-9">9</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36968536775810-10">10</div><div class="crayon-num" data-line="crayon-5e19f52d36968536775810-11">11</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36968536775810-12">12</div><div class="crayon-num" data-line="crayon-5e19f52d36968536775810-13">13</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36968536775810-14">14</div><div class="crayon-num" data-line="crayon-5e19f52d36968536775810-15">15</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-5e19f52d36968536775810-1"><span class="crayon-p"># train the discriminator model</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36968536775810-2"><span class="crayon-e">def </span><span class="crayon-e">train_discriminator</span><span class="crayon-sy">(</span><span class="crayon-v">model</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">dataset</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">n_iter</span><span class="crayon-o">=</span><span class="crayon-cn">100</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">n_batch</span><span class="crayon-o">=</span><span class="crayon-cn">256</span><span class="crayon-sy">)</span><span class="crayon-o">:</span></div><div class="crayon-line" id="crayon-5e19f52d36968536775810-3"><span class="crayon-h">	</span><span class="crayon-v">half_batch</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-t">int</span><span class="crayon-sy">(</span><span class="crayon-v">n_batch</span><span class="crayon-h"> </span><span class="crayon-o">/</span><span class="crayon-h"> </span><span class="crayon-cn">2</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36968536775810-4"><span class="crayon-h">	</span><span class="crayon-p"># manually enumerate epochs</span></div><div class="crayon-line" id="crayon-5e19f52d36968536775810-5"><span class="crayon-h">	</span><span class="crayon-st">for</span><span class="crayon-h"> </span><span class="crayon-i">i</span><span class="crayon-h"> </span><span class="crayon-st">in</span><span class="crayon-h"> </span><span class="crayon-e">range</span><span class="crayon-sy">(</span><span class="crayon-v">n_iter</span><span class="crayon-sy">)</span><span class="crayon-o">:</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36968536775810-6"><span class="crayon-h">		</span><span class="crayon-p"># get randomly selected 'real' samples</span></div><div class="crayon-line" id="crayon-5e19f52d36968536775810-7"><span class="crayon-h">		</span><span class="crayon-v">X_real</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">y_real</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">generate_real_samples</span><span class="crayon-sy">(</span><span class="crayon-v">dataset</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">half_batch</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36968536775810-8"><span class="crayon-h">		</span><span class="crayon-p"># update discriminator on real samples</span></div><div class="crayon-line" id="crayon-5e19f52d36968536775810-9"><span class="crayon-h">		</span><span class="crayon-v">_</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">real_acc</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">train_on_batch</span><span class="crayon-sy">(</span><span class="crayon-v">X_real</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">y_real</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36968536775810-10"><span class="crayon-h">		</span><span class="crayon-p"># generate 'fake' examples</span></div><div class="crayon-line" id="crayon-5e19f52d36968536775810-11"><span class="crayon-h">		</span><span class="crayon-v">X_fake</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">y_fake</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">generate_fake_samples</span><span class="crayon-sy">(</span><span class="crayon-v">half_batch</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36968536775810-12"><span class="crayon-h">		</span><span class="crayon-p"># update discriminator on fake samples</span></div><div class="crayon-line" id="crayon-5e19f52d36968536775810-13"><span class="crayon-h">		</span><span class="crayon-v">_</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">fake_acc</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">train_on_batch</span><span class="crayon-sy">(</span><span class="crayon-v">X_fake</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">y_fake</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36968536775810-14"><span class="crayon-h">		</span><span class="crayon-p"># summarize performance</span></div><div class="crayon-line" id="crayon-5e19f52d36968536775810-15"><span class="crayon-h">		</span><span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-s">'&gt;%d real=%.0f%% fake=%.0f%%'</span><span class="crayon-h"> </span><span class="crayon-o">%</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-v">i</span><span class="crayon-o">+</span><span class="crayon-cn">1</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-e ">real_acc*</span><span class="crayon-cn">100</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-e ">fake_acc*</span><span class="crayon-cn">100</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div></div></td>
					</tr>
				</tbody></table>
			</div>
		</div>
<!-- [Format Time: 0.0006 seconds] -->
<p>Tying all of this together, the complete example of training an instance of the discriminator model on real and randomly generated (fake) images is listed below.</p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div id="crayon-5e19f52d36969960093665" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover" style="margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important; height: auto;">
		
			<div class="crayon-toolbar" data-settings=" mouseover overlay hide delay" style="font-size: 12px !important; height: 18px !important; line-height: 18px !important; margin-top: -19px; display: none; position: absolute; z-index: 2;"><span class="crayon-title"></span>
			<div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><div class="crayon-button crayon-nums-button crayon-pressed" title="Toggle Line Numbers"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div></div></div>
			<div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important;"></div>
			<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly="" style="tab-size: 4; font-size: 12px !important; line-height: 15px !important; z-index: 0; opacity: 0; overflow: hidden;"># example of training the discriminator model on real and random mnist images
from numpy import expand_dims
from numpy import ones
from numpy import zeros
from numpy.random import rand
from numpy.random import randint
from keras.datasets.mnist import load_data
from keras.optimizers import Adam
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import Conv2D
from keras.layers import Flatten
from keras.layers import Dropout
from keras.layers import LeakyReLU

# define the standalone discriminator model
def define_discriminator(in_shape=(28,28,1)):
	model = Sequential()
	model.add(Conv2D(64, (3,3), strides=(2, 2), padding='same', input_shape=in_shape))
	model.add(LeakyReLU(alpha=0.2))
	model.add(Dropout(0.4))
	model.add(Conv2D(64, (3,3), strides=(2, 2), padding='same'))
	model.add(LeakyReLU(alpha=0.2))
	model.add(Dropout(0.4))
	model.add(Flatten())
	model.add(Dense(1, activation='sigmoid'))
	# compile model
	opt = Adam(lr=0.0002, beta_1=0.5)
	model.compile(loss='binary_crossentropy', optimizer=opt, metrics=['accuracy'])
	return model

# load and prepare mnist training images
def load_real_samples():
	# load mnist dataset
	(trainX, _), (_, _) = load_data()
	# expand to 3d, e.g. add channels dimension
	X = expand_dims(trainX, axis=-1)
	# convert from unsigned ints to floats
	X = X.astype('float32')
	# scale from [0,255] to [0,1]
	X = X / 255.0
	return X

# select real samples
def generate_real_samples(dataset, n_samples):
	# choose random instances
	ix = randint(0, dataset.shape[0], n_samples)
	# retrieve selected images
	X = dataset[ix]
	# generate 'real' class labels (1)
	y = ones((n_samples, 1))
	return X, y

# generate n fake samples with class labels
def generate_fake_samples(n_samples):
	# generate uniform random numbers in [0,1]
	X = rand(28 * 28 * n_samples)
	# reshape into a batch of grayscale images
	X = X.reshape((n_samples, 28, 28, 1))
	# generate 'fake' class labels (0)
	y = zeros((n_samples, 1))
	return X, y

# train the discriminator model
def train_discriminator(model, dataset, n_iter=100, n_batch=256):
	half_batch = int(n_batch / 2)
	# manually enumerate epochs
	for i in range(n_iter):
		# get randomly selected 'real' samples
		X_real, y_real = generate_real_samples(dataset, half_batch)
		# update discriminator on real samples
		_, real_acc = model.train_on_batch(X_real, y_real)
		# generate 'fake' examples
		X_fake, y_fake = generate_fake_samples(half_batch)
		# update discriminator on fake samples
		_, fake_acc = model.train_on_batch(X_fake, y_fake)
		# summarize performance
		print('&gt;%d real=%.0f%% fake=%.0f%%' % (i+1, real_acc*100, fake_acc*100))

# define the discriminator model
model = define_discriminator()
# load image data
dataset = load_real_samples()
# fit the model
train_discriminator(model, dataset)</textarea></div>
			<div class="crayon-main" style="position: relative; z-index: 1; overflow: hidden;">
				<table class="crayon-table" style="">
					<tbody><tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-5e19f52d36969960093665-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36969960093665-2">2</div><div class="crayon-num" data-line="crayon-5e19f52d36969960093665-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36969960093665-4">4</div><div class="crayon-num" data-line="crayon-5e19f52d36969960093665-5">5</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36969960093665-6">6</div><div class="crayon-num" data-line="crayon-5e19f52d36969960093665-7">7</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36969960093665-8">8</div><div class="crayon-num" data-line="crayon-5e19f52d36969960093665-9">9</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36969960093665-10">10</div><div class="crayon-num" data-line="crayon-5e19f52d36969960093665-11">11</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36969960093665-12">12</div><div class="crayon-num" data-line="crayon-5e19f52d36969960093665-13">13</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36969960093665-14">14</div><div class="crayon-num" data-line="crayon-5e19f52d36969960093665-15">15</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36969960093665-16">16</div><div class="crayon-num" data-line="crayon-5e19f52d36969960093665-17">17</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36969960093665-18">18</div><div class="crayon-num" data-line="crayon-5e19f52d36969960093665-19">19</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36969960093665-20">20</div><div class="crayon-num" data-line="crayon-5e19f52d36969960093665-21">21</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36969960093665-22">22</div><div class="crayon-num" data-line="crayon-5e19f52d36969960093665-23">23</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36969960093665-24">24</div><div class="crayon-num" data-line="crayon-5e19f52d36969960093665-25">25</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36969960093665-26">26</div><div class="crayon-num" data-line="crayon-5e19f52d36969960093665-27">27</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36969960093665-28">28</div><div class="crayon-num" data-line="crayon-5e19f52d36969960093665-29">29</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36969960093665-30">30</div><div class="crayon-num" data-line="crayon-5e19f52d36969960093665-31">31</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36969960093665-32">32</div><div class="crayon-num" data-line="crayon-5e19f52d36969960093665-33">33</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36969960093665-34">34</div><div class="crayon-num" data-line="crayon-5e19f52d36969960093665-35">35</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36969960093665-36">36</div><div class="crayon-num" data-line="crayon-5e19f52d36969960093665-37">37</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36969960093665-38">38</div><div class="crayon-num" data-line="crayon-5e19f52d36969960093665-39">39</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36969960093665-40">40</div><div class="crayon-num" data-line="crayon-5e19f52d36969960093665-41">41</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36969960093665-42">42</div><div class="crayon-num" data-line="crayon-5e19f52d36969960093665-43">43</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36969960093665-44">44</div><div class="crayon-num" data-line="crayon-5e19f52d36969960093665-45">45</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36969960093665-46">46</div><div class="crayon-num" data-line="crayon-5e19f52d36969960093665-47">47</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36969960093665-48">48</div><div class="crayon-num" data-line="crayon-5e19f52d36969960093665-49">49</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36969960093665-50">50</div><div class="crayon-num" data-line="crayon-5e19f52d36969960093665-51">51</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36969960093665-52">52</div><div class="crayon-num" data-line="crayon-5e19f52d36969960093665-53">53</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36969960093665-54">54</div><div class="crayon-num" data-line="crayon-5e19f52d36969960093665-55">55</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36969960093665-56">56</div><div class="crayon-num" data-line="crayon-5e19f52d36969960093665-57">57</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36969960093665-58">58</div><div class="crayon-num" data-line="crayon-5e19f52d36969960093665-59">59</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36969960093665-60">60</div><div class="crayon-num" data-line="crayon-5e19f52d36969960093665-61">61</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36969960093665-62">62</div><div class="crayon-num" data-line="crayon-5e19f52d36969960093665-63">63</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36969960093665-64">64</div><div class="crayon-num" data-line="crayon-5e19f52d36969960093665-65">65</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36969960093665-66">66</div><div class="crayon-num" data-line="crayon-5e19f52d36969960093665-67">67</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36969960093665-68">68</div><div class="crayon-num" data-line="crayon-5e19f52d36969960093665-69">69</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36969960093665-70">70</div><div class="crayon-num" data-line="crayon-5e19f52d36969960093665-71">71</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36969960093665-72">72</div><div class="crayon-num" data-line="crayon-5e19f52d36969960093665-73">73</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36969960093665-74">74</div><div class="crayon-num" data-line="crayon-5e19f52d36969960093665-75">75</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36969960093665-76">76</div><div class="crayon-num" data-line="crayon-5e19f52d36969960093665-77">77</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36969960093665-78">78</div><div class="crayon-num" data-line="crayon-5e19f52d36969960093665-79">79</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36969960093665-80">80</div><div class="crayon-num" data-line="crayon-5e19f52d36969960093665-81">81</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36969960093665-82">82</div><div class="crayon-num" data-line="crayon-5e19f52d36969960093665-83">83</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36969960093665-84">84</div><div class="crayon-num" data-line="crayon-5e19f52d36969960093665-85">85</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-5e19f52d36969960093665-1"><span class="crayon-p"># example of training the discriminator model on real and random mnist images</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36969960093665-2"><span class="crayon-e">from </span><span class="crayon-e">numpy </span><span class="crayon-e">import </span><span class="crayon-e">expand_dims</span></div><div class="crayon-line" id="crayon-5e19f52d36969960093665-3"><span class="crayon-e">from </span><span class="crayon-e">numpy </span><span class="crayon-e">import </span><span class="crayon-e">ones</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36969960093665-4"><span class="crayon-e">from </span><span class="crayon-e">numpy </span><span class="crayon-e">import </span><span class="crayon-e">zeros</span></div><div class="crayon-line" id="crayon-5e19f52d36969960093665-5"><span class="crayon-e">from </span><span class="crayon-v">numpy</span><span class="crayon-sy">.</span><span class="crayon-e">random </span><span class="crayon-e">import </span><span class="crayon-e">rand</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36969960093665-6"><span class="crayon-e">from </span><span class="crayon-v">numpy</span><span class="crayon-sy">.</span><span class="crayon-e">random </span><span class="crayon-e">import </span><span class="crayon-e">randint</span></div><div class="crayon-line" id="crayon-5e19f52d36969960093665-7"><span class="crayon-e">from </span><span class="crayon-v">keras</span><span class="crayon-sy">.</span><span class="crayon-v">datasets</span><span class="crayon-sy">.</span><span class="crayon-e">mnist </span><span class="crayon-e">import </span><span class="crayon-e">load_data</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36969960093665-8"><span class="crayon-e">from </span><span class="crayon-v">keras</span><span class="crayon-sy">.</span><span class="crayon-e">optimizers </span><span class="crayon-e">import </span><span class="crayon-e">Adam</span></div><div class="crayon-line" id="crayon-5e19f52d36969960093665-9"><span class="crayon-e">from </span><span class="crayon-v">keras</span><span class="crayon-sy">.</span><span class="crayon-e">models </span><span class="crayon-e">import </span><span class="crayon-e">Sequential</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36969960093665-10"><span class="crayon-e">from </span><span class="crayon-v">keras</span><span class="crayon-sy">.</span><span class="crayon-e">layers </span><span class="crayon-e">import </span><span class="crayon-e">Dense</span></div><div class="crayon-line" id="crayon-5e19f52d36969960093665-11"><span class="crayon-e">from </span><span class="crayon-v">keras</span><span class="crayon-sy">.</span><span class="crayon-e">layers </span><span class="crayon-e">import </span><span class="crayon-e">Conv2D</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36969960093665-12"><span class="crayon-e">from </span><span class="crayon-v">keras</span><span class="crayon-sy">.</span><span class="crayon-e">layers </span><span class="crayon-e">import </span><span class="crayon-e">Flatten</span></div><div class="crayon-line" id="crayon-5e19f52d36969960093665-13"><span class="crayon-e">from </span><span class="crayon-v">keras</span><span class="crayon-sy">.</span><span class="crayon-e">layers </span><span class="crayon-e">import </span><span class="crayon-e">Dropout</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36969960093665-14"><span class="crayon-e">from </span><span class="crayon-v">keras</span><span class="crayon-sy">.</span><span class="crayon-e">layers </span><span class="crayon-e">import </span><span class="crayon-v">LeakyReLU</span></div><div class="crayon-line" id="crayon-5e19f52d36969960093665-15">&nbsp;</div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36969960093665-16"><span class="crayon-p"># define the standalone discriminator model</span></div><div class="crayon-line" id="crayon-5e19f52d36969960093665-17"><span class="crayon-e">def </span><span class="crayon-e">define_discriminator</span><span class="crayon-sy">(</span><span class="crayon-v">in_shape</span><span class="crayon-o">=</span><span class="crayon-sy">(</span><span class="crayon-cn">28</span><span class="crayon-sy">,</span><span class="crayon-cn">28</span><span class="crayon-sy">,</span><span class="crayon-cn">1</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span><span class="crayon-o">:</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36969960093665-18"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">Sequential</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36969960093665-19"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">Conv2D</span><span class="crayon-sy">(</span><span class="crayon-cn">64</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-cn">3</span><span class="crayon-sy">,</span><span class="crayon-cn">3</span><span class="crayon-sy">)</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">strides</span><span class="crayon-o">=</span><span class="crayon-sy">(</span><span class="crayon-cn">2</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">2</span><span class="crayon-sy">)</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">padding</span><span class="crayon-o">=</span><span class="crayon-s">'same'</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">input_shape</span><span class="crayon-o">=</span><span class="crayon-v">in_shape</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36969960093665-20"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">LeakyReLU</span><span class="crayon-sy">(</span><span class="crayon-v">alpha</span><span class="crayon-o">=</span><span class="crayon-cn">0.2</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36969960093665-21"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">Dropout</span><span class="crayon-sy">(</span><span class="crayon-cn">0.4</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36969960093665-22"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">Conv2D</span><span class="crayon-sy">(</span><span class="crayon-cn">64</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-cn">3</span><span class="crayon-sy">,</span><span class="crayon-cn">3</span><span class="crayon-sy">)</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">strides</span><span class="crayon-o">=</span><span class="crayon-sy">(</span><span class="crayon-cn">2</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">2</span><span class="crayon-sy">)</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">padding</span><span class="crayon-o">=</span><span class="crayon-s">'same'</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36969960093665-23"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">LeakyReLU</span><span class="crayon-sy">(</span><span class="crayon-v">alpha</span><span class="crayon-o">=</span><span class="crayon-cn">0.2</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36969960093665-24"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">Dropout</span><span class="crayon-sy">(</span><span class="crayon-cn">0.4</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36969960093665-25"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">Flatten</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36969960093665-26"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">Dense</span><span class="crayon-sy">(</span><span class="crayon-cn">1</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">activation</span><span class="crayon-o">=</span><span class="crayon-s">'sigmoid'</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36969960093665-27"><span class="crayon-h">	</span><span class="crayon-p"># compile model</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36969960093665-28"><span class="crayon-h">	</span><span class="crayon-v">opt</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">Adam</span><span class="crayon-sy">(</span><span class="crayon-v">lr</span><span class="crayon-o">=</span><span class="crayon-cn">0.0002</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">beta_1</span><span class="crayon-o">=</span><span class="crayon-cn">0.5</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36969960093665-29"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">compile</span><span class="crayon-sy">(</span><span class="crayon-v">loss</span><span class="crayon-o">=</span><span class="crayon-s">'binary_crossentropy'</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">optimizer</span><span class="crayon-o">=</span><span class="crayon-v">opt</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">metrics</span><span class="crayon-o">=</span><span class="crayon-sy">[</span><span class="crayon-s">'accuracy'</span><span class="crayon-sy">]</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36969960093665-30"><span class="crayon-h">	</span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-v">model</span></div><div class="crayon-line" id="crayon-5e19f52d36969960093665-31">&nbsp;</div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36969960093665-32"><span class="crayon-p"># load and prepare mnist training images</span></div><div class="crayon-line" id="crayon-5e19f52d36969960093665-33"><span class="crayon-e">def </span><span class="crayon-e">load_real_samples</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span><span class="crayon-o">:</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36969960093665-34"><span class="crayon-h">	</span><span class="crayon-p"># load mnist dataset</span></div><div class="crayon-line" id="crayon-5e19f52d36969960093665-35"><span class="crayon-h">	</span><span class="crayon-sy">(</span><span class="crayon-v">trainX</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">_</span><span class="crayon-sy">)</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-v">_</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">_</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">load_data</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36969960093665-36"><span class="crayon-h">	</span><span class="crayon-p"># expand to 3d, e.g. add channels dimension</span></div><div class="crayon-line" id="crayon-5e19f52d36969960093665-37"><span class="crayon-h">	</span><span class="crayon-v">X</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">expand_dims</span><span class="crayon-sy">(</span><span class="crayon-v">trainX</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">axis</span><span class="crayon-o">=</span><span class="crayon-o">-</span><span class="crayon-cn">1</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36969960093665-38"><span class="crayon-h">	</span><span class="crayon-p"># convert from unsigned ints to floats</span></div><div class="crayon-line" id="crayon-5e19f52d36969960093665-39"><span class="crayon-h">	</span><span class="crayon-v">X</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">X</span><span class="crayon-sy">.</span><span class="crayon-e">astype</span><span class="crayon-sy">(</span><span class="crayon-s">'float32'</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36969960093665-40"><span class="crayon-h">	</span><span class="crayon-p"># scale from [0,255] to [0,1]</span></div><div class="crayon-line" id="crayon-5e19f52d36969960093665-41"><span class="crayon-h">	</span><span class="crayon-v">X</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">X</span><span class="crayon-h"> </span><span class="crayon-o">/</span><span class="crayon-h"> </span><span class="crayon-cn">255.0</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36969960093665-42"><span class="crayon-h">	</span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-v">X</span></div><div class="crayon-line" id="crayon-5e19f52d36969960093665-43">&nbsp;</div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36969960093665-44"><span class="crayon-p"># select real samples</span></div><div class="crayon-line" id="crayon-5e19f52d36969960093665-45"><span class="crayon-e">def </span><span class="crayon-e">generate_real_samples</span><span class="crayon-sy">(</span><span class="crayon-v">dataset</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">n_samples</span><span class="crayon-sy">)</span><span class="crayon-o">:</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36969960093665-46"><span class="crayon-h">	</span><span class="crayon-p"># choose random instances</span></div><div class="crayon-line" id="crayon-5e19f52d36969960093665-47"><span class="crayon-h">	</span><span class="crayon-v">ix</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">randint</span><span class="crayon-sy">(</span><span class="crayon-cn">0</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">dataset</span><span class="crayon-sy">.</span><span class="crayon-v">shape</span><span class="crayon-sy">[</span><span class="crayon-cn">0</span><span class="crayon-sy">]</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">n_samples</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36969960093665-48"><span class="crayon-h">	</span><span class="crayon-p"># retrieve selected images</span></div><div class="crayon-line" id="crayon-5e19f52d36969960093665-49"><span class="crayon-h">	</span><span class="crayon-v">X</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">dataset</span><span class="crayon-sy">[</span><span class="crayon-v">ix</span><span class="crayon-sy">]</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36969960093665-50"><span class="crayon-h">	</span><span class="crayon-p"># generate 'real' class labels (1)</span></div><div class="crayon-line" id="crayon-5e19f52d36969960093665-51"><span class="crayon-h">	</span><span class="crayon-v">y</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">ones</span><span class="crayon-sy">(</span><span class="crayon-sy">(</span><span class="crayon-v">n_samples</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">1</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36969960093665-52"><span class="crayon-h">	</span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-v">X</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">y</span></div><div class="crayon-line" id="crayon-5e19f52d36969960093665-53">&nbsp;</div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36969960093665-54"><span class="crayon-p"># generate n fake samples with class labels</span></div><div class="crayon-line" id="crayon-5e19f52d36969960093665-55"><span class="crayon-e">def </span><span class="crayon-e">generate_fake_samples</span><span class="crayon-sy">(</span><span class="crayon-v">n_samples</span><span class="crayon-sy">)</span><span class="crayon-o">:</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36969960093665-56"><span class="crayon-h">	</span><span class="crayon-p"># generate uniform random numbers in [0,1]</span></div><div class="crayon-line" id="crayon-5e19f52d36969960093665-57"><span class="crayon-h">	</span><span class="crayon-v">X</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">rand</span><span class="crayon-sy">(</span><span class="crayon-cn">28</span><span class="crayon-h"> </span><span class="crayon-o">*</span><span class="crayon-h"> </span><span class="crayon-cn">28</span><span class="crayon-h"> </span><span class="crayon-o">*</span><span class="crayon-h"> </span><span class="crayon-v">n_samples</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36969960093665-58"><span class="crayon-h">	</span><span class="crayon-p"># reshape into a batch of grayscale images</span></div><div class="crayon-line" id="crayon-5e19f52d36969960093665-59"><span class="crayon-h">	</span><span class="crayon-v">X</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">X</span><span class="crayon-sy">.</span><span class="crayon-e">reshape</span><span class="crayon-sy">(</span><span class="crayon-sy">(</span><span class="crayon-v">n_samples</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">28</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">28</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">1</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36969960093665-60"><span class="crayon-h">	</span><span class="crayon-p"># generate 'fake' class labels (0)</span></div><div class="crayon-line" id="crayon-5e19f52d36969960093665-61"><span class="crayon-h">	</span><span class="crayon-v">y</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">zeros</span><span class="crayon-sy">(</span><span class="crayon-sy">(</span><span class="crayon-v">n_samples</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">1</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36969960093665-62"><span class="crayon-h">	</span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-v">X</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">y</span></div><div class="crayon-line" id="crayon-5e19f52d36969960093665-63">&nbsp;</div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36969960093665-64"><span class="crayon-p"># train the discriminator model</span></div><div class="crayon-line" id="crayon-5e19f52d36969960093665-65"><span class="crayon-e">def </span><span class="crayon-e">train_discriminator</span><span class="crayon-sy">(</span><span class="crayon-v">model</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">dataset</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">n_iter</span><span class="crayon-o">=</span><span class="crayon-cn">100</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">n_batch</span><span class="crayon-o">=</span><span class="crayon-cn">256</span><span class="crayon-sy">)</span><span class="crayon-o">:</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36969960093665-66"><span class="crayon-h">	</span><span class="crayon-v">half_batch</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-t">int</span><span class="crayon-sy">(</span><span class="crayon-v">n_batch</span><span class="crayon-h"> </span><span class="crayon-o">/</span><span class="crayon-h"> </span><span class="crayon-cn">2</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36969960093665-67"><span class="crayon-h">	</span><span class="crayon-p"># manually enumerate epochs</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36969960093665-68"><span class="crayon-h">	</span><span class="crayon-st">for</span><span class="crayon-h"> </span><span class="crayon-i">i</span><span class="crayon-h"> </span><span class="crayon-st">in</span><span class="crayon-h"> </span><span class="crayon-e">range</span><span class="crayon-sy">(</span><span class="crayon-v">n_iter</span><span class="crayon-sy">)</span><span class="crayon-o">:</span></div><div class="crayon-line" id="crayon-5e19f52d36969960093665-69"><span class="crayon-h">		</span><span class="crayon-p"># get randomly selected 'real' samples</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36969960093665-70"><span class="crayon-h">		</span><span class="crayon-v">X_real</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">y_real</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">generate_real_samples</span><span class="crayon-sy">(</span><span class="crayon-v">dataset</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">half_batch</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36969960093665-71"><span class="crayon-h">		</span><span class="crayon-p"># update discriminator on real samples</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36969960093665-72"><span class="crayon-h">		</span><span class="crayon-v">_</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">real_acc</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">train_on_batch</span><span class="crayon-sy">(</span><span class="crayon-v">X_real</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">y_real</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36969960093665-73"><span class="crayon-h">		</span><span class="crayon-p"># generate 'fake' examples</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36969960093665-74"><span class="crayon-h">		</span><span class="crayon-v">X_fake</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">y_fake</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">generate_fake_samples</span><span class="crayon-sy">(</span><span class="crayon-v">half_batch</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36969960093665-75"><span class="crayon-h">		</span><span class="crayon-p"># update discriminator on fake samples</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36969960093665-76"><span class="crayon-h">		</span><span class="crayon-v">_</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">fake_acc</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">train_on_batch</span><span class="crayon-sy">(</span><span class="crayon-v">X_fake</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">y_fake</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36969960093665-77"><span class="crayon-h">		</span><span class="crayon-p"># summarize performance</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36969960093665-78"><span class="crayon-h">		</span><span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-s">'&gt;%d real=%.0f%% fake=%.0f%%'</span><span class="crayon-h"> </span><span class="crayon-o">%</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-v">i</span><span class="crayon-o">+</span><span class="crayon-cn">1</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-e ">real_acc*</span><span class="crayon-cn">100</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-e ">fake_acc*</span><span class="crayon-cn">100</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36969960093665-79">&nbsp;</div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36969960093665-80"><span class="crayon-p"># define the discriminator model</span></div><div class="crayon-line" id="crayon-5e19f52d36969960093665-81"><span class="crayon-v">model</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">define_discriminator</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36969960093665-82"><span class="crayon-p"># load image data</span></div><div class="crayon-line" id="crayon-5e19f52d36969960093665-83"><span class="crayon-v">dataset</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">load_real_samples</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36969960093665-84"><span class="crayon-p"># fit the model</span></div><div class="crayon-line" id="crayon-5e19f52d36969960093665-85"><span class="crayon-e">train_discriminator</span><span class="crayon-sy">(</span><span class="crayon-v">model</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">dataset</span><span class="crayon-sy">)</span></div></div></td>
					</tr>
				</tbody></table>
			</div>
		</div>
<!-- [Format Time: 0.0024 seconds] -->
<p>Running the example first defines the model, loads the MNIST dataset, then trains the discriminator model.</p>
<p><strong>Note</strong>: your specific results may vary given the stochastic nature of the learning algorithm. Consider running the example a few times.</p>
<p>In this case, the discriminator model learns to tell the difference between real and randomly generated MNIST images very quickly, in about 50 batches.</p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div id="crayon-5e19f52d3696a543358622" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover" style="margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important; height: auto;">
		
			<div class="crayon-toolbar" data-settings=" mouseover overlay hide delay" style="font-size: 12px !important; height: 18px !important; line-height: 18px !important; margin-top: -19px; display: none; position: absolute; z-index: 2;"><span class="crayon-title"></span>
			<div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><div class="crayon-button crayon-nums-button crayon-pressed" title="Toggle Line Numbers"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-expand-button" title="Expand Code" style="display: none;"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div></div></div>
			<div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important;"></div>
			<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly="" style="tab-size: 4; font-size: 12px !important; line-height: 15px !important; z-index: 0; opacity: 0; overflow: hidden;">...
&gt;96 real=100% fake=100%
&gt;97 real=100% fake=100%
&gt;98 real=100% fake=100%
&gt;99 real=100% fake=100%
&gt;100 real=100% fake=100%</textarea></div>
			<div class="crayon-main" style="position: relative; z-index: 1; overflow: hidden;">
				<table class="crayon-table" style="">
					<tbody><tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-5e19f52d3696a543358622-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3696a543358622-2">2</div><div class="crayon-num" data-line="crayon-5e19f52d3696a543358622-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3696a543358622-4">4</div><div class="crayon-num" data-line="crayon-5e19f52d3696a543358622-5">5</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3696a543358622-6">6</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-5e19f52d3696a543358622-1">...</div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3696a543358622-2">&gt;96 real=100% fake=100%</div><div class="crayon-line" id="crayon-5e19f52d3696a543358622-3">&gt;97 real=100% fake=100%</div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3696a543358622-4">&gt;98 real=100% fake=100%</div><div class="crayon-line" id="crayon-5e19f52d3696a543358622-5">&gt;99 real=100% fake=100%</div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3696a543358622-6">&gt;100 real=100% fake=100%</div></div></td>
					</tr>
				</tbody></table>
			</div>
		</div>
<!-- [Format Time: 0.0000 seconds] -->
<p>Now that we know how to define and train the discriminator model, we need to look at developing the generator model.</p>
<h2>How to Define and Use the Generator Model</h2>
<p>The generator model is responsible for creating new, fake but plausible images of handwritten digits.</p>
<p>It does this by taking a point from the latent space as input and outputting a square grayscale image.</p>
<p>The latent space is an arbitrarily defined vector space of <a href="https://machinelearningmastery.com/statistical-data-distributions/">Gaussian-distributed values</a>, e.g. 100 dimensions. It has no meaning, but by drawing points from this space randomly and providing them to the generator model during training, the generator model will assign meaning to the latent points and, in turn, the latent space, until, at the end of training, the latent vector space represents a compressed representation of the output space, MNIST images, that only the generator knows how to turn into plausible MNIST images.</p>
<ul>
<li><strong>Inputs</strong>: Point in latent space, e.g. a 100 element vector of Gaussian random numbers.</li>
<li><strong>Outputs</strong>: Two-dimensional square grayscale image of 28×28 pixels with pixel values in [0,1].</li>
</ul>
<p>Note: we don’t have to use a 100 element vector as input; it is a round number and widely used, but I would expect that 10, 50, or 500 would work just as well.</p>
<p>Developing a generator model requires that we transform a vector from the latent space with, 100 dimensions to a 2D array with 28×28 or 784 values.</p>
<p>There are a number of ways to achieve this but there is one approach that has proven effective at deep convolutional generative adversarial networks. It involves two main elements.</p>
<p>The first is a Dense layer as the first hidden layer that has enough nodes to represent a low-resolution version of the output image. Specifically, an image half the size (one quarter the area) of the output image would be 14×14 or 196 nodes, and an image one quarter the size (one eighth the area) would be 7×7 or 49 nodes.</p>
<p>We don’t just want one low-resolution version of the image; we want many parallel versions or interpretations of the input. This is a <a href="https://machinelearningmastery.com/review-of-architectural-innovations-for-convolutional-neural-networks-for-image-classification/">pattern in convolutional neural networks</a> where we have many parallel filters resulting in multiple parallel activation maps, called feature maps, with different interpretations of the input. We want the same thing in reverse: many parallel versions of our output with different learned features that can be collapsed in the output layer into a final image. The model needs space to invent, create, or generate.</p>
<p>Therefore, the first hidden layer, the Dense, needs enough nodes for multiple low-resolution versions of our output image, such as 128.</p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div id="crayon-5e19f52d3696b139208283" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover" style="margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important; height: auto;">
		
			<div class="crayon-toolbar" data-settings=" mouseover overlay hide delay" style="font-size: 12px !important; height: 18px !important; line-height: 18px !important; margin-top: -19px; display: none; z-index: 4;"><span class="crayon-title"></span>
			<div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><div class="crayon-button crayon-nums-button crayon-pressed" title="Toggle Line Numbers"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-expand-button" title="Expand Code" style="display: none;"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div></div></div>
			<div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important;"></div>
			<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly="" style="tab-size: 4; font-size: 12px !important; line-height: 15px !important; z-index: 0; opacity: 0; overflow: hidden;"># foundation for 7x7 image
model.add(Dense(128 * 7 * 7, input_dim=100))</textarea></div>
			<div class="crayon-main" style="position: relative; z-index: 1; overflow: hidden;">
				<table class="crayon-table" style="">
					<tbody><tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-5e19f52d3696b139208283-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3696b139208283-2">2</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-5e19f52d3696b139208283-1"><span class="crayon-p"># foundation for 7x7 image</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3696b139208283-2"><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">Dense</span><span class="crayon-sy">(</span><span class="crayon-cn">128</span><span class="crayon-h"> </span><span class="crayon-o">*</span><span class="crayon-h"> </span><span class="crayon-cn">7</span><span class="crayon-h"> </span><span class="crayon-o">*</span><span class="crayon-h"> </span><span class="crayon-cn">7</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">input_dim</span><span class="crayon-o">=</span><span class="crayon-cn">100</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div></div></td>
					</tr>
				</tbody></table>
			</div>
		</div>
<!-- [Format Time: 0.0001 seconds] -->
<p>The activations from these nodes can then be reshaped into something image-like to pass into a convolutional layer, such as 128 different 7×7 feature maps.</p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div id="crayon-5e19f52d3696c986706598" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover" style="margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important; height: auto;">
		
			<div class="crayon-toolbar" data-settings=" mouseover overlay hide delay" style="font-size: 12px !important; height: 18px !important; line-height: 18px !important; margin-top: -19px; display: none; z-index: 4;"><span class="crayon-title"></span>
			<div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><div class="crayon-button crayon-nums-button crayon-pressed" title="Toggle Line Numbers"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-expand-button" title="Expand Code" style="display: none;"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div></div></div>
			<div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important;"></div>
			<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly="" style="tab-size: 4; font-size: 12px !important; line-height: 15px !important; z-index: 0; opacity: 0; overflow: hidden;">model.add(Reshape((7, 7, 128)))</textarea></div>
			<div class="crayon-main" style="position: relative; z-index: 1; overflow: hidden;">
				<table class="crayon-table" style="">
					<tbody><tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-5e19f52d3696c986706598-1">1</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-5e19f52d3696c986706598-1"><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">Reshape</span><span class="crayon-sy">(</span><span class="crayon-sy">(</span><span class="crayon-cn">7</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">7</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">128</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div></div></td>
					</tr>
				</tbody></table>
			</div>
		</div>
<!-- [Format Time: 0.0001 seconds] -->
<p>The next major architectural innovation involves upsampling the low-resolution image to a higher resolution version of the image.</p>
<p>There are two common ways to do this upsampling process, sometimes called deconvolution.</p>
<p>One way is to use an <em>UpSampling2D</em> layer (like a reverse pooling layer) followed by a normal <em>Conv2D</em> layer. The other and perhaps more modern way is to combine these two operations into a single layer, called a <em>Conv2DTranspose</em>. We will use this latter approach for our generator.</p>
<p>The <em>Conv2DTranspose</em> layer can be configured with a stride of (2×2) that will quadruple the area of the input feature maps (double their width and height dimensions). It is also good practice to use a kernel size that is a factor of the stride (e.g. double) to <a href="https://distill.pub/2016/deconv-checkerboard/">avoid a checkerboard pattern</a> that can be observed when upsampling.</p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div id="crayon-5e19f52d3696d063987007" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover" style="margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important; height: auto;">
		
			<div class="crayon-toolbar" data-settings=" mouseover overlay hide delay" style="font-size: 12px !important; height: 18px !important; line-height: 18px !important; margin-top: -19px; display: none; z-index: 4;"><span class="crayon-title"></span>
			<div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><div class="crayon-button crayon-nums-button crayon-pressed" title="Toggle Line Numbers"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-expand-button" title="Expand Code" style="display: none;"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div></div></div>
			<div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important;"></div>
			<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly="" style="tab-size: 4; font-size: 12px !important; line-height: 15px !important; z-index: 0; opacity: 0; overflow: hidden;"># upsample to 14x14
model.add(Conv2DTranspose(128, (4,4), strides=(2,2), padding='same'))</textarea></div>
			<div class="crayon-main" style="position: relative; z-index: 1; overflow: hidden;">
				<table class="crayon-table" style="">
					<tbody><tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-5e19f52d3696d063987007-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3696d063987007-2">2</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-5e19f52d3696d063987007-1"><span class="crayon-p"># upsample to 14x14</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3696d063987007-2"><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">Conv2DTranspose</span><span class="crayon-sy">(</span><span class="crayon-cn">128</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-cn">4</span><span class="crayon-sy">,</span><span class="crayon-cn">4</span><span class="crayon-sy">)</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">strides</span><span class="crayon-o">=</span><span class="crayon-sy">(</span><span class="crayon-cn">2</span><span class="crayon-sy">,</span><span class="crayon-cn">2</span><span class="crayon-sy">)</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">padding</span><span class="crayon-o">=</span><span class="crayon-s">'same'</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div></div></td>
					</tr>
				</tbody></table>
			</div>
		</div>
<!-- [Format Time: 0.0002 seconds] -->
<p>This can be repeated to arrive at our 28×28 output image.</p>
<p>Again, we will use the LeakyReLU with a default slope of 0.2, reported as a best practice when training GAN models.</p>
<p>The output layer of the model is a <em>Conv2D</em> with one filter and a kernel size of 7×7 and <a href="https://machinelearningmastery.com/padding-and-stride-for-convolutional-neural-networks/">‘same’ padding</a>, designed to create a single feature map and preserve its dimensions at 28×28 pixels. A sigmoid activation is used to ensure output values are in the desired range of [0,1].</p>
<p>The <em>define_generator()</em> function below implements this and defines the generator model.</p>
<p><strong>Note</strong>: the generator model is not compiled and does not specify a loss function or optimization algorithm. This is because the generator is not trained directly. We will learn more about this in the next section.</p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div id="crayon-5e19f52d36973168300051" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover" style="margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important; height: auto;">
		
			<div class="crayon-toolbar" data-settings=" mouseover overlay hide delay" style="font-size: 12px !important; height: 18px !important; line-height: 18px !important; margin-top: -19px; display: none; position: absolute; z-index: 2;"><span class="crayon-title"></span>
			<div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><div class="crayon-button crayon-nums-button crayon-pressed" title="Toggle Line Numbers"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-expand-button" title="Expand Code" style="display: none;"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div></div></div>
			<div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important;"></div>
			<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly="" style="tab-size: 4; font-size: 12px !important; line-height: 15px !important; z-index: 0; opacity: 0; overflow: hidden;"># define the standalone generator model
def define_generator(latent_dim):
	model = Sequential()
	# foundation for 7x7 image
	n_nodes = 128 * 7 * 7
	model.add(Dense(n_nodes, input_dim=latent_dim))
	model.add(LeakyReLU(alpha=0.2))
	model.add(Reshape((7, 7, 128)))
	# upsample to 14x14
	model.add(Conv2DTranspose(128, (4,4), strides=(2,2), padding='same'))
	model.add(LeakyReLU(alpha=0.2))
	# upsample to 28x28
	model.add(Conv2DTranspose(128, (4,4), strides=(2,2), padding='same'))
	model.add(LeakyReLU(alpha=0.2))
	model.add(Conv2D(1, (7,7), activation='sigmoid', padding='same'))
	return model</textarea></div>
			<div class="crayon-main" style="position: relative; z-index: 1; overflow: hidden;">
				<table class="crayon-table" style="">
					<tbody><tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-5e19f52d36973168300051-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36973168300051-2">2</div><div class="crayon-num" data-line="crayon-5e19f52d36973168300051-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36973168300051-4">4</div><div class="crayon-num" data-line="crayon-5e19f52d36973168300051-5">5</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36973168300051-6">6</div><div class="crayon-num" data-line="crayon-5e19f52d36973168300051-7">7</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36973168300051-8">8</div><div class="crayon-num" data-line="crayon-5e19f52d36973168300051-9">9</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36973168300051-10">10</div><div class="crayon-num" data-line="crayon-5e19f52d36973168300051-11">11</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36973168300051-12">12</div><div class="crayon-num" data-line="crayon-5e19f52d36973168300051-13">13</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36973168300051-14">14</div><div class="crayon-num" data-line="crayon-5e19f52d36973168300051-15">15</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36973168300051-16">16</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-5e19f52d36973168300051-1"><span class="crayon-p"># define the standalone generator model</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36973168300051-2"><span class="crayon-e">def </span><span class="crayon-e">define_generator</span><span class="crayon-sy">(</span><span class="crayon-v">latent_dim</span><span class="crayon-sy">)</span><span class="crayon-o">:</span></div><div class="crayon-line" id="crayon-5e19f52d36973168300051-3"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">Sequential</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36973168300051-4"><span class="crayon-h">	</span><span class="crayon-p"># foundation for 7x7 image</span></div><div class="crayon-line" id="crayon-5e19f52d36973168300051-5"><span class="crayon-h">	</span><span class="crayon-v">n_nodes</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-cn">128</span><span class="crayon-h"> </span><span class="crayon-o">*</span><span class="crayon-h"> </span><span class="crayon-cn">7</span><span class="crayon-h"> </span><span class="crayon-o">*</span><span class="crayon-h"> </span><span class="crayon-cn">7</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36973168300051-6"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">Dense</span><span class="crayon-sy">(</span><span class="crayon-v">n_nodes</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">input_dim</span><span class="crayon-o">=</span><span class="crayon-v">latent_dim</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36973168300051-7"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">LeakyReLU</span><span class="crayon-sy">(</span><span class="crayon-v">alpha</span><span class="crayon-o">=</span><span class="crayon-cn">0.2</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36973168300051-8"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">Reshape</span><span class="crayon-sy">(</span><span class="crayon-sy">(</span><span class="crayon-cn">7</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">7</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">128</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36973168300051-9"><span class="crayon-h">	</span><span class="crayon-p"># upsample to 14x14</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36973168300051-10"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">Conv2DTranspose</span><span class="crayon-sy">(</span><span class="crayon-cn">128</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-cn">4</span><span class="crayon-sy">,</span><span class="crayon-cn">4</span><span class="crayon-sy">)</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">strides</span><span class="crayon-o">=</span><span class="crayon-sy">(</span><span class="crayon-cn">2</span><span class="crayon-sy">,</span><span class="crayon-cn">2</span><span class="crayon-sy">)</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">padding</span><span class="crayon-o">=</span><span class="crayon-s">'same'</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36973168300051-11"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">LeakyReLU</span><span class="crayon-sy">(</span><span class="crayon-v">alpha</span><span class="crayon-o">=</span><span class="crayon-cn">0.2</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36973168300051-12"><span class="crayon-h">	</span><span class="crayon-p"># upsample to 28x28</span></div><div class="crayon-line" id="crayon-5e19f52d36973168300051-13"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">Conv2DTranspose</span><span class="crayon-sy">(</span><span class="crayon-cn">128</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-cn">4</span><span class="crayon-sy">,</span><span class="crayon-cn">4</span><span class="crayon-sy">)</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">strides</span><span class="crayon-o">=</span><span class="crayon-sy">(</span><span class="crayon-cn">2</span><span class="crayon-sy">,</span><span class="crayon-cn">2</span><span class="crayon-sy">)</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">padding</span><span class="crayon-o">=</span><span class="crayon-s">'same'</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36973168300051-14"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">LeakyReLU</span><span class="crayon-sy">(</span><span class="crayon-v">alpha</span><span class="crayon-o">=</span><span class="crayon-cn">0.2</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36973168300051-15"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">Conv2D</span><span class="crayon-sy">(</span><span class="crayon-cn">1</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-cn">7</span><span class="crayon-sy">,</span><span class="crayon-cn">7</span><span class="crayon-sy">)</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">activation</span><span class="crayon-o">=</span><span class="crayon-s">'sigmoid'</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">padding</span><span class="crayon-o">=</span><span class="crayon-s">'same'</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36973168300051-16"><span class="crayon-h">	</span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-v">model</span></div></div></td>
					</tr>
				</tbody></table>
			</div>
		</div>
<!-- [Format Time: 0.0008 seconds] -->
<p>We can summarize the model to help better understand the input and output shapes.</p>
<p>The complete example is listed below.</p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div id="crayon-5e19f52d36974734434467" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover" style="margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important; height: auto;">
		
			<div class="crayon-toolbar" data-settings=" mouseover overlay hide delay" style="font-size: 12px !important; height: 18px !important; line-height: 18px !important; margin-top: -19px; display: none; position: absolute; z-index: 2;"><span class="crayon-title"></span>
			<div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><div class="crayon-button crayon-nums-button crayon-pressed" title="Toggle Line Numbers"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div></div></div>
			<div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important;"></div>
			<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly="" style="tab-size: 4; font-size: 12px !important; line-height: 15px !important; z-index: 0; opacity: 0; overflow: hidden;"># example of defining the generator model
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import Reshape
from keras.layers import Conv2D
from keras.layers import Conv2DTranspose
from keras.layers import LeakyReLU
from keras.utils.vis_utils import plot_model

# define the standalone generator model
def define_generator(latent_dim):
	model = Sequential()
	# foundation for 7x7 image
	n_nodes = 128 * 7 * 7
	model.add(Dense(n_nodes, input_dim=latent_dim))
	model.add(LeakyReLU(alpha=0.2))
	model.add(Reshape((7, 7, 128)))
	# upsample to 14x14
	model.add(Conv2DTranspose(128, (4,4), strides=(2,2), padding='same'))
	model.add(LeakyReLU(alpha=0.2))
	# upsample to 28x28
	model.add(Conv2DTranspose(128, (4,4), strides=(2,2), padding='same'))
	model.add(LeakyReLU(alpha=0.2))
	model.add(Conv2D(1, (7,7), activation='sigmoid', padding='same'))
	return model

# define the size of the latent space
latent_dim = 100
# define the generator model
model = define_generator(latent_dim)
# summarize the model
model.summary()
# plot the model
plot_model(model, to_file='generator_plot.png', show_shapes=True, show_layer_names=True)</textarea></div>
			<div class="crayon-main" style="position: relative; z-index: 1; overflow: hidden;">
				<table class="crayon-table" style="">
					<tbody><tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-5e19f52d36974734434467-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36974734434467-2">2</div><div class="crayon-num" data-line="crayon-5e19f52d36974734434467-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36974734434467-4">4</div><div class="crayon-num" data-line="crayon-5e19f52d36974734434467-5">5</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36974734434467-6">6</div><div class="crayon-num" data-line="crayon-5e19f52d36974734434467-7">7</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36974734434467-8">8</div><div class="crayon-num" data-line="crayon-5e19f52d36974734434467-9">9</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36974734434467-10">10</div><div class="crayon-num" data-line="crayon-5e19f52d36974734434467-11">11</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36974734434467-12">12</div><div class="crayon-num" data-line="crayon-5e19f52d36974734434467-13">13</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36974734434467-14">14</div><div class="crayon-num" data-line="crayon-5e19f52d36974734434467-15">15</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36974734434467-16">16</div><div class="crayon-num" data-line="crayon-5e19f52d36974734434467-17">17</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36974734434467-18">18</div><div class="crayon-num" data-line="crayon-5e19f52d36974734434467-19">19</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36974734434467-20">20</div><div class="crayon-num" data-line="crayon-5e19f52d36974734434467-21">21</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36974734434467-22">22</div><div class="crayon-num" data-line="crayon-5e19f52d36974734434467-23">23</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36974734434467-24">24</div><div class="crayon-num" data-line="crayon-5e19f52d36974734434467-25">25</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36974734434467-26">26</div><div class="crayon-num" data-line="crayon-5e19f52d36974734434467-27">27</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36974734434467-28">28</div><div class="crayon-num" data-line="crayon-5e19f52d36974734434467-29">29</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36974734434467-30">30</div><div class="crayon-num" data-line="crayon-5e19f52d36974734434467-31">31</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36974734434467-32">32</div><div class="crayon-num" data-line="crayon-5e19f52d36974734434467-33">33</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36974734434467-34">34</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-5e19f52d36974734434467-1"><span class="crayon-p"># example of defining the generator model</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36974734434467-2"><span class="crayon-e">from </span><span class="crayon-v">keras</span><span class="crayon-sy">.</span><span class="crayon-e">models </span><span class="crayon-e">import </span><span class="crayon-e">Sequential</span></div><div class="crayon-line" id="crayon-5e19f52d36974734434467-3"><span class="crayon-e">from </span><span class="crayon-v">keras</span><span class="crayon-sy">.</span><span class="crayon-e">layers </span><span class="crayon-e">import </span><span class="crayon-e">Dense</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36974734434467-4"><span class="crayon-e">from </span><span class="crayon-v">keras</span><span class="crayon-sy">.</span><span class="crayon-e">layers </span><span class="crayon-e">import </span><span class="crayon-e">Reshape</span></div><div class="crayon-line" id="crayon-5e19f52d36974734434467-5"><span class="crayon-e">from </span><span class="crayon-v">keras</span><span class="crayon-sy">.</span><span class="crayon-e">layers </span><span class="crayon-e">import </span><span class="crayon-e">Conv2D</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36974734434467-6"><span class="crayon-e">from </span><span class="crayon-v">keras</span><span class="crayon-sy">.</span><span class="crayon-e">layers </span><span class="crayon-e">import </span><span class="crayon-e">Conv2DTranspose</span></div><div class="crayon-line" id="crayon-5e19f52d36974734434467-7"><span class="crayon-e">from </span><span class="crayon-v">keras</span><span class="crayon-sy">.</span><span class="crayon-e">layers </span><span class="crayon-e">import </span><span class="crayon-e">LeakyReLU</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36974734434467-8"><span class="crayon-e">from </span><span class="crayon-v">keras</span><span class="crayon-sy">.</span><span class="crayon-v">utils</span><span class="crayon-sy">.</span><span class="crayon-e">vis_utils </span><span class="crayon-e">import </span><span class="crayon-v">plot_model</span></div><div class="crayon-line" id="crayon-5e19f52d36974734434467-9">&nbsp;</div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36974734434467-10"><span class="crayon-p"># define the standalone generator model</span></div><div class="crayon-line" id="crayon-5e19f52d36974734434467-11"><span class="crayon-e">def </span><span class="crayon-e">define_generator</span><span class="crayon-sy">(</span><span class="crayon-v">latent_dim</span><span class="crayon-sy">)</span><span class="crayon-o">:</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36974734434467-12"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">Sequential</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36974734434467-13"><span class="crayon-h">	</span><span class="crayon-p"># foundation for 7x7 image</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36974734434467-14"><span class="crayon-h">	</span><span class="crayon-v">n_nodes</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-cn">128</span><span class="crayon-h"> </span><span class="crayon-o">*</span><span class="crayon-h"> </span><span class="crayon-cn">7</span><span class="crayon-h"> </span><span class="crayon-o">*</span><span class="crayon-h"> </span><span class="crayon-cn">7</span></div><div class="crayon-line" id="crayon-5e19f52d36974734434467-15"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">Dense</span><span class="crayon-sy">(</span><span class="crayon-v">n_nodes</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">input_dim</span><span class="crayon-o">=</span><span class="crayon-v">latent_dim</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36974734434467-16"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">LeakyReLU</span><span class="crayon-sy">(</span><span class="crayon-v">alpha</span><span class="crayon-o">=</span><span class="crayon-cn">0.2</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36974734434467-17"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">Reshape</span><span class="crayon-sy">(</span><span class="crayon-sy">(</span><span class="crayon-cn">7</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">7</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">128</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36974734434467-18"><span class="crayon-h">	</span><span class="crayon-p"># upsample to 14x14</span></div><div class="crayon-line" id="crayon-5e19f52d36974734434467-19"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">Conv2DTranspose</span><span class="crayon-sy">(</span><span class="crayon-cn">128</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-cn">4</span><span class="crayon-sy">,</span><span class="crayon-cn">4</span><span class="crayon-sy">)</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">strides</span><span class="crayon-o">=</span><span class="crayon-sy">(</span><span class="crayon-cn">2</span><span class="crayon-sy">,</span><span class="crayon-cn">2</span><span class="crayon-sy">)</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">padding</span><span class="crayon-o">=</span><span class="crayon-s">'same'</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36974734434467-20"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">LeakyReLU</span><span class="crayon-sy">(</span><span class="crayon-v">alpha</span><span class="crayon-o">=</span><span class="crayon-cn">0.2</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36974734434467-21"><span class="crayon-h">	</span><span class="crayon-p"># upsample to 28x28</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36974734434467-22"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">Conv2DTranspose</span><span class="crayon-sy">(</span><span class="crayon-cn">128</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-cn">4</span><span class="crayon-sy">,</span><span class="crayon-cn">4</span><span class="crayon-sy">)</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">strides</span><span class="crayon-o">=</span><span class="crayon-sy">(</span><span class="crayon-cn">2</span><span class="crayon-sy">,</span><span class="crayon-cn">2</span><span class="crayon-sy">)</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">padding</span><span class="crayon-o">=</span><span class="crayon-s">'same'</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36974734434467-23"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">LeakyReLU</span><span class="crayon-sy">(</span><span class="crayon-v">alpha</span><span class="crayon-o">=</span><span class="crayon-cn">0.2</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36974734434467-24"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">Conv2D</span><span class="crayon-sy">(</span><span class="crayon-cn">1</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-cn">7</span><span class="crayon-sy">,</span><span class="crayon-cn">7</span><span class="crayon-sy">)</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">activation</span><span class="crayon-o">=</span><span class="crayon-s">'sigmoid'</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">padding</span><span class="crayon-o">=</span><span class="crayon-s">'same'</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36974734434467-25"><span class="crayon-h">	</span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-v">model</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36974734434467-26">&nbsp;</div><div class="crayon-line" id="crayon-5e19f52d36974734434467-27"><span class="crayon-p"># define the size of the latent space</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36974734434467-28"><span class="crayon-v">latent_dim</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-cn">100</span></div><div class="crayon-line" id="crayon-5e19f52d36974734434467-29"><span class="crayon-p"># define the generator model</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36974734434467-30"><span class="crayon-v">model</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">define_generator</span><span class="crayon-sy">(</span><span class="crayon-v">latent_dim</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36974734434467-31"><span class="crayon-p"># summarize the model</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36974734434467-32"><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">summary</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36974734434467-33"><span class="crayon-p"># plot the model</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36974734434467-34"><span class="crayon-e">plot_model</span><span class="crayon-sy">(</span><span class="crayon-v">model</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">to_file</span><span class="crayon-o">=</span><span class="crayon-s">'generator_plot.png'</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">show_shapes</span><span class="crayon-o">=</span><span class="crayon-t">True</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">show_layer_names</span><span class="crayon-o">=</span><span class="crayon-t">True</span><span class="crayon-sy">)</span></div></div></td>
					</tr>
				</tbody></table>
			</div>
		</div>
<!-- [Format Time: 0.0011 seconds] -->
<p>Running the example summarizes the layers of the model and their output shape.</p>
<p>We can see that, as designed, the first hidden layer has 6,272 parameters or 128 * 7 * 7, the activations of which are reshaped into 128 7×7 feature maps. The feature maps are then upscaled via the two <em>Conv2DTranspose</em> layers to the desired output shape of 28×28, until the output layer, where a single activation map is output.</p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div id="crayon-5e19f52d36975397105785" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover" style="margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important; height: auto;">
		
			<div class="crayon-toolbar" data-settings=" mouseover overlay hide delay" style="font-size: 12px !important; height: 18px !important; line-height: 18px !important; margin-top: -19px; display: none; position: absolute; z-index: 2;"><span class="crayon-title"></span>
			<div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><div class="crayon-button crayon-nums-button crayon-pressed" title="Toggle Line Numbers"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-expand-button" title="Expand Code" style="display: none;"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div></div></div>
			<div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important;"></div>
			<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly="" style="tab-size: 4; font-size: 12px !important; line-height: 15px !important; z-index: 0; opacity: 0; overflow: hidden;">_________________________________________________________________
Layer (type)                 Output Shape              Param #
=================================================================
dense_1 (Dense)              (None, 6272)              633472
_________________________________________________________________
leaky_re_lu_1 (LeakyReLU)    (None, 6272)              0
_________________________________________________________________
reshape_1 (Reshape)          (None, 7, 7, 128)         0
_________________________________________________________________
conv2d_transpose_1 (Conv2DTr (None, 14, 14, 128)       262272
_________________________________________________________________
leaky_re_lu_2 (LeakyReLU)    (None, 14, 14, 128)       0
_________________________________________________________________
conv2d_transpose_2 (Conv2DTr (None, 28, 28, 128)       262272
_________________________________________________________________
leaky_re_lu_3 (LeakyReLU)    (None, 28, 28, 128)       0
_________________________________________________________________
conv2d_1 (Conv2D)            (None, 28, 28, 1)         6273
=================================================================
Total params: 1,164,289
Trainable params: 1,164,289
Non-trainable params: 0
_________________________________________________________________</textarea></div>
			<div class="crayon-main" style="position: relative; z-index: 1; overflow: hidden;">
				<table class="crayon-table" style="">
					<tbody><tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-5e19f52d36975397105785-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36975397105785-2">2</div><div class="crayon-num" data-line="crayon-5e19f52d36975397105785-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36975397105785-4">4</div><div class="crayon-num" data-line="crayon-5e19f52d36975397105785-5">5</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36975397105785-6">6</div><div class="crayon-num" data-line="crayon-5e19f52d36975397105785-7">7</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36975397105785-8">8</div><div class="crayon-num" data-line="crayon-5e19f52d36975397105785-9">9</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36975397105785-10">10</div><div class="crayon-num" data-line="crayon-5e19f52d36975397105785-11">11</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36975397105785-12">12</div><div class="crayon-num" data-line="crayon-5e19f52d36975397105785-13">13</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36975397105785-14">14</div><div class="crayon-num" data-line="crayon-5e19f52d36975397105785-15">15</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36975397105785-16">16</div><div class="crayon-num" data-line="crayon-5e19f52d36975397105785-17">17</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36975397105785-18">18</div><div class="crayon-num" data-line="crayon-5e19f52d36975397105785-19">19</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36975397105785-20">20</div><div class="crayon-num" data-line="crayon-5e19f52d36975397105785-21">21</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36975397105785-22">22</div><div class="crayon-num" data-line="crayon-5e19f52d36975397105785-23">23</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-5e19f52d36975397105785-1">_________________________________________________________________</div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36975397105785-2">Layer (type)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Output Shape&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Param #</div><div class="crayon-line" id="crayon-5e19f52d36975397105785-3">=================================================================</div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36975397105785-4">dense_1 (Dense)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(None, 6272)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;633472</div><div class="crayon-line" id="crayon-5e19f52d36975397105785-5">_________________________________________________________________</div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36975397105785-6">leaky_re_lu_1 (LeakyReLU)&nbsp;&nbsp;&nbsp;&nbsp;(None, 6272)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0</div><div class="crayon-line" id="crayon-5e19f52d36975397105785-7">_________________________________________________________________</div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36975397105785-8">reshape_1 (Reshape)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(None, 7, 7, 128)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0</div><div class="crayon-line" id="crayon-5e19f52d36975397105785-9">_________________________________________________________________</div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36975397105785-10">conv2d_transpose_1 (Conv2DTr (None, 14, 14, 128)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 262272</div><div class="crayon-line" id="crayon-5e19f52d36975397105785-11">_________________________________________________________________</div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36975397105785-12">leaky_re_lu_2 (LeakyReLU)&nbsp;&nbsp;&nbsp;&nbsp;(None, 14, 14, 128)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0</div><div class="crayon-line" id="crayon-5e19f52d36975397105785-13">_________________________________________________________________</div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36975397105785-14">conv2d_transpose_2 (Conv2DTr (None, 28, 28, 128)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 262272</div><div class="crayon-line" id="crayon-5e19f52d36975397105785-15">_________________________________________________________________</div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36975397105785-16">leaky_re_lu_3 (LeakyReLU)&nbsp;&nbsp;&nbsp;&nbsp;(None, 28, 28, 128)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0</div><div class="crayon-line" id="crayon-5e19f52d36975397105785-17">_________________________________________________________________</div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36975397105785-18">conv2d_1 (Conv2D)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(None, 28, 28, 1)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 6273</div><div class="crayon-line" id="crayon-5e19f52d36975397105785-19">=================================================================</div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36975397105785-20">Total params: 1,164,289</div><div class="crayon-line" id="crayon-5e19f52d36975397105785-21">Trainable params: 1,164,289</div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36975397105785-22">Non-trainable params: 0</div><div class="crayon-line" id="crayon-5e19f52d36975397105785-23">_________________________________________________________________</div></div></td>
					</tr>
				</tbody></table>
			</div>
		</div>
<!-- [Format Time: 0.0000 seconds] -->
<p>A plot of the model is also created and we can see that the model expects a 100-element point from the latent space as input and will generate an image as output.</p>
<p><strong>Note</strong>: creating this plot assumes that the pydot and graphviz libraries are installed. If this is a problem, you can comment out the import statement for the plot_model function and the call to the plot_model function.</p>
<div id="attachment_8106" style="width: 589px" class="wp-caption aligncenter"><img aria-describedby="caption-attachment-8106" class="size-full wp-image-8106" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/Plot-of-the-Generator-Model-in-the-MNIST-GAN.png" alt="Plot of the Generator Model in the MNIST GAN" width="579" height="945" srcset="https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/uploads/2019/04/Plot-of-the-Generator-Model-in-the-MNIST-GAN.png 579w, https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/uploads/2019/04/Plot-of-the-Generator-Model-in-the-MNIST-GAN-184x300.png 184w" sizes="(max-width: 579px) 100vw, 579px"><p id="caption-attachment-8106" class="wp-caption-text">Plot of the Generator Model in the MNIST GAN</p></div>
<p>This model cannot do much at the moment.</p>
<p>Nevertheless, we can demonstrate how to use it to generate samples. This is a helpful demonstration to understand the generator as just another model, and some of these elements will be useful later.</p>
<p>The first step is to generate new points in the latent space. We can achieve this by calling the <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.random.randn.html">randn() NumPy function</a> for generating arrays of <a href="https://machinelearningmastery.com/how-to-generate-random-numbers-in-python/">random numbers drawn from a standard Gaussian</a>.</p>
<p>The array of random numbers can then be reshaped into samples, that is n rows with 100 elements per row. The <em>generate_latent_points()</em> function below implements this and generates the desired number of points in the latent space that can be used as input to the generator model.</p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div id="crayon-5e19f52d36976341116481" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover" style="margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important; height: auto;">
		
			<div class="crayon-toolbar" data-settings=" mouseover overlay hide delay" style="font-size: 12px !important; height: 18px !important; line-height: 18px !important; margin-top: -19px; display: none; position: absolute; z-index: 2;"><span class="crayon-title"></span>
			<div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><div class="crayon-button crayon-nums-button crayon-pressed" title="Toggle Line Numbers"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-expand-button" title="Expand Code" style="display: none;"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div></div></div>
			<div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important;"></div>
			<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly="" style="tab-size: 4; font-size: 12px !important; line-height: 15px !important; z-index: 0; opacity: 0; overflow: hidden;"># generate points in latent space as input for the generator
def generate_latent_points(latent_dim, n_samples):
	# generate points in the latent space
	x_input = randn(latent_dim * n_samples)
	# reshape into a batch of inputs for the network
	x_input = x_input.reshape(n_samples, latent_dim)
	return x_input</textarea></div>
			<div class="crayon-main" style="position: relative; z-index: 1; overflow: hidden;">
				<table class="crayon-table" style="">
					<tbody><tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-5e19f52d36976341116481-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36976341116481-2">2</div><div class="crayon-num" data-line="crayon-5e19f52d36976341116481-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36976341116481-4">4</div><div class="crayon-num" data-line="crayon-5e19f52d36976341116481-5">5</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36976341116481-6">6</div><div class="crayon-num" data-line="crayon-5e19f52d36976341116481-7">7</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-5e19f52d36976341116481-1"><span class="crayon-p"># generate points in latent space as input for the generator</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36976341116481-2"><span class="crayon-e">def </span><span class="crayon-e">generate_latent_points</span><span class="crayon-sy">(</span><span class="crayon-v">latent_dim</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">n_samples</span><span class="crayon-sy">)</span><span class="crayon-o">:</span></div><div class="crayon-line" id="crayon-5e19f52d36976341116481-3"><span class="crayon-h">	</span><span class="crayon-p"># generate points in the latent space</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36976341116481-4"><span class="crayon-h">	</span><span class="crayon-v">x_input</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">randn</span><span class="crayon-sy">(</span><span class="crayon-e ">latent_dim *</span><span class="crayon-h"> </span><span class="crayon-v">n_samples</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36976341116481-5"><span class="crayon-h">	</span><span class="crayon-p"># reshape into a batch of inputs for the network</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36976341116481-6"><span class="crayon-h">	</span><span class="crayon-v">x_input</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">x_input</span><span class="crayon-sy">.</span><span class="crayon-e">reshape</span><span class="crayon-sy">(</span><span class="crayon-v">n_samples</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">latent_dim</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36976341116481-7"><span class="crayon-h">	</span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-v">x_input</span></div></div></td>
					</tr>
				</tbody></table>
			</div>
		</div>
<!-- [Format Time: 0.0002 seconds] -->
<p>Next, we can use the generated points as input to the generator model to generate new samples, then plot the samples.</p>
<p>We can update the <em>generate_fake_samples()</em> function from the previous section to take the generator model as an argument and use it to generate the desired number of samples by first calling the <em>generate_latent_points()</em> function to generate the required number of points in latent space as input to the model.</p>
<p>The updated <em>generate_fake_samples()</em> function is listed below and returns both the generated samples and the associated class labels.</p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div id="crayon-5e19f52d36977891808397" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover" style="margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important; height: auto;">
		
			<div class="crayon-toolbar" data-settings=" mouseover overlay hide delay" style="font-size: 12px !important; height: 18px !important; line-height: 18px !important; margin-top: -19px; display: none; position: absolute; z-index: 2;"><span class="crayon-title"></span>
			<div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><div class="crayon-button crayon-nums-button crayon-pressed" title="Toggle Line Numbers"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-expand-button" title="Expand Code" style="display: none;"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div></div></div>
			<div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important;"></div>
			<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly="" style="tab-size: 4; font-size: 12px !important; line-height: 15px !important; z-index: 0; opacity: 0; overflow: hidden;"># use the generator to generate n fake examples, with class labels
def generate_fake_samples(g_model, latent_dim, n_samples):
	# generate points in latent space
	x_input = generate_latent_points(latent_dim, n_samples)
	# predict outputs
	X = g_model.predict(x_input)
	# create 'fake' class labels (0)
	y = zeros((n_samples, 1))
	return X, y</textarea></div>
			<div class="crayon-main" style="position: relative; z-index: 1; overflow: hidden;">
				<table class="crayon-table" style="">
					<tbody><tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-5e19f52d36977891808397-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36977891808397-2">2</div><div class="crayon-num" data-line="crayon-5e19f52d36977891808397-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36977891808397-4">4</div><div class="crayon-num" data-line="crayon-5e19f52d36977891808397-5">5</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36977891808397-6">6</div><div class="crayon-num" data-line="crayon-5e19f52d36977891808397-7">7</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36977891808397-8">8</div><div class="crayon-num" data-line="crayon-5e19f52d36977891808397-9">9</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-5e19f52d36977891808397-1"><span class="crayon-p"># use the generator to generate n fake examples, with class labels</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36977891808397-2"><span class="crayon-e">def </span><span class="crayon-e">generate_fake_samples</span><span class="crayon-sy">(</span><span class="crayon-v">g_model</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">latent_dim</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">n_samples</span><span class="crayon-sy">)</span><span class="crayon-o">:</span></div><div class="crayon-line" id="crayon-5e19f52d36977891808397-3"><span class="crayon-h">	</span><span class="crayon-p"># generate points in latent space</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36977891808397-4"><span class="crayon-h">	</span><span class="crayon-v">x_input</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">generate_latent_points</span><span class="crayon-sy">(</span><span class="crayon-v">latent_dim</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">n_samples</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36977891808397-5"><span class="crayon-h">	</span><span class="crayon-p"># predict outputs</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36977891808397-6"><span class="crayon-h">	</span><span class="crayon-v">X</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">g_model</span><span class="crayon-sy">.</span><span class="crayon-e">predict</span><span class="crayon-sy">(</span><span class="crayon-v">x_input</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36977891808397-7"><span class="crayon-h">	</span><span class="crayon-p"># create 'fake' class labels (0)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36977891808397-8"><span class="crayon-h">	</span><span class="crayon-v">y</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">zeros</span><span class="crayon-sy">(</span><span class="crayon-sy">(</span><span class="crayon-v">n_samples</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">1</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36977891808397-9"><span class="crayon-h">	</span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-v">X</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">y</span></div></div></td>
					</tr>
				</tbody></table>
			</div>
		</div>
<!-- [Format Time: 0.0003 seconds] -->
<p>We can then plot the generated samples as we did the real MNIST examples in the first section by calling the imshow() function with the reversed grayscale color map.</p>
<p>The complete example of generating new MNIST images with the untrained generator model is listed below.</p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div id="crayon-5e19f52d36978954617805" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover" style="margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important; height: auto;">
		
			<div class="crayon-toolbar" data-settings=" mouseover overlay hide delay" style="font-size: 12px !important; height: 18px !important; line-height: 18px !important; margin-top: -19px; display: none; position: absolute; z-index: 2;"><span class="crayon-title"></span>
			<div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><div class="crayon-button crayon-nums-button crayon-pressed" title="Toggle Line Numbers"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-expand-button" title="Expand Code" style="display: none;"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div></div></div>
			<div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important;"></div>
			<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly="" style="tab-size: 4; font-size: 12px !important; line-height: 15px !important; z-index: 0; opacity: 0; overflow: hidden;"># example of defining and using the generator model
from numpy import zeros
from numpy.random import randn
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import Reshape
from keras.layers import Conv2D
from keras.layers import Conv2DTranspose
from keras.layers import LeakyReLU
from matplotlib import pyplot

# define the standalone generator model
def define_generator(latent_dim):
	model = Sequential()
	# foundation for 7x7 image
	n_nodes = 128 * 7 * 7
	model.add(Dense(n_nodes, input_dim=latent_dim))
	model.add(LeakyReLU(alpha=0.2))
	model.add(Reshape((7, 7, 128)))
	# upsample to 14x14
	model.add(Conv2DTranspose(128, (4,4), strides=(2,2), padding='same'))
	model.add(LeakyReLU(alpha=0.2))
	# upsample to 28x28
	model.add(Conv2DTranspose(128, (4,4), strides=(2,2), padding='same'))
	model.add(LeakyReLU(alpha=0.2))
	model.add(Conv2D(1, (7,7), activation='sigmoid', padding='same'))
	return model

# generate points in latent space as input for the generator
def generate_latent_points(latent_dim, n_samples):
	# generate points in the latent space
	x_input = randn(latent_dim * n_samples)
	# reshape into a batch of inputs for the network
	x_input = x_input.reshape(n_samples, latent_dim)
	return x_input

# use the generator to generate n fake examples, with class labels
def generate_fake_samples(g_model, latent_dim, n_samples):
	# generate points in latent space
	x_input = generate_latent_points(latent_dim, n_samples)
	# predict outputs
	X = g_model.predict(x_input)
	# create 'fake' class labels (0)
	y = zeros((n_samples, 1))
	return X, y

# size of the latent space
latent_dim = 100
# define the discriminator model
model = define_generator(latent_dim)
# generate samples
n_samples = 25
X, _ = generate_fake_samples(model, latent_dim, n_samples)
# plot the generated samples
for i in range(n_samples):
	# define subplot
	pyplot.subplot(5, 5, 1 + i)
	# turn off axis labels
	pyplot.axis('off')
	# plot single image
	pyplot.imshow(X[i, :, :, 0], cmap='gray_r')
# show the figure
pyplot.show()</textarea></div>
			<div class="crayon-main" style="position: relative; z-index: 1; overflow: hidden;">
				<table class="crayon-table" style="">
					<tbody><tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-5e19f52d36978954617805-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36978954617805-2">2</div><div class="crayon-num" data-line="crayon-5e19f52d36978954617805-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36978954617805-4">4</div><div class="crayon-num" data-line="crayon-5e19f52d36978954617805-5">5</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36978954617805-6">6</div><div class="crayon-num" data-line="crayon-5e19f52d36978954617805-7">7</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36978954617805-8">8</div><div class="crayon-num" data-line="crayon-5e19f52d36978954617805-9">9</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36978954617805-10">10</div><div class="crayon-num" data-line="crayon-5e19f52d36978954617805-11">11</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36978954617805-12">12</div><div class="crayon-num" data-line="crayon-5e19f52d36978954617805-13">13</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36978954617805-14">14</div><div class="crayon-num" data-line="crayon-5e19f52d36978954617805-15">15</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36978954617805-16">16</div><div class="crayon-num" data-line="crayon-5e19f52d36978954617805-17">17</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36978954617805-18">18</div><div class="crayon-num" data-line="crayon-5e19f52d36978954617805-19">19</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36978954617805-20">20</div><div class="crayon-num" data-line="crayon-5e19f52d36978954617805-21">21</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36978954617805-22">22</div><div class="crayon-num" data-line="crayon-5e19f52d36978954617805-23">23</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36978954617805-24">24</div><div class="crayon-num" data-line="crayon-5e19f52d36978954617805-25">25</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36978954617805-26">26</div><div class="crayon-num" data-line="crayon-5e19f52d36978954617805-27">27</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36978954617805-28">28</div><div class="crayon-num" data-line="crayon-5e19f52d36978954617805-29">29</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36978954617805-30">30</div><div class="crayon-num" data-line="crayon-5e19f52d36978954617805-31">31</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36978954617805-32">32</div><div class="crayon-num" data-line="crayon-5e19f52d36978954617805-33">33</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36978954617805-34">34</div><div class="crayon-num" data-line="crayon-5e19f52d36978954617805-35">35</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36978954617805-36">36</div><div class="crayon-num" data-line="crayon-5e19f52d36978954617805-37">37</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36978954617805-38">38</div><div class="crayon-num" data-line="crayon-5e19f52d36978954617805-39">39</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36978954617805-40">40</div><div class="crayon-num" data-line="crayon-5e19f52d36978954617805-41">41</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36978954617805-42">42</div><div class="crayon-num" data-line="crayon-5e19f52d36978954617805-43">43</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36978954617805-44">44</div><div class="crayon-num" data-line="crayon-5e19f52d36978954617805-45">45</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36978954617805-46">46</div><div class="crayon-num" data-line="crayon-5e19f52d36978954617805-47">47</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36978954617805-48">48</div><div class="crayon-num" data-line="crayon-5e19f52d36978954617805-49">49</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36978954617805-50">50</div><div class="crayon-num" data-line="crayon-5e19f52d36978954617805-51">51</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36978954617805-52">52</div><div class="crayon-num" data-line="crayon-5e19f52d36978954617805-53">53</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36978954617805-54">54</div><div class="crayon-num" data-line="crayon-5e19f52d36978954617805-55">55</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36978954617805-56">56</div><div class="crayon-num" data-line="crayon-5e19f52d36978954617805-57">57</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36978954617805-58">58</div><div class="crayon-num" data-line="crayon-5e19f52d36978954617805-59">59</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36978954617805-60">60</div><div class="crayon-num" data-line="crayon-5e19f52d36978954617805-61">61</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36978954617805-62">62</div><div class="crayon-num" data-line="crayon-5e19f52d36978954617805-63">63</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-5e19f52d36978954617805-1"><span class="crayon-p"># example of defining and using the generator model</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36978954617805-2"><span class="crayon-e">from </span><span class="crayon-e">numpy </span><span class="crayon-e">import </span><span class="crayon-e">zeros</span></div><div class="crayon-line" id="crayon-5e19f52d36978954617805-3"><span class="crayon-e">from </span><span class="crayon-v">numpy</span><span class="crayon-sy">.</span><span class="crayon-e">random </span><span class="crayon-e">import </span><span class="crayon-e">randn</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36978954617805-4"><span class="crayon-e">from </span><span class="crayon-v">keras</span><span class="crayon-sy">.</span><span class="crayon-e">models </span><span class="crayon-e">import </span><span class="crayon-e">Sequential</span></div><div class="crayon-line" id="crayon-5e19f52d36978954617805-5"><span class="crayon-e">from </span><span class="crayon-v">keras</span><span class="crayon-sy">.</span><span class="crayon-e">layers </span><span class="crayon-e">import </span><span class="crayon-e">Dense</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36978954617805-6"><span class="crayon-e">from </span><span class="crayon-v">keras</span><span class="crayon-sy">.</span><span class="crayon-e">layers </span><span class="crayon-e">import </span><span class="crayon-e">Reshape</span></div><div class="crayon-line" id="crayon-5e19f52d36978954617805-7"><span class="crayon-e">from </span><span class="crayon-v">keras</span><span class="crayon-sy">.</span><span class="crayon-e">layers </span><span class="crayon-e">import </span><span class="crayon-e">Conv2D</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36978954617805-8"><span class="crayon-e">from </span><span class="crayon-v">keras</span><span class="crayon-sy">.</span><span class="crayon-e">layers </span><span class="crayon-e">import </span><span class="crayon-e">Conv2DTranspose</span></div><div class="crayon-line" id="crayon-5e19f52d36978954617805-9"><span class="crayon-e">from </span><span class="crayon-v">keras</span><span class="crayon-sy">.</span><span class="crayon-e">layers </span><span class="crayon-e">import </span><span class="crayon-e">LeakyReLU</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36978954617805-10"><span class="crayon-e">from </span><span class="crayon-e">matplotlib </span><span class="crayon-e">import </span><span class="crayon-v">pyplot</span></div><div class="crayon-line" id="crayon-5e19f52d36978954617805-11">&nbsp;</div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36978954617805-12"><span class="crayon-p"># define the standalone generator model</span></div><div class="crayon-line" id="crayon-5e19f52d36978954617805-13"><span class="crayon-e">def </span><span class="crayon-e">define_generator</span><span class="crayon-sy">(</span><span class="crayon-v">latent_dim</span><span class="crayon-sy">)</span><span class="crayon-o">:</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36978954617805-14"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">Sequential</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36978954617805-15"><span class="crayon-h">	</span><span class="crayon-p"># foundation for 7x7 image</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36978954617805-16"><span class="crayon-h">	</span><span class="crayon-v">n_nodes</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-cn">128</span><span class="crayon-h"> </span><span class="crayon-o">*</span><span class="crayon-h"> </span><span class="crayon-cn">7</span><span class="crayon-h"> </span><span class="crayon-o">*</span><span class="crayon-h"> </span><span class="crayon-cn">7</span></div><div class="crayon-line" id="crayon-5e19f52d36978954617805-17"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">Dense</span><span class="crayon-sy">(</span><span class="crayon-v">n_nodes</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">input_dim</span><span class="crayon-o">=</span><span class="crayon-v">latent_dim</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36978954617805-18"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">LeakyReLU</span><span class="crayon-sy">(</span><span class="crayon-v">alpha</span><span class="crayon-o">=</span><span class="crayon-cn">0.2</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36978954617805-19"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">Reshape</span><span class="crayon-sy">(</span><span class="crayon-sy">(</span><span class="crayon-cn">7</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">7</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">128</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36978954617805-20"><span class="crayon-h">	</span><span class="crayon-p"># upsample to 14x14</span></div><div class="crayon-line" id="crayon-5e19f52d36978954617805-21"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">Conv2DTranspose</span><span class="crayon-sy">(</span><span class="crayon-cn">128</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-cn">4</span><span class="crayon-sy">,</span><span class="crayon-cn">4</span><span class="crayon-sy">)</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">strides</span><span class="crayon-o">=</span><span class="crayon-sy">(</span><span class="crayon-cn">2</span><span class="crayon-sy">,</span><span class="crayon-cn">2</span><span class="crayon-sy">)</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">padding</span><span class="crayon-o">=</span><span class="crayon-s">'same'</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36978954617805-22"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">LeakyReLU</span><span class="crayon-sy">(</span><span class="crayon-v">alpha</span><span class="crayon-o">=</span><span class="crayon-cn">0.2</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36978954617805-23"><span class="crayon-h">	</span><span class="crayon-p"># upsample to 28x28</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36978954617805-24"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">Conv2DTranspose</span><span class="crayon-sy">(</span><span class="crayon-cn">128</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-cn">4</span><span class="crayon-sy">,</span><span class="crayon-cn">4</span><span class="crayon-sy">)</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">strides</span><span class="crayon-o">=</span><span class="crayon-sy">(</span><span class="crayon-cn">2</span><span class="crayon-sy">,</span><span class="crayon-cn">2</span><span class="crayon-sy">)</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">padding</span><span class="crayon-o">=</span><span class="crayon-s">'same'</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36978954617805-25"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">LeakyReLU</span><span class="crayon-sy">(</span><span class="crayon-v">alpha</span><span class="crayon-o">=</span><span class="crayon-cn">0.2</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36978954617805-26"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">Conv2D</span><span class="crayon-sy">(</span><span class="crayon-cn">1</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-cn">7</span><span class="crayon-sy">,</span><span class="crayon-cn">7</span><span class="crayon-sy">)</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">activation</span><span class="crayon-o">=</span><span class="crayon-s">'sigmoid'</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">padding</span><span class="crayon-o">=</span><span class="crayon-s">'same'</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36978954617805-27"><span class="crayon-h">	</span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-v">model</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36978954617805-28">&nbsp;</div><div class="crayon-line" id="crayon-5e19f52d36978954617805-29"><span class="crayon-p"># generate points in latent space as input for the generator</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36978954617805-30"><span class="crayon-e">def </span><span class="crayon-e">generate_latent_points</span><span class="crayon-sy">(</span><span class="crayon-v">latent_dim</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">n_samples</span><span class="crayon-sy">)</span><span class="crayon-o">:</span></div><div class="crayon-line" id="crayon-5e19f52d36978954617805-31"><span class="crayon-h">	</span><span class="crayon-p"># generate points in the latent space</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36978954617805-32"><span class="crayon-h">	</span><span class="crayon-v">x_input</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">randn</span><span class="crayon-sy">(</span><span class="crayon-e ">latent_dim *</span><span class="crayon-h"> </span><span class="crayon-v">n_samples</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36978954617805-33"><span class="crayon-h">	</span><span class="crayon-p"># reshape into a batch of inputs for the network</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36978954617805-34"><span class="crayon-h">	</span><span class="crayon-v">x_input</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">x_input</span><span class="crayon-sy">.</span><span class="crayon-e">reshape</span><span class="crayon-sy">(</span><span class="crayon-v">n_samples</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">latent_dim</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36978954617805-35"><span class="crayon-h">	</span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-v">x_input</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36978954617805-36">&nbsp;</div><div class="crayon-line" id="crayon-5e19f52d36978954617805-37"><span class="crayon-p"># use the generator to generate n fake examples, with class labels</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36978954617805-38"><span class="crayon-e">def </span><span class="crayon-e">generate_fake_samples</span><span class="crayon-sy">(</span><span class="crayon-v">g_model</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">latent_dim</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">n_samples</span><span class="crayon-sy">)</span><span class="crayon-o">:</span></div><div class="crayon-line" id="crayon-5e19f52d36978954617805-39"><span class="crayon-h">	</span><span class="crayon-p"># generate points in latent space</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36978954617805-40"><span class="crayon-h">	</span><span class="crayon-v">x_input</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">generate_latent_points</span><span class="crayon-sy">(</span><span class="crayon-v">latent_dim</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">n_samples</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36978954617805-41"><span class="crayon-h">	</span><span class="crayon-p"># predict outputs</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36978954617805-42"><span class="crayon-h">	</span><span class="crayon-v">X</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">g_model</span><span class="crayon-sy">.</span><span class="crayon-e">predict</span><span class="crayon-sy">(</span><span class="crayon-v">x_input</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36978954617805-43"><span class="crayon-h">	</span><span class="crayon-p"># create 'fake' class labels (0)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36978954617805-44"><span class="crayon-h">	</span><span class="crayon-v">y</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">zeros</span><span class="crayon-sy">(</span><span class="crayon-sy">(</span><span class="crayon-v">n_samples</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">1</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36978954617805-45"><span class="crayon-h">	</span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-v">X</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">y</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36978954617805-46">&nbsp;</div><div class="crayon-line" id="crayon-5e19f52d36978954617805-47"><span class="crayon-p"># size of the latent space</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36978954617805-48"><span class="crayon-v">latent_dim</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-cn">100</span></div><div class="crayon-line" id="crayon-5e19f52d36978954617805-49"><span class="crayon-p"># define the discriminator model</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36978954617805-50"><span class="crayon-v">model</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">define_generator</span><span class="crayon-sy">(</span><span class="crayon-v">latent_dim</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36978954617805-51"><span class="crayon-p"># generate samples</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36978954617805-52"><span class="crayon-v">n_samples</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-cn">25</span></div><div class="crayon-line" id="crayon-5e19f52d36978954617805-53"><span class="crayon-v">X</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">_</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">generate_fake_samples</span><span class="crayon-sy">(</span><span class="crayon-v">model</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">latent_dim</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">n_samples</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36978954617805-54"><span class="crayon-p"># plot the generated samples</span></div><div class="crayon-line" id="crayon-5e19f52d36978954617805-55"><span class="crayon-st">for</span><span class="crayon-h"> </span><span class="crayon-i">i</span><span class="crayon-h"> </span><span class="crayon-st">in</span><span class="crayon-h"> </span><span class="crayon-e">range</span><span class="crayon-sy">(</span><span class="crayon-v">n_samples</span><span class="crayon-sy">)</span><span class="crayon-o">:</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36978954617805-56"><span class="crayon-h">	</span><span class="crayon-p"># define subplot</span></div><div class="crayon-line" id="crayon-5e19f52d36978954617805-57"><span class="crayon-h">	</span><span class="crayon-v">pyplot</span><span class="crayon-sy">.</span><span class="crayon-e">subplot</span><span class="crayon-sy">(</span><span class="crayon-cn">5</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">5</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">1</span><span class="crayon-h"> </span><span class="crayon-o">+</span><span class="crayon-h"> </span><span class="crayon-v">i</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36978954617805-58"><span class="crayon-h">	</span><span class="crayon-p"># turn off axis labels</span></div><div class="crayon-line" id="crayon-5e19f52d36978954617805-59"><span class="crayon-h">	</span><span class="crayon-v">pyplot</span><span class="crayon-sy">.</span><span class="crayon-e">axis</span><span class="crayon-sy">(</span><span class="crayon-s">'off'</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36978954617805-60"><span class="crayon-h">	</span><span class="crayon-p"># plot single image</span></div><div class="crayon-line" id="crayon-5e19f52d36978954617805-61"><span class="crayon-h">	</span><span class="crayon-v">pyplot</span><span class="crayon-sy">.</span><span class="crayon-e">imshow</span><span class="crayon-sy">(</span><span class="crayon-v">X</span><span class="crayon-sy">[</span><span class="crayon-v">i</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-o">:</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-o">:</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">0</span><span class="crayon-sy">]</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">cmap</span><span class="crayon-o">=</span><span class="crayon-s">'gray_r'</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36978954617805-62"><span class="crayon-p"># show the figure</span></div><div class="crayon-line" id="crayon-5e19f52d36978954617805-63"><span class="crayon-v">pyplot</span><span class="crayon-sy">.</span><span class="crayon-e">show</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span></div></div></td>
					</tr>
				</tbody></table>
			</div>
		</div>
<!-- [Format Time: 0.0017 seconds] -->
<p>Running the example generates 25 examples of fake MNIST images and visualizes them on a single plot of 5 by 5 images.</p>
<p>As the model is not trained, the generated images are completely random pixel values in [0, 1].</p>
<div id="attachment_8107" style="width: 1034px" class="wp-caption aligncenter"><img aria-describedby="caption-attachment-8107" class="size-large wp-image-8107" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/Example-of-25-MNIST-Images-Output-by-the-Untrained-Generator-Model-1024x768.png" alt="Example of 25 MNIST Images Output by the Untrained Generator Model" width="1024" height="768" srcset="https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/uploads/2019/04/Example-of-25-MNIST-Images-Output-by-the-Untrained-Generator-Model-1024x768.png 1024w, https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/uploads/2019/04/Example-of-25-MNIST-Images-Output-by-the-Untrained-Generator-Model-300x225.png 300w, https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/uploads/2019/04/Example-of-25-MNIST-Images-Output-by-the-Untrained-Generator-Model-768x576.png 768w, https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/uploads/2019/04/Example-of-25-MNIST-Images-Output-by-the-Untrained-Generator-Model.png 1280w" sizes="(max-width: 1024px) 100vw, 1024px"><p id="caption-attachment-8107" class="wp-caption-text">Example of 25 MNIST Images Output by the Untrained Generator Model</p></div>
<p>Now that we know how to define and use the generator model, the next step is to train the model.</p>
<h2>How to Train the Generator Model</h2>
<p>The weights in the generator model are updated based on the performance of the discriminator model.</p>
<p>When the discriminator is good at detecting fake samples, the generator is updated more, and when the discriminator model is relatively poor or confused when detecting fake samples, the generator model is updated less.</p>
<p>This defines the zero-sum or adversarial relationship between these two models.</p>
<p>There may be many ways to implement this using the Keras API, but perhaps the simplest approach is to create a new model that combines the generator and discriminator models.</p>
<p>Specifically, a new GAN model can be defined that stacks the generator and discriminator such that the generator receives as input random points in the latent space and generates samples that are fed into the discriminator model directly, classified, and the output of this larger model can be used to update the model weights of the generator.</p>
<p>To be clear, we are not talking about a new third model, just a new logical model that uses the already-defined layers and weights from the standalone generator and discriminator models.</p>
<p>Only the discriminator is concerned with distinguishing between real and fake examples, therefore the discriminator model can be trained in a standalone manner on examples of each, as we did in the section on the discriminator model above.</p>
<p>The generator model is only concerned with the discriminator’s performance on fake examples. Therefore, we will mark all of the layers in the discriminator as not trainable when it is part of the GAN model so that they can not be updated and overtrained on fake examples.</p>
<p>When training the generator via this logical GAN model, there is one more important change. We want the discriminator to think that the samples output by the generator are real, not fake. Therefore, when the generator is trained as part of the GAN model, we will mark the generated samples as real (class 1).</p>
<p><em><strong>Why would we want to do this?</strong></em></p>
<p>We can imagine that the discriminator will then classify the generated samples as not real (class 0) or a low probability of being real (0.3 or 0.5). The backpropagation process used to update the model weights will see this as a large error and will update the model weights (i.e. only the weights in the generator) to correct for this error, in turn making the generator better at generating good fake samples.</p>
<p>Let’s make this concrete.</p>
<ul>
<li><strong>Inputs</strong>: Point in latent space, e.g. a 100 element vector of Gaussian random numbers.</li>
<li><strong>Outputs</strong>: Binary classification, likelihood the sample is real (or fake).</li>
</ul>
<p>The <em>define_gan()</em> function below takes as arguments the already-defined generator and discriminator models and creates the new logical third model subsuming these two models. The weights in the discriminator are marked as not trainable, which only affects the weights as seen by the GAN model and not the standalone discriminator model.</p>
<p>The GAN model then uses the same binary cross entropy loss function as the discriminator and the efficient Adam version of stochastic gradient descent with the learning rate of 0.0002 and momentum 0.5, recommended when training deep convolutional GANs.</p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div id="crayon-5e19f52d36979227932166" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover" style="margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important; height: auto;">
		
			<div class="crayon-toolbar" data-settings=" mouseover overlay hide delay" style="font-size: 12px !important; height: 18px !important; line-height: 18px !important; margin-top: -19px; display: none; position: absolute; z-index: 2;"><span class="crayon-title"></span>
			<div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><div class="crayon-button crayon-nums-button crayon-pressed" title="Toggle Line Numbers"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div></div></div>
			<div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important;"></div>
			<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly="" style="tab-size: 4; font-size: 12px !important; line-height: 15px !important; z-index: 0; opacity: 0; overflow: hidden;"># define the combined generator and discriminator model, for updating the generator
def define_gan(g_model, d_model):
	# make weights in the discriminator not trainable
	d_model.trainable = False
	# connect them
	model = Sequential()
	# add generator
	model.add(g_model)
	# add the discriminator
	model.add(d_model)
	# compile model
	opt = Adam(lr=0.0002, beta_1=0.5)
	model.compile(loss='binary_crossentropy', optimizer=opt)
	return model</textarea></div>
			<div class="crayon-main" style="position: relative; z-index: 1; overflow: hidden;">
				<table class="crayon-table" style="">
					<tbody><tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-5e19f52d36979227932166-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36979227932166-2">2</div><div class="crayon-num" data-line="crayon-5e19f52d36979227932166-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36979227932166-4">4</div><div class="crayon-num" data-line="crayon-5e19f52d36979227932166-5">5</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36979227932166-6">6</div><div class="crayon-num" data-line="crayon-5e19f52d36979227932166-7">7</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36979227932166-8">8</div><div class="crayon-num" data-line="crayon-5e19f52d36979227932166-9">9</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36979227932166-10">10</div><div class="crayon-num" data-line="crayon-5e19f52d36979227932166-11">11</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36979227932166-12">12</div><div class="crayon-num" data-line="crayon-5e19f52d36979227932166-13">13</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36979227932166-14">14</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-5e19f52d36979227932166-1"><span class="crayon-p"># define the combined generator and discriminator model, for updating the generator</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36979227932166-2"><span class="crayon-e">def </span><span class="crayon-e">define_gan</span><span class="crayon-sy">(</span><span class="crayon-v">g_model</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">d_model</span><span class="crayon-sy">)</span><span class="crayon-o">:</span></div><div class="crayon-line" id="crayon-5e19f52d36979227932166-3"><span class="crayon-h">	</span><span class="crayon-p"># make weights in the discriminator not trainable</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36979227932166-4"><span class="crayon-h">	</span><span class="crayon-v">d_model</span><span class="crayon-sy">.</span><span class="crayon-v">trainable</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-t">False</span></div><div class="crayon-line" id="crayon-5e19f52d36979227932166-5"><span class="crayon-h">	</span><span class="crayon-p"># connect them</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36979227932166-6"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">Sequential</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36979227932166-7"><span class="crayon-h">	</span><span class="crayon-p"># add generator</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36979227932166-8"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-v">g_model</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36979227932166-9"><span class="crayon-h">	</span><span class="crayon-p"># add the discriminator</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36979227932166-10"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-v">d_model</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36979227932166-11"><span class="crayon-h">	</span><span class="crayon-p"># compile model</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36979227932166-12"><span class="crayon-h">	</span><span class="crayon-v">opt</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">Adam</span><span class="crayon-sy">(</span><span class="crayon-v">lr</span><span class="crayon-o">=</span><span class="crayon-cn">0.0002</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">beta_1</span><span class="crayon-o">=</span><span class="crayon-cn">0.5</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36979227932166-13"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">compile</span><span class="crayon-sy">(</span><span class="crayon-v">loss</span><span class="crayon-o">=</span><span class="crayon-s">'binary_crossentropy'</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">optimizer</span><span class="crayon-o">=</span><span class="crayon-v">opt</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36979227932166-14"><span class="crayon-h">	</span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-v">model</span></div></div></td>
					</tr>
				</tbody></table>
			</div>
		</div>
<!-- [Format Time: 0.0003 seconds] -->
<p>Making the discriminator not trainable is a clever trick in the Keras API.</p>
<p>The trainable property impacts the model after it is compiled. The discriminator model was compiled with trainable layers, therefore the model weights in those layers will be updated when the standalone model is updated via calls to the <em>train_on_batch()</em> function.</p>
<p>The discriminator model was then marked as not trainable, added to the GAN model, and compiled. In this model, the model weights of the discriminator model are not trainable and cannot be changed when the GAN model is updated via calls to the <em>train_on_batch()</em> function. This change in the trainable property does not impact the training of standalone discriminator model.</p>
<p>This behavior is described in the Keras API documentation here:</p>
<ul>
<li><a href="https://keras.io/getting-started/faq/#how-can-i-freeze-keras-layers">How can I “freeze” Keras layers?</a></li>
</ul>
<p>The complete example of creating the discriminator, generator, and composite model is listed below.</p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div id="crayon-5e19f52d3697b401228213" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover" style="margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important; height: auto;">
		
			<div class="crayon-toolbar" data-settings=" mouseover overlay hide delay" style="font-size: 12px !important; height: 18px !important; line-height: 18px !important; margin-top: -19px; display: none; position: absolute; z-index: 2;"><span class="crayon-title"></span>
			<div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><div class="crayon-button crayon-nums-button crayon-pressed" title="Toggle Line Numbers"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div></div></div>
			<div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important;"></div>
			<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly="" style="tab-size: 4; font-size: 12px !important; line-height: 15px !important; z-index: 0; opacity: 0; overflow: hidden;"># demonstrate creating the three models in the gan
from keras.optimizers import Adam
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import Reshape
from keras.layers import Flatten
from keras.layers import Conv2D
from keras.layers import Conv2DTranspose
from keras.layers import LeakyReLU
from keras.layers import Dropout
from keras.utils.vis_utils import plot_model

# define the standalone discriminator model
def define_discriminator(in_shape=(28,28,1)):
	model = Sequential()
	model.add(Conv2D(64, (3,3), strides=(2, 2), padding='same', input_shape=in_shape))
	model.add(LeakyReLU(alpha=0.2))
	model.add(Dropout(0.4))
	model.add(Conv2D(64, (3,3), strides=(2, 2), padding='same'))
	model.add(LeakyReLU(alpha=0.2))
	model.add(Dropout(0.4))
	model.add(Flatten())
	model.add(Dense(1, activation='sigmoid'))
	# compile model
	opt = Adam(lr=0.0002, beta_1=0.5)
	model.compile(loss='binary_crossentropy', optimizer=opt, metrics=['accuracy'])
	return model

# define the standalone generator model
def define_generator(latent_dim):
	model = Sequential()
	# foundation for 7x7 image
	n_nodes = 128 * 7 * 7
	model.add(Dense(n_nodes, input_dim=latent_dim))
	model.add(LeakyReLU(alpha=0.2))
	model.add(Reshape((7, 7, 128)))
	# upsample to 14x14
	model.add(Conv2DTranspose(128, (4,4), strides=(2,2), padding='same'))
	model.add(LeakyReLU(alpha=0.2))
	# upsample to 28x28
	model.add(Conv2DTranspose(128, (4,4), strides=(2,2), padding='same'))
	model.add(LeakyReLU(alpha=0.2))
	model.add(Conv2D(1, (7,7), activation='sigmoid', padding='same'))
	return model

# define the combined generator and discriminator model, for updating the generator
def define_gan(g_model, d_model):
	# make weights in the discriminator not trainable
	d_model.trainable = False
	# connect them
	model = Sequential()
	# add generator
	model.add(g_model)
	# add the discriminator
	model.add(d_model)
	# compile model
	opt = Adam(lr=0.0002, beta_1=0.5)
	model.compile(loss='binary_crossentropy', optimizer=opt)
	return model

# size of the latent space
latent_dim = 100
# create the discriminator
d_model = define_discriminator()
# create the generator
g_model = define_generator(latent_dim)
# create the gan
gan_model = define_gan(g_model, d_model)
# summarize gan model
gan_model.summary()
# plot gan model
plot_model(gan_model, to_file='gan_plot.png', show_shapes=True, show_layer_names=True)</textarea></div>
			<div class="crayon-main" style="position: relative; z-index: 1; overflow: hidden;">
				<table class="crayon-table" style="">
					<tbody><tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-5e19f52d3697b401228213-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3697b401228213-2">2</div><div class="crayon-num" data-line="crayon-5e19f52d3697b401228213-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3697b401228213-4">4</div><div class="crayon-num" data-line="crayon-5e19f52d3697b401228213-5">5</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3697b401228213-6">6</div><div class="crayon-num" data-line="crayon-5e19f52d3697b401228213-7">7</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3697b401228213-8">8</div><div class="crayon-num" data-line="crayon-5e19f52d3697b401228213-9">9</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3697b401228213-10">10</div><div class="crayon-num" data-line="crayon-5e19f52d3697b401228213-11">11</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3697b401228213-12">12</div><div class="crayon-num" data-line="crayon-5e19f52d3697b401228213-13">13</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3697b401228213-14">14</div><div class="crayon-num" data-line="crayon-5e19f52d3697b401228213-15">15</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3697b401228213-16">16</div><div class="crayon-num" data-line="crayon-5e19f52d3697b401228213-17">17</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3697b401228213-18">18</div><div class="crayon-num" data-line="crayon-5e19f52d3697b401228213-19">19</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3697b401228213-20">20</div><div class="crayon-num" data-line="crayon-5e19f52d3697b401228213-21">21</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3697b401228213-22">22</div><div class="crayon-num" data-line="crayon-5e19f52d3697b401228213-23">23</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3697b401228213-24">24</div><div class="crayon-num" data-line="crayon-5e19f52d3697b401228213-25">25</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3697b401228213-26">26</div><div class="crayon-num" data-line="crayon-5e19f52d3697b401228213-27">27</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3697b401228213-28">28</div><div class="crayon-num" data-line="crayon-5e19f52d3697b401228213-29">29</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3697b401228213-30">30</div><div class="crayon-num" data-line="crayon-5e19f52d3697b401228213-31">31</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3697b401228213-32">32</div><div class="crayon-num" data-line="crayon-5e19f52d3697b401228213-33">33</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3697b401228213-34">34</div><div class="crayon-num" data-line="crayon-5e19f52d3697b401228213-35">35</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3697b401228213-36">36</div><div class="crayon-num" data-line="crayon-5e19f52d3697b401228213-37">37</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3697b401228213-38">38</div><div class="crayon-num" data-line="crayon-5e19f52d3697b401228213-39">39</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3697b401228213-40">40</div><div class="crayon-num" data-line="crayon-5e19f52d3697b401228213-41">41</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3697b401228213-42">42</div><div class="crayon-num" data-line="crayon-5e19f52d3697b401228213-43">43</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3697b401228213-44">44</div><div class="crayon-num" data-line="crayon-5e19f52d3697b401228213-45">45</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3697b401228213-46">46</div><div class="crayon-num" data-line="crayon-5e19f52d3697b401228213-47">47</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3697b401228213-48">48</div><div class="crayon-num" data-line="crayon-5e19f52d3697b401228213-49">49</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3697b401228213-50">50</div><div class="crayon-num" data-line="crayon-5e19f52d3697b401228213-51">51</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3697b401228213-52">52</div><div class="crayon-num" data-line="crayon-5e19f52d3697b401228213-53">53</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3697b401228213-54">54</div><div class="crayon-num" data-line="crayon-5e19f52d3697b401228213-55">55</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3697b401228213-56">56</div><div class="crayon-num" data-line="crayon-5e19f52d3697b401228213-57">57</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3697b401228213-58">58</div><div class="crayon-num" data-line="crayon-5e19f52d3697b401228213-59">59</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3697b401228213-60">60</div><div class="crayon-num" data-line="crayon-5e19f52d3697b401228213-61">61</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3697b401228213-62">62</div><div class="crayon-num" data-line="crayon-5e19f52d3697b401228213-63">63</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3697b401228213-64">64</div><div class="crayon-num" data-line="crayon-5e19f52d3697b401228213-65">65</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3697b401228213-66">66</div><div class="crayon-num" data-line="crayon-5e19f52d3697b401228213-67">67</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3697b401228213-68">68</div><div class="crayon-num" data-line="crayon-5e19f52d3697b401228213-69">69</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3697b401228213-70">70</div><div class="crayon-num" data-line="crayon-5e19f52d3697b401228213-71">71</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3697b401228213-72">72</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-5e19f52d3697b401228213-1"><span class="crayon-p"># demonstrate creating the three models in the gan</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3697b401228213-2"><span class="crayon-e">from </span><span class="crayon-v">keras</span><span class="crayon-sy">.</span><span class="crayon-e">optimizers </span><span class="crayon-e">import </span><span class="crayon-e">Adam</span></div><div class="crayon-line" id="crayon-5e19f52d3697b401228213-3"><span class="crayon-e">from </span><span class="crayon-v">keras</span><span class="crayon-sy">.</span><span class="crayon-e">models </span><span class="crayon-e">import </span><span class="crayon-e">Sequential</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3697b401228213-4"><span class="crayon-e">from </span><span class="crayon-v">keras</span><span class="crayon-sy">.</span><span class="crayon-e">layers </span><span class="crayon-e">import </span><span class="crayon-e">Dense</span></div><div class="crayon-line" id="crayon-5e19f52d3697b401228213-5"><span class="crayon-e">from </span><span class="crayon-v">keras</span><span class="crayon-sy">.</span><span class="crayon-e">layers </span><span class="crayon-e">import </span><span class="crayon-e">Reshape</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3697b401228213-6"><span class="crayon-e">from </span><span class="crayon-v">keras</span><span class="crayon-sy">.</span><span class="crayon-e">layers </span><span class="crayon-e">import </span><span class="crayon-e">Flatten</span></div><div class="crayon-line" id="crayon-5e19f52d3697b401228213-7"><span class="crayon-e">from </span><span class="crayon-v">keras</span><span class="crayon-sy">.</span><span class="crayon-e">layers </span><span class="crayon-e">import </span><span class="crayon-e">Conv2D</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3697b401228213-8"><span class="crayon-e">from </span><span class="crayon-v">keras</span><span class="crayon-sy">.</span><span class="crayon-e">layers </span><span class="crayon-e">import </span><span class="crayon-e">Conv2DTranspose</span></div><div class="crayon-line" id="crayon-5e19f52d3697b401228213-9"><span class="crayon-e">from </span><span class="crayon-v">keras</span><span class="crayon-sy">.</span><span class="crayon-e">layers </span><span class="crayon-e">import </span><span class="crayon-e">LeakyReLU</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3697b401228213-10"><span class="crayon-e">from </span><span class="crayon-v">keras</span><span class="crayon-sy">.</span><span class="crayon-e">layers </span><span class="crayon-e">import </span><span class="crayon-e">Dropout</span></div><div class="crayon-line" id="crayon-5e19f52d3697b401228213-11"><span class="crayon-e">from </span><span class="crayon-v">keras</span><span class="crayon-sy">.</span><span class="crayon-v">utils</span><span class="crayon-sy">.</span><span class="crayon-e">vis_utils </span><span class="crayon-e">import </span><span class="crayon-v">plot_model</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3697b401228213-12">&nbsp;</div><div class="crayon-line" id="crayon-5e19f52d3697b401228213-13"><span class="crayon-p"># define the standalone discriminator model</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3697b401228213-14"><span class="crayon-e">def </span><span class="crayon-e">define_discriminator</span><span class="crayon-sy">(</span><span class="crayon-v">in_shape</span><span class="crayon-o">=</span><span class="crayon-sy">(</span><span class="crayon-cn">28</span><span class="crayon-sy">,</span><span class="crayon-cn">28</span><span class="crayon-sy">,</span><span class="crayon-cn">1</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span><span class="crayon-o">:</span></div><div class="crayon-line" id="crayon-5e19f52d3697b401228213-15"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">Sequential</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3697b401228213-16"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">Conv2D</span><span class="crayon-sy">(</span><span class="crayon-cn">64</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-cn">3</span><span class="crayon-sy">,</span><span class="crayon-cn">3</span><span class="crayon-sy">)</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">strides</span><span class="crayon-o">=</span><span class="crayon-sy">(</span><span class="crayon-cn">2</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">2</span><span class="crayon-sy">)</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">padding</span><span class="crayon-o">=</span><span class="crayon-s">'same'</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">input_shape</span><span class="crayon-o">=</span><span class="crayon-v">in_shape</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d3697b401228213-17"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">LeakyReLU</span><span class="crayon-sy">(</span><span class="crayon-v">alpha</span><span class="crayon-o">=</span><span class="crayon-cn">0.2</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3697b401228213-18"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">Dropout</span><span class="crayon-sy">(</span><span class="crayon-cn">0.4</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d3697b401228213-19"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">Conv2D</span><span class="crayon-sy">(</span><span class="crayon-cn">64</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-cn">3</span><span class="crayon-sy">,</span><span class="crayon-cn">3</span><span class="crayon-sy">)</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">strides</span><span class="crayon-o">=</span><span class="crayon-sy">(</span><span class="crayon-cn">2</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">2</span><span class="crayon-sy">)</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">padding</span><span class="crayon-o">=</span><span class="crayon-s">'same'</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3697b401228213-20"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">LeakyReLU</span><span class="crayon-sy">(</span><span class="crayon-v">alpha</span><span class="crayon-o">=</span><span class="crayon-cn">0.2</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d3697b401228213-21"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">Dropout</span><span class="crayon-sy">(</span><span class="crayon-cn">0.4</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3697b401228213-22"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">Flatten</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d3697b401228213-23"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">Dense</span><span class="crayon-sy">(</span><span class="crayon-cn">1</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">activation</span><span class="crayon-o">=</span><span class="crayon-s">'sigmoid'</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3697b401228213-24"><span class="crayon-h">	</span><span class="crayon-p"># compile model</span></div><div class="crayon-line" id="crayon-5e19f52d3697b401228213-25"><span class="crayon-h">	</span><span class="crayon-v">opt</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">Adam</span><span class="crayon-sy">(</span><span class="crayon-v">lr</span><span class="crayon-o">=</span><span class="crayon-cn">0.0002</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">beta_1</span><span class="crayon-o">=</span><span class="crayon-cn">0.5</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3697b401228213-26"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">compile</span><span class="crayon-sy">(</span><span class="crayon-v">loss</span><span class="crayon-o">=</span><span class="crayon-s">'binary_crossentropy'</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">optimizer</span><span class="crayon-o">=</span><span class="crayon-v">opt</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">metrics</span><span class="crayon-o">=</span><span class="crayon-sy">[</span><span class="crayon-s">'accuracy'</span><span class="crayon-sy">]</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d3697b401228213-27"><span class="crayon-h">	</span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-v">model</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3697b401228213-28">&nbsp;</div><div class="crayon-line" id="crayon-5e19f52d3697b401228213-29"><span class="crayon-p"># define the standalone generator model</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3697b401228213-30"><span class="crayon-e">def </span><span class="crayon-e">define_generator</span><span class="crayon-sy">(</span><span class="crayon-v">latent_dim</span><span class="crayon-sy">)</span><span class="crayon-o">:</span></div><div class="crayon-line" id="crayon-5e19f52d3697b401228213-31"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">Sequential</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3697b401228213-32"><span class="crayon-h">	</span><span class="crayon-p"># foundation for 7x7 image</span></div><div class="crayon-line" id="crayon-5e19f52d3697b401228213-33"><span class="crayon-h">	</span><span class="crayon-v">n_nodes</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-cn">128</span><span class="crayon-h"> </span><span class="crayon-o">*</span><span class="crayon-h"> </span><span class="crayon-cn">7</span><span class="crayon-h"> </span><span class="crayon-o">*</span><span class="crayon-h"> </span><span class="crayon-cn">7</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3697b401228213-34"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">Dense</span><span class="crayon-sy">(</span><span class="crayon-v">n_nodes</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">input_dim</span><span class="crayon-o">=</span><span class="crayon-v">latent_dim</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d3697b401228213-35"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">LeakyReLU</span><span class="crayon-sy">(</span><span class="crayon-v">alpha</span><span class="crayon-o">=</span><span class="crayon-cn">0.2</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3697b401228213-36"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">Reshape</span><span class="crayon-sy">(</span><span class="crayon-sy">(</span><span class="crayon-cn">7</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">7</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">128</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d3697b401228213-37"><span class="crayon-h">	</span><span class="crayon-p"># upsample to 14x14</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3697b401228213-38"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">Conv2DTranspose</span><span class="crayon-sy">(</span><span class="crayon-cn">128</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-cn">4</span><span class="crayon-sy">,</span><span class="crayon-cn">4</span><span class="crayon-sy">)</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">strides</span><span class="crayon-o">=</span><span class="crayon-sy">(</span><span class="crayon-cn">2</span><span class="crayon-sy">,</span><span class="crayon-cn">2</span><span class="crayon-sy">)</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">padding</span><span class="crayon-o">=</span><span class="crayon-s">'same'</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d3697b401228213-39"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">LeakyReLU</span><span class="crayon-sy">(</span><span class="crayon-v">alpha</span><span class="crayon-o">=</span><span class="crayon-cn">0.2</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3697b401228213-40"><span class="crayon-h">	</span><span class="crayon-p"># upsample to 28x28</span></div><div class="crayon-line" id="crayon-5e19f52d3697b401228213-41"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">Conv2DTranspose</span><span class="crayon-sy">(</span><span class="crayon-cn">128</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-cn">4</span><span class="crayon-sy">,</span><span class="crayon-cn">4</span><span class="crayon-sy">)</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">strides</span><span class="crayon-o">=</span><span class="crayon-sy">(</span><span class="crayon-cn">2</span><span class="crayon-sy">,</span><span class="crayon-cn">2</span><span class="crayon-sy">)</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">padding</span><span class="crayon-o">=</span><span class="crayon-s">'same'</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3697b401228213-42"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">LeakyReLU</span><span class="crayon-sy">(</span><span class="crayon-v">alpha</span><span class="crayon-o">=</span><span class="crayon-cn">0.2</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d3697b401228213-43"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">Conv2D</span><span class="crayon-sy">(</span><span class="crayon-cn">1</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-cn">7</span><span class="crayon-sy">,</span><span class="crayon-cn">7</span><span class="crayon-sy">)</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">activation</span><span class="crayon-o">=</span><span class="crayon-s">'sigmoid'</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">padding</span><span class="crayon-o">=</span><span class="crayon-s">'same'</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3697b401228213-44"><span class="crayon-h">	</span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-v">model</span></div><div class="crayon-line" id="crayon-5e19f52d3697b401228213-45">&nbsp;</div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3697b401228213-46"><span class="crayon-p"># define the combined generator and discriminator model, for updating the generator</span></div><div class="crayon-line" id="crayon-5e19f52d3697b401228213-47"><span class="crayon-e">def </span><span class="crayon-e">define_gan</span><span class="crayon-sy">(</span><span class="crayon-v">g_model</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">d_model</span><span class="crayon-sy">)</span><span class="crayon-o">:</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3697b401228213-48"><span class="crayon-h">	</span><span class="crayon-p"># make weights in the discriminator not trainable</span></div><div class="crayon-line" id="crayon-5e19f52d3697b401228213-49"><span class="crayon-h">	</span><span class="crayon-v">d_model</span><span class="crayon-sy">.</span><span class="crayon-v">trainable</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-t">False</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3697b401228213-50"><span class="crayon-h">	</span><span class="crayon-p"># connect them</span></div><div class="crayon-line" id="crayon-5e19f52d3697b401228213-51"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">Sequential</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3697b401228213-52"><span class="crayon-h">	</span><span class="crayon-p"># add generator</span></div><div class="crayon-line" id="crayon-5e19f52d3697b401228213-53"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-v">g_model</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3697b401228213-54"><span class="crayon-h">	</span><span class="crayon-p"># add the discriminator</span></div><div class="crayon-line" id="crayon-5e19f52d3697b401228213-55"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-v">d_model</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3697b401228213-56"><span class="crayon-h">	</span><span class="crayon-p"># compile model</span></div><div class="crayon-line" id="crayon-5e19f52d3697b401228213-57"><span class="crayon-h">	</span><span class="crayon-v">opt</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">Adam</span><span class="crayon-sy">(</span><span class="crayon-v">lr</span><span class="crayon-o">=</span><span class="crayon-cn">0.0002</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">beta_1</span><span class="crayon-o">=</span><span class="crayon-cn">0.5</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3697b401228213-58"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">compile</span><span class="crayon-sy">(</span><span class="crayon-v">loss</span><span class="crayon-o">=</span><span class="crayon-s">'binary_crossentropy'</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">optimizer</span><span class="crayon-o">=</span><span class="crayon-v">opt</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d3697b401228213-59"><span class="crayon-h">	</span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-v">model</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3697b401228213-60">&nbsp;</div><div class="crayon-line" id="crayon-5e19f52d3697b401228213-61"><span class="crayon-p"># size of the latent space</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3697b401228213-62"><span class="crayon-v">latent_dim</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-cn">100</span></div><div class="crayon-line" id="crayon-5e19f52d3697b401228213-63"><span class="crayon-p"># create the discriminator</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3697b401228213-64"><span class="crayon-v">d_model</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">define_discriminator</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d3697b401228213-65"><span class="crayon-p"># create the generator</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3697b401228213-66"><span class="crayon-v">g_model</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">define_generator</span><span class="crayon-sy">(</span><span class="crayon-v">latent_dim</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d3697b401228213-67"><span class="crayon-p"># create the gan</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3697b401228213-68"><span class="crayon-v">gan_model</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">define_gan</span><span class="crayon-sy">(</span><span class="crayon-v">g_model</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">d_model</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d3697b401228213-69"><span class="crayon-p"># summarize gan model</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3697b401228213-70"><span class="crayon-v">gan_model</span><span class="crayon-sy">.</span><span class="crayon-e">summary</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d3697b401228213-71"><span class="crayon-p"># plot gan model</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3697b401228213-72"><span class="crayon-e">plot_model</span><span class="crayon-sy">(</span><span class="crayon-v">gan_model</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">to_file</span><span class="crayon-o">=</span><span class="crayon-s">'gan_plot.png'</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">show_shapes</span><span class="crayon-o">=</span><span class="crayon-t">True</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">show_layer_names</span><span class="crayon-o">=</span><span class="crayon-t">True</span><span class="crayon-sy">)</span></div></div></td>
					</tr>
				</tbody></table>
			</div>
		</div>
<!-- [Format Time: 0.0022 seconds] -->
<p>Running the example first creates a summary of the composite model.</p>
<p>We can see that the model expects MNIST images as input and predict a single value as output.</p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div id="crayon-5e19f52d3697c669379510" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover" style="margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important; height: auto;">
		
			<div class="crayon-toolbar" data-settings=" mouseover overlay hide delay" style="font-size: 12px !important; height: 18px !important; line-height: 18px !important; margin-top: -19px; display: none; position: absolute; z-index: 2;"><span class="crayon-title"></span>
			<div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><div class="crayon-button crayon-nums-button crayon-pressed" title="Toggle Line Numbers"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-expand-button" title="Expand Code" style="display: none;"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div></div></div>
			<div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important;"></div>
			<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly="" style="tab-size: 4; font-size: 12px !important; line-height: 15px !important; z-index: 0; opacity: 0; overflow: hidden;">_________________________________________________________________
Layer (type)                 Output Shape              Param #
=================================================================
sequential_2 (Sequential)    (None, 28, 28, 1)         1164289
_________________________________________________________________
sequential_1 (Sequential)    (None, 1)                 40705
=================================================================
Total params: 1,204,994
Trainable params: 1,164,289
Non-trainable params: 40,705
_________________________________________________________________</textarea></div>
			<div class="crayon-main" style="position: relative; z-index: 1; overflow: hidden;">
				<table class="crayon-table" style="">
					<tbody><tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-5e19f52d3697c669379510-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3697c669379510-2">2</div><div class="crayon-num" data-line="crayon-5e19f52d3697c669379510-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3697c669379510-4">4</div><div class="crayon-num" data-line="crayon-5e19f52d3697c669379510-5">5</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3697c669379510-6">6</div><div class="crayon-num" data-line="crayon-5e19f52d3697c669379510-7">7</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3697c669379510-8">8</div><div class="crayon-num" data-line="crayon-5e19f52d3697c669379510-9">9</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3697c669379510-10">10</div><div class="crayon-num" data-line="crayon-5e19f52d3697c669379510-11">11</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-5e19f52d3697c669379510-1">_________________________________________________________________</div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3697c669379510-2">Layer (type)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Output Shape&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Param #</div><div class="crayon-line" id="crayon-5e19f52d3697c669379510-3">=================================================================</div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3697c669379510-4">sequential_2 (Sequential)&nbsp;&nbsp;&nbsp;&nbsp;(None, 28, 28, 1)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1164289</div><div class="crayon-line" id="crayon-5e19f52d3697c669379510-5">_________________________________________________________________</div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3697c669379510-6">sequential_1 (Sequential)&nbsp;&nbsp;&nbsp;&nbsp;(None, 1)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 40705</div><div class="crayon-line" id="crayon-5e19f52d3697c669379510-7">=================================================================</div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3697c669379510-8">Total params: 1,204,994</div><div class="crayon-line" id="crayon-5e19f52d3697c669379510-9">Trainable params: 1,164,289</div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3697c669379510-10">Non-trainable params: 40,705</div><div class="crayon-line" id="crayon-5e19f52d3697c669379510-11">_________________________________________________________________</div></div></td>
					</tr>
				</tbody></table>
			</div>
		</div>
<!-- [Format Time: 0.0000 seconds] -->
<p>A plot of the model is also created and we can see that the model expects a 100-element point in latent space as input and will predict a single output classification label.</p>
<p><strong>Note</strong>: creating this plot assumes that the pydot and graphviz libraries are installed. If this is a problem, you can comment out the import statement for the <em>plot_model</em> function and the call to the <em>plot_model()</em> function.</p>
<div id="attachment_8108" style="width: 450px" class="wp-caption aligncenter"><img aria-describedby="caption-attachment-8108" class="size-full wp-image-8108" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/Plot-of-the-Composite-Generator-and-Discriminator-Model-in-the-MNIST-GAN.png" alt="Plot of the Composite Generator and Discriminator Model in the MNIST GAN" width="440" height="281" srcset="https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/uploads/2019/04/Plot-of-the-Composite-Generator-and-Discriminator-Model-in-the-MNIST-GAN.png 440w, https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/uploads/2019/04/Plot-of-the-Composite-Generator-and-Discriminator-Model-in-the-MNIST-GAN-300x192.png 300w" sizes="(max-width: 440px) 100vw, 440px"><p id="caption-attachment-8108" class="wp-caption-text">Plot of the Composite Generator and Discriminator Model in the MNIST GAN</p></div>
<p>Training the composite model involves generating a batch worth of points in the latent space via the <em>generate_latent_points()</em> function in the previous section, and <em>class=1</em> labels and calling the <em>train_on_batch()</em> function.</p>
<p>The <em>train_gan()</em> function below demonstrates this, although is pretty simple as only the generator will be updated each epoch, leaving the discriminator with default model weights.</p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div id="crayon-5e19f52d3697d136011505" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover" style="margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important; height: auto;">
		
			<div class="crayon-toolbar" data-settings=" mouseover overlay hide delay" style="font-size: 12px !important; height: 18px !important; line-height: 18px !important; margin-top: -19px; display: none; position: absolute; z-index: 2;"><span class="crayon-title"></span>
			<div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><div class="crayon-button crayon-nums-button crayon-pressed" title="Toggle Line Numbers"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-expand-button" title="Expand Code" style="display: none;"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div></div></div>
			<div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important;"></div>
			<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly="" style="tab-size: 4; font-size: 12px !important; line-height: 15px !important; z-index: 0; opacity: 0; overflow: hidden;"># train the composite model
def train_gan(gan_model, latent_dim, n_epochs=100, n_batch=256):
	# manually enumerate epochs
	for i in range(n_epochs):
		# prepare points in latent space as input for the generator
		x_gan = generate_latent_points(latent_dim, n_batch)
		# create inverted labels for the fake samples
		y_gan = ones((n_batch, 1))
		# update the generator via the discriminator's error
		gan_model.train_on_batch(x_gan, y_gan)</textarea></div>
			<div class="crayon-main" style="position: relative; z-index: 1; overflow: hidden;">
				<table class="crayon-table" style="">
					<tbody><tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-5e19f52d3697d136011505-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3697d136011505-2">2</div><div class="crayon-num" data-line="crayon-5e19f52d3697d136011505-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3697d136011505-4">4</div><div class="crayon-num" data-line="crayon-5e19f52d3697d136011505-5">5</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3697d136011505-6">6</div><div class="crayon-num" data-line="crayon-5e19f52d3697d136011505-7">7</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3697d136011505-8">8</div><div class="crayon-num" data-line="crayon-5e19f52d3697d136011505-9">9</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3697d136011505-10">10</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-5e19f52d3697d136011505-1"><span class="crayon-p"># train the composite model</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3697d136011505-2"><span class="crayon-e">def </span><span class="crayon-e">train_gan</span><span class="crayon-sy">(</span><span class="crayon-v">gan_model</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">latent_dim</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">n_epochs</span><span class="crayon-o">=</span><span class="crayon-cn">100</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">n_batch</span><span class="crayon-o">=</span><span class="crayon-cn">256</span><span class="crayon-sy">)</span><span class="crayon-o">:</span></div><div class="crayon-line" id="crayon-5e19f52d3697d136011505-3"><span class="crayon-h">	</span><span class="crayon-p"># manually enumerate epochs</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3697d136011505-4"><span class="crayon-h">	</span><span class="crayon-st">for</span><span class="crayon-h"> </span><span class="crayon-i">i</span><span class="crayon-h"> </span><span class="crayon-st">in</span><span class="crayon-h"> </span><span class="crayon-e">range</span><span class="crayon-sy">(</span><span class="crayon-v">n_epochs</span><span class="crayon-sy">)</span><span class="crayon-o">:</span></div><div class="crayon-line" id="crayon-5e19f52d3697d136011505-5"><span class="crayon-h">		</span><span class="crayon-p"># prepare points in latent space as input for the generator</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3697d136011505-6"><span class="crayon-h">		</span><span class="crayon-v">x_gan</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">generate_latent_points</span><span class="crayon-sy">(</span><span class="crayon-v">latent_dim</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">n_batch</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d3697d136011505-7"><span class="crayon-h">		</span><span class="crayon-p"># create inverted labels for the fake samples</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3697d136011505-8"><span class="crayon-h">		</span><span class="crayon-v">y_gan</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">ones</span><span class="crayon-sy">(</span><span class="crayon-sy">(</span><span class="crayon-v">n_batch</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">1</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d3697d136011505-9"><span class="crayon-h">		</span><span class="crayon-p"># update the generator via the discriminator's error</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3697d136011505-10"><span class="crayon-h">		</span><span class="crayon-v">gan_model</span><span class="crayon-sy">.</span><span class="crayon-e">train_on_batch</span><span class="crayon-sy">(</span><span class="crayon-v">x_gan</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">y_gan</span><span class="crayon-sy">)</span></div></div></td>
					</tr>
				</tbody></table>
			</div>
		</div>
<!-- [Format Time: 0.0003 seconds] -->
<p>Instead, what is required is that we first update the discriminator model with real and fake samples, then update the generator via the composite model.</p>
<p>This requires combining elements from the <em>train_discriminator()</em> function defined in the discriminator section above and the <em>train_gan()</em> function defined above. It also requires that we enumerate over both epochs and batches within in an epoch.</p>
<p>The complete train function for updating the discriminator model and the generator (via the composite model) is listed below.</p>
<p>There are a few things to note in this model training function.</p>
<p>First, the number of batches within an epoch is defined by how many times the batch size divides into the training dataset. We have a dataset size of 60K samples, so with rounding down, there are 234 batches per epoch.</p>
<p>The discriminator model is updated once per batch by combining one half a batch of fake and real examples into a single batch via the <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.vstack.html">vstack() NumPy function</a>. You could update the discriminator with each half batch separately (recommended for more complex datasets) but combining the samples into a single batch will be faster over a long run, especially when training on GPU hardware.</p>
<p>Finally, we report the loss each batch. It is critical to keep an eye on the loss over batches. The reason for this is that a crash in the discriminator loss indicates that the generator model has started generating rubbish examples that the discriminator can easily discriminate.</p>
<p>Monitor the discriminator loss and expect it to hover around 0.5 to 0.8 per batch on this dataset. The generator loss is less critical and may hover between 0.5 and 2 or higher on this dataset. A clever programmer might even attempt to detect the crashing loss of the discriminator, halt, and then restart the training process.</p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div id="crayon-5e19f52d3697e568442925" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover" style="margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important; height: auto;">
		
			<div class="crayon-toolbar" data-settings=" mouseover overlay hide delay" style="font-size: 12px !important; height: 18px !important; line-height: 18px !important; margin-top: -19px; display: none; position: absolute; z-index: 2;"><span class="crayon-title"></span>
			<div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><div class="crayon-button crayon-nums-button crayon-pressed" title="Toggle Line Numbers"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div></div></div>
			<div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important;"></div>
			<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly="" style="tab-size: 4; font-size: 12px !important; line-height: 15px !important; z-index: 0; opacity: 0; overflow: hidden;"># train the generator and discriminator
def train(g_model, d_model, gan_model, dataset, latent_dim, n_epochs=100, n_batch=256):
	bat_per_epo = int(dataset.shape[0] / n_batch)
	half_batch = int(n_batch / 2)
	# manually enumerate epochs
	for i in range(n_epochs):
		# enumerate batches over the training set
		for j in range(bat_per_epo):
			# get randomly selected 'real' samples
			X_real, y_real = generate_real_samples(dataset, half_batch)
			# generate 'fake' examples
			X_fake, y_fake = generate_fake_samples(g_model, latent_dim, half_batch)
			# create training set for the discriminator
			X, y = vstack((X_real, X_fake)), vstack((y_real, y_fake))
			# update discriminator model weights
			d_loss, _ = d_model.train_on_batch(X, y)
			# prepare points in latent space as input for the generator
			X_gan = generate_latent_points(latent_dim, n_batch)
			# create inverted labels for the fake samples
			y_gan = ones((n_batch, 1))
			# update the generator via the discriminator's error
			g_loss = gan_model.train_on_batch(X_gan, y_gan)
			# summarize loss on this batch
			print('&gt;%d, %d/%d, d=%.3f, g=%.3f' % (i+1, j+1, bat_per_epo, d_loss, g_loss))</textarea></div>
			<div class="crayon-main" style="position: relative; z-index: 1; overflow: hidden;">
				<table class="crayon-table" style="">
					<tbody><tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-5e19f52d3697e568442925-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3697e568442925-2">2</div><div class="crayon-num" data-line="crayon-5e19f52d3697e568442925-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3697e568442925-4">4</div><div class="crayon-num" data-line="crayon-5e19f52d3697e568442925-5">5</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3697e568442925-6">6</div><div class="crayon-num" data-line="crayon-5e19f52d3697e568442925-7">7</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3697e568442925-8">8</div><div class="crayon-num" data-line="crayon-5e19f52d3697e568442925-9">9</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3697e568442925-10">10</div><div class="crayon-num" data-line="crayon-5e19f52d3697e568442925-11">11</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3697e568442925-12">12</div><div class="crayon-num" data-line="crayon-5e19f52d3697e568442925-13">13</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3697e568442925-14">14</div><div class="crayon-num" data-line="crayon-5e19f52d3697e568442925-15">15</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3697e568442925-16">16</div><div class="crayon-num" data-line="crayon-5e19f52d3697e568442925-17">17</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3697e568442925-18">18</div><div class="crayon-num" data-line="crayon-5e19f52d3697e568442925-19">19</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3697e568442925-20">20</div><div class="crayon-num" data-line="crayon-5e19f52d3697e568442925-21">21</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3697e568442925-22">22</div><div class="crayon-num" data-line="crayon-5e19f52d3697e568442925-23">23</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3697e568442925-24">24</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-5e19f52d3697e568442925-1"><span class="crayon-p"># train the generator and discriminator</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3697e568442925-2"><span class="crayon-e">def </span><span class="crayon-e">train</span><span class="crayon-sy">(</span><span class="crayon-v">g_model</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">d_model</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">gan_model</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">dataset</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">latent_dim</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">n_epochs</span><span class="crayon-o">=</span><span class="crayon-cn">100</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">n_batch</span><span class="crayon-o">=</span><span class="crayon-cn">256</span><span class="crayon-sy">)</span><span class="crayon-o">:</span></div><div class="crayon-line" id="crayon-5e19f52d3697e568442925-3"><span class="crayon-h">	</span><span class="crayon-v">bat_per_epo</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-t">int</span><span class="crayon-sy">(</span><span class="crayon-v">dataset</span><span class="crayon-sy">.</span><span class="crayon-v">shape</span><span class="crayon-sy">[</span><span class="crayon-cn">0</span><span class="crayon-sy">]</span><span class="crayon-h"> </span><span class="crayon-o">/</span><span class="crayon-h"> </span><span class="crayon-v">n_batch</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3697e568442925-4"><span class="crayon-h">	</span><span class="crayon-v">half_batch</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-t">int</span><span class="crayon-sy">(</span><span class="crayon-v">n_batch</span><span class="crayon-h"> </span><span class="crayon-o">/</span><span class="crayon-h"> </span><span class="crayon-cn">2</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d3697e568442925-5"><span class="crayon-h">	</span><span class="crayon-p"># manually enumerate epochs</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3697e568442925-6"><span class="crayon-h">	</span><span class="crayon-st">for</span><span class="crayon-h"> </span><span class="crayon-i">i</span><span class="crayon-h"> </span><span class="crayon-st">in</span><span class="crayon-h"> </span><span class="crayon-e">range</span><span class="crayon-sy">(</span><span class="crayon-v">n_epochs</span><span class="crayon-sy">)</span><span class="crayon-o">:</span></div><div class="crayon-line" id="crayon-5e19f52d3697e568442925-7"><span class="crayon-h">		</span><span class="crayon-p"># enumerate batches over the training set</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3697e568442925-8"><span class="crayon-h">		</span><span class="crayon-st">for</span><span class="crayon-h"> </span><span class="crayon-i">j</span><span class="crayon-h"> </span><span class="crayon-st">in</span><span class="crayon-h"> </span><span class="crayon-e">range</span><span class="crayon-sy">(</span><span class="crayon-v">bat_per_epo</span><span class="crayon-sy">)</span><span class="crayon-o">:</span></div><div class="crayon-line" id="crayon-5e19f52d3697e568442925-9"><span class="crayon-h">			</span><span class="crayon-p"># get randomly selected 'real' samples</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3697e568442925-10"><span class="crayon-h">			</span><span class="crayon-v">X_real</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">y_real</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">generate_real_samples</span><span class="crayon-sy">(</span><span class="crayon-v">dataset</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">half_batch</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d3697e568442925-11"><span class="crayon-h">			</span><span class="crayon-p"># generate 'fake' examples</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3697e568442925-12"><span class="crayon-h">			</span><span class="crayon-v">X_fake</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">y_fake</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">generate_fake_samples</span><span class="crayon-sy">(</span><span class="crayon-v">g_model</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">latent_dim</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">half_batch</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d3697e568442925-13"><span class="crayon-h">			</span><span class="crayon-p"># create training set for the discriminator</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3697e568442925-14"><span class="crayon-h">			</span><span class="crayon-v">X</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">y</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">vstack</span><span class="crayon-sy">(</span><span class="crayon-sy">(</span><span class="crayon-v">X_real</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">X_fake</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-e">vstack</span><span class="crayon-sy">(</span><span class="crayon-sy">(</span><span class="crayon-v">y_real</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">y_fake</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d3697e568442925-15"><span class="crayon-h">			</span><span class="crayon-p"># update discriminator model weights</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3697e568442925-16"><span class="crayon-h">			</span><span class="crayon-v">d_loss</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">_</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">d_model</span><span class="crayon-sy">.</span><span class="crayon-e">train_on_batch</span><span class="crayon-sy">(</span><span class="crayon-v">X</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">y</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d3697e568442925-17"><span class="crayon-h">			</span><span class="crayon-p"># prepare points in latent space as input for the generator</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3697e568442925-18"><span class="crayon-h">			</span><span class="crayon-v">X_gan</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">generate_latent_points</span><span class="crayon-sy">(</span><span class="crayon-v">latent_dim</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">n_batch</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d3697e568442925-19"><span class="crayon-h">			</span><span class="crayon-p"># create inverted labels for the fake samples</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3697e568442925-20"><span class="crayon-h">			</span><span class="crayon-v">y_gan</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">ones</span><span class="crayon-sy">(</span><span class="crayon-sy">(</span><span class="crayon-v">n_batch</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">1</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d3697e568442925-21"><span class="crayon-h">			</span><span class="crayon-p"># update the generator via the discriminator's error</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3697e568442925-22"><span class="crayon-h">			</span><span class="crayon-v">g_loss</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">gan_model</span><span class="crayon-sy">.</span><span class="crayon-e">train_on_batch</span><span class="crayon-sy">(</span><span class="crayon-v">X_gan</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">y_gan</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d3697e568442925-23"><span class="crayon-h">			</span><span class="crayon-p"># summarize loss on this batch</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3697e568442925-24"><span class="crayon-h">			</span><span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-s">'&gt;%d, %d/%d, d=%.3f, g=%.3f'</span><span class="crayon-h"> </span><span class="crayon-o">%</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-v">i</span><span class="crayon-o">+</span><span class="crayon-cn">1</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">j</span><span class="crayon-o">+</span><span class="crayon-cn">1</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">bat_per_epo</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">d_loss</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">g_loss</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div></div></td>
					</tr>
				</tbody></table>
			</div>
		</div>
<!-- [Format Time: 0.0010 seconds] -->
<p>We almost have everything we need to develop a GAN for the MNIST handwritten digits dataset.</p>
<p>One remaining aspect is the evaluation of the model.</p>
<h2>How to Evaluate GAN Model Performance</h2>
<p>Generally, there are no objective ways to evaluate the performance of a GAN model.</p>
<p>We cannot calculate this objective error score for generated images. It might be possible in the case of MNIST images because the images are so well constrained, but in general, it is not possible (yet).</p>
<p>Instead, images must be subjectively evaluated for quality by a human operator. This means that we cannot know when to stop training without looking at examples of generated images. In turn, the adversarial nature of the training process means that the generator is changing after every batch, meaning that once “<em>good enough</em>” images can be generated, the subjective quality of the images may then begin to vary, improve, or even degrade with subsequent updates.</p>
<p>There are three ways to handle this complex training situation.</p>
<ol>
<li>Periodically evaluate the classification accuracy of the discriminator on real and fake images.</li>
<li>Periodically generate many images and save them to file for subjective review.</li>
<li>Periodically save the generator model.</li>
</ol>
<p>All three of these actions can be performed at the same time for a given training epoch, such as every five or 10 training epochs. The result will be a saved generator model for which we have a way of subjectively assessing the quality of its output and objectively knowing how well the discriminator was fooled at the time the model was saved.</p>
<p>Training the GAN over many epochs, such as hundreds or thousands of epochs, will result in many snapshots of the model that can be inspected and from which specific outputs and models can be cherry-picked for later use.</p>
<p>First, we can define a function called <em>summarize_performance()</em> function that will summarize the performance of the discriminator model. It does this by retrieving a sample of real MNIST images, as well as generating the same number of fake MNIST images with the generator model, then evaluating the classification accuracy of the discriminator model on each sample and reporting these scores.</p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div id="crayon-5e19f52d36980142408184" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover" style="margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important; height: auto;">
		
			<div class="crayon-toolbar" data-settings=" mouseover overlay hide delay" style="font-size: 12px !important; height: 18px !important; line-height: 18px !important; margin-top: -19px; display: none; position: absolute; z-index: 2;"><span class="crayon-title"></span>
			<div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><div class="crayon-button crayon-nums-button crayon-pressed" title="Toggle Line Numbers"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div></div></div>
			<div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important;"></div>
			<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly="" style="tab-size: 4; font-size: 12px !important; line-height: 15px !important; z-index: 0; opacity: 0; overflow: hidden;"># evaluate the discriminator, plot generated images, save generator model
def summarize_performance(epoch, g_model, d_model, dataset, latent_dim, n_samples=100):
	# prepare real samples
	X_real, y_real = generate_real_samples(dataset, n_samples)
	# evaluate discriminator on real examples
	_, acc_real = d_model.evaluate(X_real, y_real, verbose=0)
	# prepare fake examples
	x_fake, y_fake = generate_fake_samples(g_model, latent_dim, n_samples)
	# evaluate discriminator on fake examples
	_, acc_fake = d_model.evaluate(x_fake, y_fake, verbose=0)
	# summarize discriminator performance
	print('&gt;Accuracy real: %.0f%%, fake: %.0f%%' % (acc_real*100, acc_fake*100))</textarea></div>
			<div class="crayon-main" style="position: relative; z-index: 1; overflow: hidden;">
				<table class="crayon-table" style="">
					<tbody><tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-5e19f52d36980142408184-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36980142408184-2">2</div><div class="crayon-num" data-line="crayon-5e19f52d36980142408184-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36980142408184-4">4</div><div class="crayon-num" data-line="crayon-5e19f52d36980142408184-5">5</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36980142408184-6">6</div><div class="crayon-num" data-line="crayon-5e19f52d36980142408184-7">7</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36980142408184-8">8</div><div class="crayon-num" data-line="crayon-5e19f52d36980142408184-9">9</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36980142408184-10">10</div><div class="crayon-num" data-line="crayon-5e19f52d36980142408184-11">11</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36980142408184-12">12</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-5e19f52d36980142408184-1"><span class="crayon-p"># evaluate the discriminator, plot generated images, save generator model</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36980142408184-2"><span class="crayon-e">def </span><span class="crayon-e">summarize_performance</span><span class="crayon-sy">(</span><span class="crayon-v">epoch</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">g_model</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">d_model</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">dataset</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">latent_dim</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">n_samples</span><span class="crayon-o">=</span><span class="crayon-cn">100</span><span class="crayon-sy">)</span><span class="crayon-o">:</span></div><div class="crayon-line" id="crayon-5e19f52d36980142408184-3"><span class="crayon-h">	</span><span class="crayon-p"># prepare real samples</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36980142408184-4"><span class="crayon-h">	</span><span class="crayon-v">X_real</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">y_real</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">generate_real_samples</span><span class="crayon-sy">(</span><span class="crayon-v">dataset</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">n_samples</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36980142408184-5"><span class="crayon-h">	</span><span class="crayon-p"># evaluate discriminator on real examples</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36980142408184-6"><span class="crayon-h">	</span><span class="crayon-v">_</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">acc_real</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">d_model</span><span class="crayon-sy">.</span><span class="crayon-e">evaluate</span><span class="crayon-sy">(</span><span class="crayon-v">X_real</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">y_real</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">verbose</span><span class="crayon-o">=</span><span class="crayon-cn">0</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36980142408184-7"><span class="crayon-h">	</span><span class="crayon-p"># prepare fake examples</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36980142408184-8"><span class="crayon-h">	</span><span class="crayon-v">x_fake</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">y_fake</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">generate_fake_samples</span><span class="crayon-sy">(</span><span class="crayon-v">g_model</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">latent_dim</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">n_samples</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36980142408184-9"><span class="crayon-h">	</span><span class="crayon-p"># evaluate discriminator on fake examples</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36980142408184-10"><span class="crayon-h">	</span><span class="crayon-v">_</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">acc_fake</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">d_model</span><span class="crayon-sy">.</span><span class="crayon-e">evaluate</span><span class="crayon-sy">(</span><span class="crayon-v">x_fake</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">y_fake</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">verbose</span><span class="crayon-o">=</span><span class="crayon-cn">0</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36980142408184-11"><span class="crayon-h">	</span><span class="crayon-p"># summarize discriminator performance</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36980142408184-12"><span class="crayon-h">	</span><span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-s">'&gt;Accuracy real: %.0f%%, fake: %.0f%%'</span><span class="crayon-h"> </span><span class="crayon-o">%</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-e ">acc_real*</span><span class="crayon-cn">100</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-e ">acc_fake*</span><span class="crayon-cn">100</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div></div></td>
					</tr>
				</tbody></table>
			</div>
		</div>
<!-- [Format Time: 0.0005 seconds] -->
<p>This function can be called from the <em>train()</em> function based on the current epoch number, such as every 10 epochs.</p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div id="crayon-5e19f52d36981582282643" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover" style="margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important; height: auto;">
		
			<div class="crayon-toolbar" data-settings=" mouseover overlay hide delay" style="font-size: 12px !important; height: 18px !important; line-height: 18px !important; margin-top: -19px; display: none; position: absolute; z-index: 2;"><span class="crayon-title"></span>
			<div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><div class="crayon-button crayon-nums-button crayon-pressed" title="Toggle Line Numbers"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div></div></div>
			<div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important;"></div>
			<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly="" style="tab-size: 4; font-size: 12px !important; line-height: 15px !important; z-index: 0; opacity: 0; overflow: hidden;"># train the generator and discriminator
def train(g_model, d_model, gan_model, dataset, latent_dim, n_epochs=100, n_batch=256):
	bat_per_epo = int(dataset.shape[0] / n_batch)
	half_batch = int(n_batch / 2)
	# manually enumerate epochs
	for i in range(n_epochs):
	...
	# evaluate the model performance, sometimes
	if (i+1) % 10 == 0:
		summarize_performance(i, g_model, d_model, dataset, latent_dim)</textarea></div>
			<div class="crayon-main" style="position: relative; z-index: 1; overflow: hidden;">
				<table class="crayon-table" style="">
					<tbody><tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-5e19f52d36981582282643-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36981582282643-2">2</div><div class="crayon-num" data-line="crayon-5e19f52d36981582282643-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36981582282643-4">4</div><div class="crayon-num" data-line="crayon-5e19f52d36981582282643-5">5</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36981582282643-6">6</div><div class="crayon-num" data-line="crayon-5e19f52d36981582282643-7">7</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36981582282643-8">8</div><div class="crayon-num" data-line="crayon-5e19f52d36981582282643-9">9</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36981582282643-10">10</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-5e19f52d36981582282643-1"><span class="crayon-p"># train the generator and discriminator</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36981582282643-2"><span class="crayon-e">def </span><span class="crayon-e">train</span><span class="crayon-sy">(</span><span class="crayon-v">g_model</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">d_model</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">gan_model</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">dataset</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">latent_dim</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">n_epochs</span><span class="crayon-o">=</span><span class="crayon-cn">100</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">n_batch</span><span class="crayon-o">=</span><span class="crayon-cn">256</span><span class="crayon-sy">)</span><span class="crayon-o">:</span></div><div class="crayon-line" id="crayon-5e19f52d36981582282643-3"><span class="crayon-h">	</span><span class="crayon-v">bat_per_epo</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-t">int</span><span class="crayon-sy">(</span><span class="crayon-v">dataset</span><span class="crayon-sy">.</span><span class="crayon-v">shape</span><span class="crayon-sy">[</span><span class="crayon-cn">0</span><span class="crayon-sy">]</span><span class="crayon-h"> </span><span class="crayon-o">/</span><span class="crayon-h"> </span><span class="crayon-v">n_batch</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36981582282643-4"><span class="crayon-h">	</span><span class="crayon-v">half_batch</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-t">int</span><span class="crayon-sy">(</span><span class="crayon-v">n_batch</span><span class="crayon-h"> </span><span class="crayon-o">/</span><span class="crayon-h"> </span><span class="crayon-cn">2</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36981582282643-5"><span class="crayon-h">	</span><span class="crayon-p"># manually enumerate epochs</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36981582282643-6"><span class="crayon-h">	</span><span class="crayon-st">for</span><span class="crayon-h"> </span><span class="crayon-i">i</span><span class="crayon-h"> </span><span class="crayon-st">in</span><span class="crayon-h"> </span><span class="crayon-e">range</span><span class="crayon-sy">(</span><span class="crayon-v">n_epochs</span><span class="crayon-sy">)</span><span class="crayon-o">:</span></div><div class="crayon-line" id="crayon-5e19f52d36981582282643-7"><span class="crayon-h">	</span><span class="crayon-sy">.</span><span class="crayon-sy">.</span><span class="crayon-sy">.</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36981582282643-8"><span class="crayon-h">	</span><span class="crayon-p"># evaluate the model performance, sometimes</span></div><div class="crayon-line" id="crayon-5e19f52d36981582282643-9"><span class="crayon-h">	</span><span class="crayon-st">if</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-v">i</span><span class="crayon-o">+</span><span class="crayon-cn">1</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-o">%</span><span class="crayon-h"> </span><span class="crayon-cn">10</span><span class="crayon-h"> </span><span class="crayon-o">==</span><span class="crayon-h"> </span><span class="crayon-cn">0</span><span class="crayon-o">:</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36981582282643-10"><span class="crayon-h">		</span><span class="crayon-e">summarize_performance</span><span class="crayon-sy">(</span><span class="crayon-v">i</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">g_model</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">d_model</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">dataset</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">latent_dim</span><span class="crayon-sy">)</span></div></div></td>
					</tr>
				</tbody></table>
			</div>
		</div>
<!-- [Format Time: 0.0004 seconds] -->
<p>Next, we can update the <em>summarize_performance()</em> function to both save the model and to create and save a plot generated examples.</p>
<p>The generator model can be saved by calling the <em>save()</em> function on the generator model and providing a unique filename based on the training epoch number.</p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div id="crayon-5e19f52d36982019810818" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover" style="margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important; height: auto;">
		
			<div class="crayon-toolbar" data-settings=" mouseover overlay hide delay" style="font-size: 12px !important; height: 18px !important; line-height: 18px !important; margin-top: -19px; display: none; position: absolute; z-index: 2;"><span class="crayon-title"></span>
			<div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><div class="crayon-button crayon-nums-button crayon-pressed" title="Toggle Line Numbers"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-expand-button" title="Expand Code" style="display: none;"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div></div></div>
			<div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important;"></div>
			<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly="" style="tab-size: 4; font-size: 12px !important; line-height: 15px !important; z-index: 0; opacity: 0; overflow: hidden;">...
# save the generator model tile file
filename = 'generator_model_%03d.h5' % (epoch + 1)
g_model.save(filename)</textarea></div>
			<div class="crayon-main" style="position: relative; z-index: 1; overflow: hidden;">
				<table class="crayon-table" style="">
					<tbody><tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-5e19f52d36982019810818-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36982019810818-2">2</div><div class="crayon-num" data-line="crayon-5e19f52d36982019810818-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36982019810818-4">4</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-5e19f52d36982019810818-1"><span class="crayon-sy">.</span><span class="crayon-sy">.</span><span class="crayon-sy">.</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36982019810818-2"><span class="crayon-p"># save the generator model tile file</span></div><div class="crayon-line" id="crayon-5e19f52d36982019810818-3"><span class="crayon-v">filename</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-s">'generator_model_%03d.h5'</span><span class="crayon-h"> </span><span class="crayon-o">%</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-v">epoch</span><span class="crayon-h"> </span><span class="crayon-o">+</span><span class="crayon-h"> </span><span class="crayon-cn">1</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36982019810818-4"><span class="crayon-v">g_model</span><span class="crayon-sy">.</span><span class="crayon-e">save</span><span class="crayon-sy">(</span><span class="crayon-v">filename</span><span class="crayon-sy">)</span></div></div></td>
					</tr>
				</tbody></table>
			</div>
		</div>
<!-- [Format Time: 0.0001 seconds] -->
<p>We can develop a function to create a plot of the generated samples.</p>
<p>As we are evaluating the discriminator on 100 generated MNIST images, we can plot all 100 images as a 10 by 10 grid. The <em>save_plot()</em> function below implements this, again saving the resulting plot with a unique filename based on the epoch number.</p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div id="crayon-5e19f52d36984712174293" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover" style="margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important; height: auto;">
		
			<div class="crayon-toolbar" data-settings=" mouseover overlay hide delay" style="font-size: 12px !important; height: 18px !important; line-height: 18px !important; margin-top: -19px; display: none; position: absolute; z-index: 2;"><span class="crayon-title"></span>
			<div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><div class="crayon-button crayon-nums-button crayon-pressed" title="Toggle Line Numbers"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-expand-button" title="Expand Code" style="display: none;"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div></div></div>
			<div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important;"></div>
			<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly="" style="tab-size: 4; font-size: 12px !important; line-height: 15px !important; z-index: 0; opacity: 0; overflow: hidden;"># create and save a plot of generated images (reversed grayscale)
def save_plot(examples, epoch, n=10):
	# plot images
	for i in range(n * n):
		# define subplot
		pyplot.subplot(n, n, 1 + i)
		# turn off axis
		pyplot.axis('off')
		# plot raw pixel data
		pyplot.imshow(examples[i, :, :, 0], cmap='gray_r')
	# save plot to file
	filename = 'generated_plot_e%03d.png' % (epoch+1)
	pyplot.savefig(filename)
	pyplot.close()</textarea></div>
			<div class="crayon-main" style="position: relative; z-index: 1; overflow: hidden;">
				<table class="crayon-table" style="">
					<tbody><tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-5e19f52d36984712174293-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36984712174293-2">2</div><div class="crayon-num" data-line="crayon-5e19f52d36984712174293-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36984712174293-4">4</div><div class="crayon-num" data-line="crayon-5e19f52d36984712174293-5">5</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36984712174293-6">6</div><div class="crayon-num" data-line="crayon-5e19f52d36984712174293-7">7</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36984712174293-8">8</div><div class="crayon-num" data-line="crayon-5e19f52d36984712174293-9">9</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36984712174293-10">10</div><div class="crayon-num" data-line="crayon-5e19f52d36984712174293-11">11</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36984712174293-12">12</div><div class="crayon-num" data-line="crayon-5e19f52d36984712174293-13">13</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36984712174293-14">14</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-5e19f52d36984712174293-1"><span class="crayon-p"># create and save a plot of generated images (reversed grayscale)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36984712174293-2"><span class="crayon-e">def </span><span class="crayon-e">save_plot</span><span class="crayon-sy">(</span><span class="crayon-v">examples</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">epoch</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">n</span><span class="crayon-o">=</span><span class="crayon-cn">10</span><span class="crayon-sy">)</span><span class="crayon-o">:</span></div><div class="crayon-line" id="crayon-5e19f52d36984712174293-3"><span class="crayon-h">	</span><span class="crayon-p"># plot images</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36984712174293-4"><span class="crayon-h">	</span><span class="crayon-st">for</span><span class="crayon-h"> </span><span class="crayon-i">i</span><span class="crayon-h"> </span><span class="crayon-st">in</span><span class="crayon-h"> </span><span class="crayon-e">range</span><span class="crayon-sy">(</span><span class="crayon-e ">n *</span><span class="crayon-h"> </span><span class="crayon-v">n</span><span class="crayon-sy">)</span><span class="crayon-o">:</span></div><div class="crayon-line" id="crayon-5e19f52d36984712174293-5"><span class="crayon-h">		</span><span class="crayon-p"># define subplot</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36984712174293-6"><span class="crayon-h">		</span><span class="crayon-v">pyplot</span><span class="crayon-sy">.</span><span class="crayon-e">subplot</span><span class="crayon-sy">(</span><span class="crayon-v">n</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">n</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">1</span><span class="crayon-h"> </span><span class="crayon-o">+</span><span class="crayon-h"> </span><span class="crayon-v">i</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36984712174293-7"><span class="crayon-h">		</span><span class="crayon-p"># turn off axis</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36984712174293-8"><span class="crayon-h">		</span><span class="crayon-v">pyplot</span><span class="crayon-sy">.</span><span class="crayon-e">axis</span><span class="crayon-sy">(</span><span class="crayon-s">'off'</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36984712174293-9"><span class="crayon-h">		</span><span class="crayon-p"># plot raw pixel data</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36984712174293-10"><span class="crayon-h">		</span><span class="crayon-v">pyplot</span><span class="crayon-sy">.</span><span class="crayon-e">imshow</span><span class="crayon-sy">(</span><span class="crayon-v">examples</span><span class="crayon-sy">[</span><span class="crayon-v">i</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-o">:</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-o">:</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">0</span><span class="crayon-sy">]</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">cmap</span><span class="crayon-o">=</span><span class="crayon-s">'gray_r'</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36984712174293-11"><span class="crayon-h">	</span><span class="crayon-p"># save plot to file</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36984712174293-12"><span class="crayon-h">	</span><span class="crayon-v">filename</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-s">'generated_plot_e%03d.png'</span><span class="crayon-h"> </span><span class="crayon-o">%</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-v">epoch</span><span class="crayon-o">+</span><span class="crayon-cn">1</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36984712174293-13"><span class="crayon-h">	</span><span class="crayon-v">pyplot</span><span class="crayon-sy">.</span><span class="crayon-e">savefig</span><span class="crayon-sy">(</span><span class="crayon-v">filename</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36984712174293-14"><span class="crayon-h">	</span><span class="crayon-v">pyplot</span><span class="crayon-sy">.</span><span class="crayon-e">close</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span></div></div></td>
					</tr>
				</tbody></table>
			</div>
		</div>
<!-- [Format Time: 0.0004 seconds] -->
<p>The updated <em>summarize_performance()</em> function with these additions is listed below.</p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div id="crayon-5e19f52d36985744429844" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover" style="margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important; height: auto;">
		
			<div class="crayon-toolbar" data-settings=" mouseover overlay hide delay" style="font-size: 12px !important; height: 18px !important; line-height: 18px !important; margin-top: -19px; display: none; position: absolute; z-index: 2;"><span class="crayon-title"></span>
			<div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><div class="crayon-button crayon-nums-button crayon-pressed" title="Toggle Line Numbers"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div></div></div>
			<div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important;"></div>
			<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly="" style="tab-size: 4; font-size: 12px !important; line-height: 15px !important; z-index: 0; opacity: 0; overflow: hidden;"># evaluate the discriminator, plot generated images, save generator model
def summarize_performance(epoch, g_model, d_model, dataset, latent_dim, n_samples=100):
	# prepare real samples
	X_real, y_real = generate_real_samples(dataset, n_samples)
	# evaluate discriminator on real examples
	_, acc_real = d_model.evaluate(X_real, y_real, verbose=0)
	# prepare fake examples
	x_fake, y_fake = generate_fake_samples(g_model, latent_dim, n_samples)
	# evaluate discriminator on fake examples
	_, acc_fake = d_model.evaluate(x_fake, y_fake, verbose=0)
	# summarize discriminator performance
	print('&gt;Accuracy real: %.0f%%, fake: %.0f%%' % (acc_real*100, acc_fake*100))
	# save plot
	save_plot(x_fake, epoch)
	# save the generator model tile file
	filename = 'generator_model_%03d.h5' % (epoch + 1)
	g_model.save(filename)</textarea></div>
			<div class="crayon-main" style="position: relative; z-index: 1; overflow: hidden;">
				<table class="crayon-table" style="">
					<tbody><tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-5e19f52d36985744429844-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36985744429844-2">2</div><div class="crayon-num" data-line="crayon-5e19f52d36985744429844-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36985744429844-4">4</div><div class="crayon-num" data-line="crayon-5e19f52d36985744429844-5">5</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36985744429844-6">6</div><div class="crayon-num" data-line="crayon-5e19f52d36985744429844-7">7</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36985744429844-8">8</div><div class="crayon-num" data-line="crayon-5e19f52d36985744429844-9">9</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36985744429844-10">10</div><div class="crayon-num" data-line="crayon-5e19f52d36985744429844-11">11</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36985744429844-12">12</div><div class="crayon-num" data-line="crayon-5e19f52d36985744429844-13">13</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36985744429844-14">14</div><div class="crayon-num" data-line="crayon-5e19f52d36985744429844-15">15</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36985744429844-16">16</div><div class="crayon-num" data-line="crayon-5e19f52d36985744429844-17">17</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-5e19f52d36985744429844-1"><span class="crayon-p"># evaluate the discriminator, plot generated images, save generator model</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36985744429844-2"><span class="crayon-e">def </span><span class="crayon-e">summarize_performance</span><span class="crayon-sy">(</span><span class="crayon-v">epoch</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">g_model</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">d_model</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">dataset</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">latent_dim</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">n_samples</span><span class="crayon-o">=</span><span class="crayon-cn">100</span><span class="crayon-sy">)</span><span class="crayon-o">:</span></div><div class="crayon-line" id="crayon-5e19f52d36985744429844-3"><span class="crayon-h">	</span><span class="crayon-p"># prepare real samples</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36985744429844-4"><span class="crayon-h">	</span><span class="crayon-v">X_real</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">y_real</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">generate_real_samples</span><span class="crayon-sy">(</span><span class="crayon-v">dataset</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">n_samples</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36985744429844-5"><span class="crayon-h">	</span><span class="crayon-p"># evaluate discriminator on real examples</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36985744429844-6"><span class="crayon-h">	</span><span class="crayon-v">_</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">acc_real</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">d_model</span><span class="crayon-sy">.</span><span class="crayon-e">evaluate</span><span class="crayon-sy">(</span><span class="crayon-v">X_real</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">y_real</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">verbose</span><span class="crayon-o">=</span><span class="crayon-cn">0</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36985744429844-7"><span class="crayon-h">	</span><span class="crayon-p"># prepare fake examples</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36985744429844-8"><span class="crayon-h">	</span><span class="crayon-v">x_fake</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">y_fake</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">generate_fake_samples</span><span class="crayon-sy">(</span><span class="crayon-v">g_model</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">latent_dim</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">n_samples</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36985744429844-9"><span class="crayon-h">	</span><span class="crayon-p"># evaluate discriminator on fake examples</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36985744429844-10"><span class="crayon-h">	</span><span class="crayon-v">_</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">acc_fake</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">d_model</span><span class="crayon-sy">.</span><span class="crayon-e">evaluate</span><span class="crayon-sy">(</span><span class="crayon-v">x_fake</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">y_fake</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">verbose</span><span class="crayon-o">=</span><span class="crayon-cn">0</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36985744429844-11"><span class="crayon-h">	</span><span class="crayon-p"># summarize discriminator performance</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36985744429844-12"><span class="crayon-h">	</span><span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-s">'&gt;Accuracy real: %.0f%%, fake: %.0f%%'</span><span class="crayon-h"> </span><span class="crayon-o">%</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-e ">acc_real*</span><span class="crayon-cn">100</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-e ">acc_fake*</span><span class="crayon-cn">100</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36985744429844-13"><span class="crayon-h">	</span><span class="crayon-p"># save plot</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36985744429844-14"><span class="crayon-h">	</span><span class="crayon-e">save_plot</span><span class="crayon-sy">(</span><span class="crayon-v">x_fake</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">epoch</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36985744429844-15"><span class="crayon-h">	</span><span class="crayon-p"># save the generator model tile file</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36985744429844-16"><span class="crayon-h">	</span><span class="crayon-v">filename</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-s">'generator_model_%03d.h5'</span><span class="crayon-h"> </span><span class="crayon-o">%</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-v">epoch</span><span class="crayon-h"> </span><span class="crayon-o">+</span><span class="crayon-h"> </span><span class="crayon-cn">1</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36985744429844-17"><span class="crayon-h">	</span><span class="crayon-v">g_model</span><span class="crayon-sy">.</span><span class="crayon-e">save</span><span class="crayon-sy">(</span><span class="crayon-v">filename</span><span class="crayon-sy">)</span></div></div></td>
					</tr>
				</tbody></table>
			</div>
		</div>
<!-- [Format Time: 0.0006 seconds] -->
<p></p>
<h2>Complete Example of GAN for MNIST</h2>
<p>We now have everything we need to train and evaluate a GAN on the MNIST handwritten digit dataset.</p>
<p>The complete example is listed below.</p>
<p>Note: this example can run on a CPU but may take a number of hours. The example can run on a GPU, such as the Amazon EC2 p3 instances, and will complete in a few minutes.</p>
<p>For help on setting up an AWS EC2 instance to run this code, see the tutorial:</p>
<ul>
<li><a href="https://machinelearningmastery.com/develop-evaluate-large-deep-learning-models-keras-amazon-web-services/">How to Setup Amazon AWS EC2 GPUs to Train Keras Deep Learning Models (step-by-step)</a></li>
</ul>
<p></p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div id="crayon-5e19f52d36986876356937" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover" style="margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important; height: auto;">
		
			<div class="crayon-toolbar" data-settings=" mouseover overlay hide delay" style="font-size: 12px !important; height: 18px !important; line-height: 18px !important; margin-top: -19px; display: none; position: absolute; z-index: 2;"><span class="crayon-title"></span>
			<div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><div class="crayon-button crayon-nums-button crayon-pressed" title="Toggle Line Numbers"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-plain-button crayon-pressed" title="Toggle Plain Code"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-expand-button" title="Expand Code"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div></div></div>
			<div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important; margin-top: -21px; display: none;"><div>Press CTRL+C to Copy, CTRL+V to Paste</div></div>
			<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly="" style="tab-size: 4; font-size: 12px !important; line-height: 15px !important; z-index: 1; opacity: 1; overflow: hidden; height: 2706px;"># example of training a gan on mnist
from numpy import expand_dims
from numpy import zeros
from numpy import ones
from numpy import vstack
from numpy.random import randn
from numpy.random import randint
from keras.datasets.mnist import load_data
from keras.optimizers import Adam
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import Reshape
from keras.layers import Flatten
from keras.layers import Conv2D
from keras.layers import Conv2DTranspose
from keras.layers import LeakyReLU
from keras.layers import Dropout
from matplotlib import pyplot

# define the standalone discriminator model
def define_discriminator(in_shape=(28,28,1)):
	model = Sequential()
	model.add(Conv2D(64, (3,3), strides=(2, 2), padding='same', input_shape=in_shape))
	model.add(LeakyReLU(alpha=0.2))
	model.add(Dropout(0.4))
	model.add(Conv2D(64, (3,3), strides=(2, 2), padding='same'))
	model.add(LeakyReLU(alpha=0.2))
	model.add(Dropout(0.4))
	model.add(Flatten())
	model.add(Dense(1, activation='sigmoid'))
	# compile model
	opt = Adam(lr=0.0002, beta_1=0.5)
	model.compile(loss='binary_crossentropy', optimizer=opt, metrics=['accuracy'])
	return model

# define the standalone generator model
def define_generator(latent_dim):
	model = Sequential()
	# foundation for 7x7 image
	n_nodes = 128 * 7 * 7
	model.add(Dense(n_nodes, input_dim=latent_dim))
	model.add(LeakyReLU(alpha=0.2))
	model.add(Reshape((7, 7, 128)))
	# upsample to 14x14
	model.add(Conv2DTranspose(128, (4,4), strides=(2,2), padding='same'))
	model.add(LeakyReLU(alpha=0.2))
	# upsample to 28x28
	model.add(Conv2DTranspose(128, (4,4), strides=(2,2), padding='same'))
	model.add(LeakyReLU(alpha=0.2))
	model.add(Conv2D(1, (7,7), activation='sigmoid', padding='same'))
	return model

# define the combined generator and discriminator model, for updating the generator
def define_gan(g_model, d_model):
	# make weights in the discriminator not trainable
	d_model.trainable = False
	# connect them
	model = Sequential()
	# add generator
	model.add(g_model)
	# add the discriminator
	model.add(d_model)
	# compile model
	opt = Adam(lr=0.0002, beta_1=0.5)
	model.compile(loss='binary_crossentropy', optimizer=opt)
	return model

# load and prepare mnist training images
def load_real_samples():
	# load mnist dataset
	(trainX, _), (_, _) = load_data()
	# expand to 3d, e.g. add channels dimension
	X = expand_dims(trainX, axis=-1)
	# convert from unsigned ints to floats
	X = X.astype('float32')
	# scale from [0,255] to [0,1]
	X = X / 255.0
	return X

# select real samples
def generate_real_samples(dataset, n_samples):
	# choose random instances
	ix = randint(0, dataset.shape[0], n_samples)
	# retrieve selected images
	X = dataset[ix]
	# generate 'real' class labels (1)
	y = ones((n_samples, 1))
	return X, y

# generate points in latent space as input for the generator
def generate_latent_points(latent_dim, n_samples):
	# generate points in the latent space
	x_input = randn(latent_dim * n_samples)
	# reshape into a batch of inputs for the network
	x_input = x_input.reshape(n_samples, latent_dim)
	return x_input

# use the generator to generate n fake examples, with class labels
def generate_fake_samples(g_model, latent_dim, n_samples):
	# generate points in latent space
	x_input = generate_latent_points(latent_dim, n_samples)
	# predict outputs
	X = g_model.predict(x_input)
	# create 'fake' class labels (0)
	y = zeros((n_samples, 1))
	return X, y

# create and save a plot of generated images (reversed grayscale)
def save_plot(examples, epoch, n=10):
	# plot images
	for i in range(n * n):
		# define subplot
		pyplot.subplot(n, n, 1 + i)
		# turn off axis
		pyplot.axis('off')
		# plot raw pixel data
		pyplot.imshow(examples[i, :, :, 0], cmap='gray_r')
	# save plot to file
	filename = 'generated_plot_e%03d.png' % (epoch+1)
	pyplot.savefig(filename)
	pyplot.close()

# evaluate the discriminator, plot generated images, save generator model
def summarize_performance(epoch, g_model, d_model, dataset, latent_dim, n_samples=100):
	# prepare real samples
	X_real, y_real = generate_real_samples(dataset, n_samples)
	# evaluate discriminator on real examples
	_, acc_real = d_model.evaluate(X_real, y_real, verbose=0)
	# prepare fake examples
	x_fake, y_fake = generate_fake_samples(g_model, latent_dim, n_samples)
	# evaluate discriminator on fake examples
	_, acc_fake = d_model.evaluate(x_fake, y_fake, verbose=0)
	# summarize discriminator performance
	print('&gt;Accuracy real: %.0f%%, fake: %.0f%%' % (acc_real*100, acc_fake*100))
	# save plot
	save_plot(x_fake, epoch)
	# save the generator model tile file
	filename = 'generator_model_%03d.h5' % (epoch + 1)
	g_model.save(filename)

# train the generator and discriminator
def train(g_model, d_model, gan_model, dataset, latent_dim, n_epochs=100, n_batch=256):
	bat_per_epo = int(dataset.shape[0] / n_batch)
	half_batch = int(n_batch / 2)
	# manually enumerate epochs
	for i in range(n_epochs):
		# enumerate batches over the training set
		for j in range(bat_per_epo):
			# get randomly selected 'real' samples
			X_real, y_real = generate_real_samples(dataset, half_batch)
			# generate 'fake' examples
			X_fake, y_fake = generate_fake_samples(g_model, latent_dim, half_batch)
			# create training set for the discriminator
			X, y = vstack((X_real, X_fake)), vstack((y_real, y_fake))
			# update discriminator model weights
			d_loss, _ = d_model.train_on_batch(X, y)
			# prepare points in latent space as input for the generator
			X_gan = generate_latent_points(latent_dim, n_batch)
			# create inverted labels for the fake samples
			y_gan = ones((n_batch, 1))
			# update the generator via the discriminator's error
			g_loss = gan_model.train_on_batch(X_gan, y_gan)
			# summarize loss on this batch
			print('&gt;%d, %d/%d, d=%.3f, g=%.3f' % (i+1, j+1, bat_per_epo, d_loss, g_loss))
		# evaluate the model performance, sometimes
		if (i+1) % 10 == 0:
			summarize_performance(i, g_model, d_model, dataset, latent_dim)

# size of the latent space
latent_dim = 100
# create the discriminator
d_model = define_discriminator()
# create the generator
g_model = define_generator(latent_dim)
# create the gan
gan_model = define_gan(g_model, d_model)
# load image data
dataset = load_real_samples()
# train model
train(g_model, d_model, gan_model, dataset, latent_dim)</textarea></div>
			<div class="crayon-main" style="position: relative; z-index: 0; overflow: hidden; opacity: 0;">
				<table class="crayon-table" style="">
					<tbody><tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-2">2</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-4">4</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-5">5</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-6">6</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-7">7</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-8">8</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-9">9</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-10">10</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-11">11</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-12">12</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-13">13</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-14">14</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-15">15</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-16">16</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-17">17</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-18">18</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-19">19</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-20">20</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-21">21</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-22">22</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-23">23</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-24">24</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-25">25</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-26">26</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-27">27</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-28">28</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-29">29</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-30">30</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-31">31</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-32">32</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-33">33</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-34">34</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-35">35</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-36">36</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-37">37</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-38">38</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-39">39</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-40">40</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-41">41</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-42">42</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-43">43</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-44">44</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-45">45</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-46">46</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-47">47</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-48">48</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-49">49</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-50">50</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-51">51</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-52">52</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-53">53</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-54">54</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-55">55</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-56">56</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-57">57</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-58">58</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-59">59</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-60">60</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-61">61</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-62">62</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-63">63</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-64">64</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-65">65</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-66">66</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-67">67</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-68">68</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-69">69</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-70">70</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-71">71</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-72">72</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-73">73</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-74">74</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-75">75</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-76">76</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-77">77</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-78">78</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-79">79</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-80">80</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-81">81</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-82">82</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-83">83</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-84">84</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-85">85</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-86">86</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-87">87</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-88">88</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-89">89</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-90">90</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-91">91</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-92">92</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-93">93</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-94">94</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-95">95</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-96">96</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-97">97</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-98">98</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-99">99</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-100">100</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-101">101</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-102">102</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-103">103</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-104">104</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-105">105</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-106">106</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-107">107</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-108">108</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-109">109</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-110">110</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-111">111</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-112">112</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-113">113</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-114">114</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-115">115</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-116">116</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-117">117</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-118">118</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-119">119</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-120">120</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-121">121</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-122">122</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-123">123</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-124">124</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-125">125</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-126">126</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-127">127</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-128">128</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-129">129</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-130">130</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-131">131</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-132">132</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-133">133</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-134">134</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-135">135</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-136">136</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-137">137</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-138">138</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-139">139</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-140">140</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-141">141</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-142">142</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-143">143</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-144">144</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-145">145</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-146">146</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-147">147</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-148">148</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-149">149</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-150">150</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-151">151</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-152">152</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-153">153</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-154">154</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-155">155</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-156">156</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-157">157</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-158">158</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-159">159</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-160">160</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-161">161</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-162">162</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-163">163</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-164">164</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-165">165</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-166">166</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-167">167</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-168">168</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-169">169</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-170">170</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-171">171</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-172">172</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-173">173</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-174">174</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-175">175</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-176">176</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-177">177</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-178">178</div><div class="crayon-num" data-line="crayon-5e19f52d36986876356937-179">179</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36986876356937-180">180</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-5e19f52d36986876356937-1"><span class="crayon-p"># example of training a gan on mnist</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-2"><span class="crayon-e">from </span><span class="crayon-e">numpy </span><span class="crayon-e">import </span><span class="crayon-e">expand_dims</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-3"><span class="crayon-e">from </span><span class="crayon-e">numpy </span><span class="crayon-e">import </span><span class="crayon-e">zeros</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-4"><span class="crayon-e">from </span><span class="crayon-e">numpy </span><span class="crayon-e">import </span><span class="crayon-e">ones</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-5"><span class="crayon-e">from </span><span class="crayon-e">numpy </span><span class="crayon-e">import </span><span class="crayon-e">vstack</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-6"><span class="crayon-e">from </span><span class="crayon-v">numpy</span><span class="crayon-sy">.</span><span class="crayon-e">random </span><span class="crayon-e">import </span><span class="crayon-e">randn</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-7"><span class="crayon-e">from </span><span class="crayon-v">numpy</span><span class="crayon-sy">.</span><span class="crayon-e">random </span><span class="crayon-e">import </span><span class="crayon-e">randint</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-8"><span class="crayon-e">from </span><span class="crayon-v">keras</span><span class="crayon-sy">.</span><span class="crayon-v">datasets</span><span class="crayon-sy">.</span><span class="crayon-e">mnist </span><span class="crayon-e">import </span><span class="crayon-e">load_data</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-9"><span class="crayon-e">from </span><span class="crayon-v">keras</span><span class="crayon-sy">.</span><span class="crayon-e">optimizers </span><span class="crayon-e">import </span><span class="crayon-e">Adam</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-10"><span class="crayon-e">from </span><span class="crayon-v">keras</span><span class="crayon-sy">.</span><span class="crayon-e">models </span><span class="crayon-e">import </span><span class="crayon-e">Sequential</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-11"><span class="crayon-e">from </span><span class="crayon-v">keras</span><span class="crayon-sy">.</span><span class="crayon-e">layers </span><span class="crayon-e">import </span><span class="crayon-e">Dense</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-12"><span class="crayon-e">from </span><span class="crayon-v">keras</span><span class="crayon-sy">.</span><span class="crayon-e">layers </span><span class="crayon-e">import </span><span class="crayon-e">Reshape</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-13"><span class="crayon-e">from </span><span class="crayon-v">keras</span><span class="crayon-sy">.</span><span class="crayon-e">layers </span><span class="crayon-e">import </span><span class="crayon-e">Flatten</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-14"><span class="crayon-e">from </span><span class="crayon-v">keras</span><span class="crayon-sy">.</span><span class="crayon-e">layers </span><span class="crayon-e">import </span><span class="crayon-e">Conv2D</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-15"><span class="crayon-e">from </span><span class="crayon-v">keras</span><span class="crayon-sy">.</span><span class="crayon-e">layers </span><span class="crayon-e">import </span><span class="crayon-e">Conv2DTranspose</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-16"><span class="crayon-e">from </span><span class="crayon-v">keras</span><span class="crayon-sy">.</span><span class="crayon-e">layers </span><span class="crayon-e">import </span><span class="crayon-e">LeakyReLU</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-17"><span class="crayon-e">from </span><span class="crayon-v">keras</span><span class="crayon-sy">.</span><span class="crayon-e">layers </span><span class="crayon-e">import </span><span class="crayon-e">Dropout</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-18"><span class="crayon-e">from </span><span class="crayon-e">matplotlib </span><span class="crayon-e">import </span><span class="crayon-v">pyplot</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-19">&nbsp;</div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-20"><span class="crayon-p"># define the standalone discriminator model</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-21"><span class="crayon-e">def </span><span class="crayon-e">define_discriminator</span><span class="crayon-sy">(</span><span class="crayon-v">in_shape</span><span class="crayon-o">=</span><span class="crayon-sy">(</span><span class="crayon-cn">28</span><span class="crayon-sy">,</span><span class="crayon-cn">28</span><span class="crayon-sy">,</span><span class="crayon-cn">1</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span><span class="crayon-o">:</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-22"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">Sequential</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-23"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">Conv2D</span><span class="crayon-sy">(</span><span class="crayon-cn">64</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-cn">3</span><span class="crayon-sy">,</span><span class="crayon-cn">3</span><span class="crayon-sy">)</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">strides</span><span class="crayon-o">=</span><span class="crayon-sy">(</span><span class="crayon-cn">2</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">2</span><span class="crayon-sy">)</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">padding</span><span class="crayon-o">=</span><span class="crayon-s">'same'</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">input_shape</span><span class="crayon-o">=</span><span class="crayon-v">in_shape</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-24"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">LeakyReLU</span><span class="crayon-sy">(</span><span class="crayon-v">alpha</span><span class="crayon-o">=</span><span class="crayon-cn">0.2</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-25"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">Dropout</span><span class="crayon-sy">(</span><span class="crayon-cn">0.4</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-26"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">Conv2D</span><span class="crayon-sy">(</span><span class="crayon-cn">64</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-cn">3</span><span class="crayon-sy">,</span><span class="crayon-cn">3</span><span class="crayon-sy">)</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">strides</span><span class="crayon-o">=</span><span class="crayon-sy">(</span><span class="crayon-cn">2</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">2</span><span class="crayon-sy">)</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">padding</span><span class="crayon-o">=</span><span class="crayon-s">'same'</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-27"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">LeakyReLU</span><span class="crayon-sy">(</span><span class="crayon-v">alpha</span><span class="crayon-o">=</span><span class="crayon-cn">0.2</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-28"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">Dropout</span><span class="crayon-sy">(</span><span class="crayon-cn">0.4</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-29"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">Flatten</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-30"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">Dense</span><span class="crayon-sy">(</span><span class="crayon-cn">1</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">activation</span><span class="crayon-o">=</span><span class="crayon-s">'sigmoid'</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-31"><span class="crayon-h">	</span><span class="crayon-p"># compile model</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-32"><span class="crayon-h">	</span><span class="crayon-v">opt</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">Adam</span><span class="crayon-sy">(</span><span class="crayon-v">lr</span><span class="crayon-o">=</span><span class="crayon-cn">0.0002</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">beta_1</span><span class="crayon-o">=</span><span class="crayon-cn">0.5</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-33"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">compile</span><span class="crayon-sy">(</span><span class="crayon-v">loss</span><span class="crayon-o">=</span><span class="crayon-s">'binary_crossentropy'</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">optimizer</span><span class="crayon-o">=</span><span class="crayon-v">opt</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">metrics</span><span class="crayon-o">=</span><span class="crayon-sy">[</span><span class="crayon-s">'accuracy'</span><span class="crayon-sy">]</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-34"><span class="crayon-h">	</span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-v">model</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-35">&nbsp;</div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-36"><span class="crayon-p"># define the standalone generator model</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-37"><span class="crayon-e">def </span><span class="crayon-e">define_generator</span><span class="crayon-sy">(</span><span class="crayon-v">latent_dim</span><span class="crayon-sy">)</span><span class="crayon-o">:</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-38"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">Sequential</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-39"><span class="crayon-h">	</span><span class="crayon-p"># foundation for 7x7 image</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-40"><span class="crayon-h">	</span><span class="crayon-v">n_nodes</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-cn">128</span><span class="crayon-h"> </span><span class="crayon-o">*</span><span class="crayon-h"> </span><span class="crayon-cn">7</span><span class="crayon-h"> </span><span class="crayon-o">*</span><span class="crayon-h"> </span><span class="crayon-cn">7</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-41"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">Dense</span><span class="crayon-sy">(</span><span class="crayon-v">n_nodes</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">input_dim</span><span class="crayon-o">=</span><span class="crayon-v">latent_dim</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-42"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">LeakyReLU</span><span class="crayon-sy">(</span><span class="crayon-v">alpha</span><span class="crayon-o">=</span><span class="crayon-cn">0.2</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-43"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">Reshape</span><span class="crayon-sy">(</span><span class="crayon-sy">(</span><span class="crayon-cn">7</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">7</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">128</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-44"><span class="crayon-h">	</span><span class="crayon-p"># upsample to 14x14</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-45"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">Conv2DTranspose</span><span class="crayon-sy">(</span><span class="crayon-cn">128</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-cn">4</span><span class="crayon-sy">,</span><span class="crayon-cn">4</span><span class="crayon-sy">)</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">strides</span><span class="crayon-o">=</span><span class="crayon-sy">(</span><span class="crayon-cn">2</span><span class="crayon-sy">,</span><span class="crayon-cn">2</span><span class="crayon-sy">)</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">padding</span><span class="crayon-o">=</span><span class="crayon-s">'same'</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-46"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">LeakyReLU</span><span class="crayon-sy">(</span><span class="crayon-v">alpha</span><span class="crayon-o">=</span><span class="crayon-cn">0.2</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-47"><span class="crayon-h">	</span><span class="crayon-p"># upsample to 28x28</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-48"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">Conv2DTranspose</span><span class="crayon-sy">(</span><span class="crayon-cn">128</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-cn">4</span><span class="crayon-sy">,</span><span class="crayon-cn">4</span><span class="crayon-sy">)</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">strides</span><span class="crayon-o">=</span><span class="crayon-sy">(</span><span class="crayon-cn">2</span><span class="crayon-sy">,</span><span class="crayon-cn">2</span><span class="crayon-sy">)</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">padding</span><span class="crayon-o">=</span><span class="crayon-s">'same'</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-49"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">LeakyReLU</span><span class="crayon-sy">(</span><span class="crayon-v">alpha</span><span class="crayon-o">=</span><span class="crayon-cn">0.2</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-50"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-e">Conv2D</span><span class="crayon-sy">(</span><span class="crayon-cn">1</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-cn">7</span><span class="crayon-sy">,</span><span class="crayon-cn">7</span><span class="crayon-sy">)</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">activation</span><span class="crayon-o">=</span><span class="crayon-s">'sigmoid'</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">padding</span><span class="crayon-o">=</span><span class="crayon-s">'same'</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-51"><span class="crayon-h">	</span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-v">model</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-52">&nbsp;</div><div class="crayon-line" id="crayon-5e19f52d36986876356937-53"><span class="crayon-p"># define the combined generator and discriminator model, for updating the generator</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-54"><span class="crayon-e">def </span><span class="crayon-e">define_gan</span><span class="crayon-sy">(</span><span class="crayon-v">g_model</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">d_model</span><span class="crayon-sy">)</span><span class="crayon-o">:</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-55"><span class="crayon-h">	</span><span class="crayon-p"># make weights in the discriminator not trainable</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-56"><span class="crayon-h">	</span><span class="crayon-v">d_model</span><span class="crayon-sy">.</span><span class="crayon-v">trainable</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-t">False</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-57"><span class="crayon-h">	</span><span class="crayon-p"># connect them</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-58"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">Sequential</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-59"><span class="crayon-h">	</span><span class="crayon-p"># add generator</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-60"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-v">g_model</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-61"><span class="crayon-h">	</span><span class="crayon-p"># add the discriminator</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-62"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-v">d_model</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-63"><span class="crayon-h">	</span><span class="crayon-p"># compile model</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-64"><span class="crayon-h">	</span><span class="crayon-v">opt</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">Adam</span><span class="crayon-sy">(</span><span class="crayon-v">lr</span><span class="crayon-o">=</span><span class="crayon-cn">0.0002</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">beta_1</span><span class="crayon-o">=</span><span class="crayon-cn">0.5</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-65"><span class="crayon-h">	</span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">compile</span><span class="crayon-sy">(</span><span class="crayon-v">loss</span><span class="crayon-o">=</span><span class="crayon-s">'binary_crossentropy'</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">optimizer</span><span class="crayon-o">=</span><span class="crayon-v">opt</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-66"><span class="crayon-h">	</span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-v">model</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-67">&nbsp;</div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-68"><span class="crayon-p"># load and prepare mnist training images</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-69"><span class="crayon-e">def </span><span class="crayon-e">load_real_samples</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span><span class="crayon-o">:</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-70"><span class="crayon-h">	</span><span class="crayon-p"># load mnist dataset</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-71"><span class="crayon-h">	</span><span class="crayon-sy">(</span><span class="crayon-v">trainX</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">_</span><span class="crayon-sy">)</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-v">_</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">_</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">load_data</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-72"><span class="crayon-h">	</span><span class="crayon-p"># expand to 3d, e.g. add channels dimension</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-73"><span class="crayon-h">	</span><span class="crayon-v">X</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">expand_dims</span><span class="crayon-sy">(</span><span class="crayon-v">trainX</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">axis</span><span class="crayon-o">=</span><span class="crayon-o">-</span><span class="crayon-cn">1</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-74"><span class="crayon-h">	</span><span class="crayon-p"># convert from unsigned ints to floats</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-75"><span class="crayon-h">	</span><span class="crayon-v">X</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">X</span><span class="crayon-sy">.</span><span class="crayon-e">astype</span><span class="crayon-sy">(</span><span class="crayon-s">'float32'</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-76"><span class="crayon-h">	</span><span class="crayon-p"># scale from [0,255] to [0,1]</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-77"><span class="crayon-h">	</span><span class="crayon-v">X</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">X</span><span class="crayon-h"> </span><span class="crayon-o">/</span><span class="crayon-h"> </span><span class="crayon-cn">255.0</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-78"><span class="crayon-h">	</span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-v">X</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-79">&nbsp;</div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-80"><span class="crayon-p"># select real samples</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-81"><span class="crayon-e">def </span><span class="crayon-e">generate_real_samples</span><span class="crayon-sy">(</span><span class="crayon-v">dataset</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">n_samples</span><span class="crayon-sy">)</span><span class="crayon-o">:</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-82"><span class="crayon-h">	</span><span class="crayon-p"># choose random instances</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-83"><span class="crayon-h">	</span><span class="crayon-v">ix</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">randint</span><span class="crayon-sy">(</span><span class="crayon-cn">0</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">dataset</span><span class="crayon-sy">.</span><span class="crayon-v">shape</span><span class="crayon-sy">[</span><span class="crayon-cn">0</span><span class="crayon-sy">]</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">n_samples</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-84"><span class="crayon-h">	</span><span class="crayon-p"># retrieve selected images</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-85"><span class="crayon-h">	</span><span class="crayon-v">X</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">dataset</span><span class="crayon-sy">[</span><span class="crayon-v">ix</span><span class="crayon-sy">]</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-86"><span class="crayon-h">	</span><span class="crayon-p"># generate 'real' class labels (1)</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-87"><span class="crayon-h">	</span><span class="crayon-v">y</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">ones</span><span class="crayon-sy">(</span><span class="crayon-sy">(</span><span class="crayon-v">n_samples</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">1</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-88"><span class="crayon-h">	</span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-v">X</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">y</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-89">&nbsp;</div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-90"><span class="crayon-p"># generate points in latent space as input for the generator</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-91"><span class="crayon-e">def </span><span class="crayon-e">generate_latent_points</span><span class="crayon-sy">(</span><span class="crayon-v">latent_dim</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">n_samples</span><span class="crayon-sy">)</span><span class="crayon-o">:</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-92"><span class="crayon-h">	</span><span class="crayon-p"># generate points in the latent space</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-93"><span class="crayon-h">	</span><span class="crayon-v">x_input</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">randn</span><span class="crayon-sy">(</span><span class="crayon-e ">latent_dim *</span><span class="crayon-h"> </span><span class="crayon-v">n_samples</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-94"><span class="crayon-h">	</span><span class="crayon-p"># reshape into a batch of inputs for the network</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-95"><span class="crayon-h">	</span><span class="crayon-v">x_input</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">x_input</span><span class="crayon-sy">.</span><span class="crayon-e">reshape</span><span class="crayon-sy">(</span><span class="crayon-v">n_samples</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">latent_dim</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-96"><span class="crayon-h">	</span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-v">x_input</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-97">&nbsp;</div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-98"><span class="crayon-p"># use the generator to generate n fake examples, with class labels</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-99"><span class="crayon-e">def </span><span class="crayon-e">generate_fake_samples</span><span class="crayon-sy">(</span><span class="crayon-v">g_model</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">latent_dim</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">n_samples</span><span class="crayon-sy">)</span><span class="crayon-o">:</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-100"><span class="crayon-h">	</span><span class="crayon-p"># generate points in latent space</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-101"><span class="crayon-h">	</span><span class="crayon-v">x_input</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">generate_latent_points</span><span class="crayon-sy">(</span><span class="crayon-v">latent_dim</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">n_samples</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-102"><span class="crayon-h">	</span><span class="crayon-p"># predict outputs</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-103"><span class="crayon-h">	</span><span class="crayon-v">X</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">g_model</span><span class="crayon-sy">.</span><span class="crayon-e">predict</span><span class="crayon-sy">(</span><span class="crayon-v">x_input</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-104"><span class="crayon-h">	</span><span class="crayon-p"># create 'fake' class labels (0)</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-105"><span class="crayon-h">	</span><span class="crayon-v">y</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">zeros</span><span class="crayon-sy">(</span><span class="crayon-sy">(</span><span class="crayon-v">n_samples</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">1</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-106"><span class="crayon-h">	</span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-v">X</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">y</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-107">&nbsp;</div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-108"><span class="crayon-p"># create and save a plot of generated images (reversed grayscale)</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-109"><span class="crayon-e">def </span><span class="crayon-e">save_plot</span><span class="crayon-sy">(</span><span class="crayon-v">examples</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">epoch</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">n</span><span class="crayon-o">=</span><span class="crayon-cn">10</span><span class="crayon-sy">)</span><span class="crayon-o">:</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-110"><span class="crayon-h">	</span><span class="crayon-p"># plot images</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-111"><span class="crayon-h">	</span><span class="crayon-st">for</span><span class="crayon-h"> </span><span class="crayon-i">i</span><span class="crayon-h"> </span><span class="crayon-st">in</span><span class="crayon-h"> </span><span class="crayon-e">range</span><span class="crayon-sy">(</span><span class="crayon-e ">n *</span><span class="crayon-h"> </span><span class="crayon-v">n</span><span class="crayon-sy">)</span><span class="crayon-o">:</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-112"><span class="crayon-h">		</span><span class="crayon-p"># define subplot</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-113"><span class="crayon-h">		</span><span class="crayon-v">pyplot</span><span class="crayon-sy">.</span><span class="crayon-e">subplot</span><span class="crayon-sy">(</span><span class="crayon-v">n</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">n</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">1</span><span class="crayon-h"> </span><span class="crayon-o">+</span><span class="crayon-h"> </span><span class="crayon-v">i</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-114"><span class="crayon-h">		</span><span class="crayon-p"># turn off axis</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-115"><span class="crayon-h">		</span><span class="crayon-v">pyplot</span><span class="crayon-sy">.</span><span class="crayon-e">axis</span><span class="crayon-sy">(</span><span class="crayon-s">'off'</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-116"><span class="crayon-h">		</span><span class="crayon-p"># plot raw pixel data</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-117"><span class="crayon-h">		</span><span class="crayon-v">pyplot</span><span class="crayon-sy">.</span><span class="crayon-e">imshow</span><span class="crayon-sy">(</span><span class="crayon-v">examples</span><span class="crayon-sy">[</span><span class="crayon-v">i</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-o">:</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-o">:</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">0</span><span class="crayon-sy">]</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">cmap</span><span class="crayon-o">=</span><span class="crayon-s">'gray_r'</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-118"><span class="crayon-h">	</span><span class="crayon-p"># save plot to file</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-119"><span class="crayon-h">	</span><span class="crayon-v">filename</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-s">'generated_plot_e%03d.png'</span><span class="crayon-h"> </span><span class="crayon-o">%</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-v">epoch</span><span class="crayon-o">+</span><span class="crayon-cn">1</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-120"><span class="crayon-h">	</span><span class="crayon-v">pyplot</span><span class="crayon-sy">.</span><span class="crayon-e">savefig</span><span class="crayon-sy">(</span><span class="crayon-v">filename</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-121"><span class="crayon-h">	</span><span class="crayon-v">pyplot</span><span class="crayon-sy">.</span><span class="crayon-e">close</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-122">&nbsp;</div><div class="crayon-line" id="crayon-5e19f52d36986876356937-123"><span class="crayon-p"># evaluate the discriminator, plot generated images, save generator model</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-124"><span class="crayon-e">def </span><span class="crayon-e">summarize_performance</span><span class="crayon-sy">(</span><span class="crayon-v">epoch</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">g_model</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">d_model</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">dataset</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">latent_dim</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">n_samples</span><span class="crayon-o">=</span><span class="crayon-cn">100</span><span class="crayon-sy">)</span><span class="crayon-o">:</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-125"><span class="crayon-h">	</span><span class="crayon-p"># prepare real samples</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-126"><span class="crayon-h">	</span><span class="crayon-v">X_real</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">y_real</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">generate_real_samples</span><span class="crayon-sy">(</span><span class="crayon-v">dataset</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">n_samples</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-127"><span class="crayon-h">	</span><span class="crayon-p"># evaluate discriminator on real examples</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-128"><span class="crayon-h">	</span><span class="crayon-v">_</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">acc_real</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">d_model</span><span class="crayon-sy">.</span><span class="crayon-e">evaluate</span><span class="crayon-sy">(</span><span class="crayon-v">X_real</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">y_real</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">verbose</span><span class="crayon-o">=</span><span class="crayon-cn">0</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-129"><span class="crayon-h">	</span><span class="crayon-p"># prepare fake examples</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-130"><span class="crayon-h">	</span><span class="crayon-v">x_fake</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">y_fake</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">generate_fake_samples</span><span class="crayon-sy">(</span><span class="crayon-v">g_model</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">latent_dim</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">n_samples</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-131"><span class="crayon-h">	</span><span class="crayon-p"># evaluate discriminator on fake examples</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-132"><span class="crayon-h">	</span><span class="crayon-v">_</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">acc_fake</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">d_model</span><span class="crayon-sy">.</span><span class="crayon-e">evaluate</span><span class="crayon-sy">(</span><span class="crayon-v">x_fake</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">y_fake</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">verbose</span><span class="crayon-o">=</span><span class="crayon-cn">0</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-133"><span class="crayon-h">	</span><span class="crayon-p"># summarize discriminator performance</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-134"><span class="crayon-h">	</span><span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-s">'&gt;Accuracy real: %.0f%%, fake: %.0f%%'</span><span class="crayon-h"> </span><span class="crayon-o">%</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-e ">acc_real*</span><span class="crayon-cn">100</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-e ">acc_fake*</span><span class="crayon-cn">100</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-135"><span class="crayon-h">	</span><span class="crayon-p"># save plot</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-136"><span class="crayon-h">	</span><span class="crayon-e">save_plot</span><span class="crayon-sy">(</span><span class="crayon-v">x_fake</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">epoch</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-137"><span class="crayon-h">	</span><span class="crayon-p"># save the generator model tile file</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-138"><span class="crayon-h">	</span><span class="crayon-v">filename</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-s">'generator_model_%03d.h5'</span><span class="crayon-h"> </span><span class="crayon-o">%</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-v">epoch</span><span class="crayon-h"> </span><span class="crayon-o">+</span><span class="crayon-h"> </span><span class="crayon-cn">1</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-139"><span class="crayon-h">	</span><span class="crayon-v">g_model</span><span class="crayon-sy">.</span><span class="crayon-e">save</span><span class="crayon-sy">(</span><span class="crayon-v">filename</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-140">&nbsp;</div><div class="crayon-line" id="crayon-5e19f52d36986876356937-141"><span class="crayon-p"># train the generator and discriminator</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-142"><span class="crayon-e">def </span><span class="crayon-e">train</span><span class="crayon-sy">(</span><span class="crayon-v">g_model</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">d_model</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">gan_model</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">dataset</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">latent_dim</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">n_epochs</span><span class="crayon-o">=</span><span class="crayon-cn">100</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">n_batch</span><span class="crayon-o">=</span><span class="crayon-cn">256</span><span class="crayon-sy">)</span><span class="crayon-o">:</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-143"><span class="crayon-h">	</span><span class="crayon-v">bat_per_epo</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-t">int</span><span class="crayon-sy">(</span><span class="crayon-v">dataset</span><span class="crayon-sy">.</span><span class="crayon-v">shape</span><span class="crayon-sy">[</span><span class="crayon-cn">0</span><span class="crayon-sy">]</span><span class="crayon-h"> </span><span class="crayon-o">/</span><span class="crayon-h"> </span><span class="crayon-v">n_batch</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-144"><span class="crayon-h">	</span><span class="crayon-v">half_batch</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-t">int</span><span class="crayon-sy">(</span><span class="crayon-v">n_batch</span><span class="crayon-h"> </span><span class="crayon-o">/</span><span class="crayon-h"> </span><span class="crayon-cn">2</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-145"><span class="crayon-h">	</span><span class="crayon-p"># manually enumerate epochs</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-146"><span class="crayon-h">	</span><span class="crayon-st">for</span><span class="crayon-h"> </span><span class="crayon-i">i</span><span class="crayon-h"> </span><span class="crayon-st">in</span><span class="crayon-h"> </span><span class="crayon-e">range</span><span class="crayon-sy">(</span><span class="crayon-v">n_epochs</span><span class="crayon-sy">)</span><span class="crayon-o">:</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-147"><span class="crayon-h">		</span><span class="crayon-p"># enumerate batches over the training set</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-148"><span class="crayon-h">		</span><span class="crayon-st">for</span><span class="crayon-h"> </span><span class="crayon-i">j</span><span class="crayon-h"> </span><span class="crayon-st">in</span><span class="crayon-h"> </span><span class="crayon-e">range</span><span class="crayon-sy">(</span><span class="crayon-v">bat_per_epo</span><span class="crayon-sy">)</span><span class="crayon-o">:</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-149"><span class="crayon-h">			</span><span class="crayon-p"># get randomly selected 'real' samples</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-150"><span class="crayon-h">			</span><span class="crayon-v">X_real</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">y_real</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">generate_real_samples</span><span class="crayon-sy">(</span><span class="crayon-v">dataset</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">half_batch</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-151"><span class="crayon-h">			</span><span class="crayon-p"># generate 'fake' examples</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-152"><span class="crayon-h">			</span><span class="crayon-v">X_fake</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">y_fake</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">generate_fake_samples</span><span class="crayon-sy">(</span><span class="crayon-v">g_model</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">latent_dim</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">half_batch</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-153"><span class="crayon-h">			</span><span class="crayon-p"># create training set for the discriminator</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-154"><span class="crayon-h">			</span><span class="crayon-v">X</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">y</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">vstack</span><span class="crayon-sy">(</span><span class="crayon-sy">(</span><span class="crayon-v">X_real</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">X_fake</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-e">vstack</span><span class="crayon-sy">(</span><span class="crayon-sy">(</span><span class="crayon-v">y_real</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">y_fake</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-155"><span class="crayon-h">			</span><span class="crayon-p"># update discriminator model weights</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-156"><span class="crayon-h">			</span><span class="crayon-v">d_loss</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">_</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">d_model</span><span class="crayon-sy">.</span><span class="crayon-e">train_on_batch</span><span class="crayon-sy">(</span><span class="crayon-v">X</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">y</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-157"><span class="crayon-h">			</span><span class="crayon-p"># prepare points in latent space as input for the generator</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-158"><span class="crayon-h">			</span><span class="crayon-v">X_gan</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">generate_latent_points</span><span class="crayon-sy">(</span><span class="crayon-v">latent_dim</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">n_batch</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-159"><span class="crayon-h">			</span><span class="crayon-p"># create inverted labels for the fake samples</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-160"><span class="crayon-h">			</span><span class="crayon-v">y_gan</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">ones</span><span class="crayon-sy">(</span><span class="crayon-sy">(</span><span class="crayon-v">n_batch</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">1</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-161"><span class="crayon-h">			</span><span class="crayon-p"># update the generator via the discriminator's error</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-162"><span class="crayon-h">			</span><span class="crayon-v">g_loss</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">gan_model</span><span class="crayon-sy">.</span><span class="crayon-e">train_on_batch</span><span class="crayon-sy">(</span><span class="crayon-v">X_gan</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">y_gan</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-163"><span class="crayon-h">			</span><span class="crayon-p"># summarize loss on this batch</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-164"><span class="crayon-h">			</span><span class="crayon-e">print</span><span class="crayon-sy">(</span><span class="crayon-s">'&gt;%d, %d/%d, d=%.3f, g=%.3f'</span><span class="crayon-h"> </span><span class="crayon-o">%</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-v">i</span><span class="crayon-o">+</span><span class="crayon-cn">1</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">j</span><span class="crayon-o">+</span><span class="crayon-cn">1</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">bat_per_epo</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">d_loss</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">g_loss</span><span class="crayon-sy">)</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-165"><span class="crayon-h">		</span><span class="crayon-p"># evaluate the model performance, sometimes</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-166"><span class="crayon-h">		</span><span class="crayon-st">if</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-v">i</span><span class="crayon-o">+</span><span class="crayon-cn">1</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-o">%</span><span class="crayon-h"> </span><span class="crayon-cn">10</span><span class="crayon-h"> </span><span class="crayon-o">==</span><span class="crayon-h"> </span><span class="crayon-cn">0</span><span class="crayon-o">:</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-167"><span class="crayon-h">			</span><span class="crayon-e">summarize_performance</span><span class="crayon-sy">(</span><span class="crayon-v">i</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">g_model</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">d_model</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">dataset</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">latent_dim</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-168">&nbsp;</div><div class="crayon-line" id="crayon-5e19f52d36986876356937-169"><span class="crayon-p"># size of the latent space</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-170"><span class="crayon-v">latent_dim</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-cn">100</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-171"><span class="crayon-p"># create the discriminator</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-172"><span class="crayon-v">d_model</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">define_discriminator</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-173"><span class="crayon-p"># create the generator</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-174"><span class="crayon-v">g_model</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">define_generator</span><span class="crayon-sy">(</span><span class="crayon-v">latent_dim</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-175"><span class="crayon-p"># create the gan</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-176"><span class="crayon-v">gan_model</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">define_gan</span><span class="crayon-sy">(</span><span class="crayon-v">g_model</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">d_model</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-177"><span class="crayon-p"># load image data</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-178"><span class="crayon-v">dataset</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">load_real_samples</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d36986876356937-179"><span class="crayon-p"># train model</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36986876356937-180"><span class="crayon-e">train</span><span class="crayon-sy">(</span><span class="crayon-v">g_model</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">d_model</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">gan_model</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">dataset</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">latent_dim</span><span class="crayon-sy">)</span></div></div></td>
					</tr>
				</tbody></table>
			</div>
		</div>
<!-- [Format Time: 0.0052 seconds] -->
<p>The chosen configuration results in the stable training of both the generative and discriminative model.</p>
<p>The model performance is reported every batch, including the loss of both the discriminative (<em>d</em>) and generative (<em>g</em>) models.</p>
<p><strong>Note</strong>: your specific results may vary given the stochastic nature of the training algorithm. Try running the example a few times.</p>
<p>In this case, the loss remains stable over the course of training.</p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div id="crayon-5e19f52d36987887876182" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover" style="margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important; height: auto;">
		
			<div class="crayon-toolbar" data-settings=" mouseover overlay hide delay" style="font-size: 12px !important; height: 18px !important; line-height: 18px !important; margin-top: -19px; display: none; position: absolute; z-index: 2;"><span class="crayon-title"></span>
			<div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><div class="crayon-button crayon-nums-button crayon-pressed" title="Toggle Line Numbers"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-expand-button" title="Expand Code" style="display: none;"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div></div></div>
			<div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important;"></div>
			<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly="" style="tab-size: 4; font-size: 12px !important; line-height: 15px !important; z-index: 0; opacity: 0; overflow: hidden;">&gt;1, 1/234, d=0.711, g=0.678
&gt;1, 2/234, d=0.703, g=0.698
&gt;1, 3/234, d=0.694, g=0.717
&gt;1, 4/234, d=0.684, g=0.740
&gt;1, 5/234, d=0.679, g=0.757
&gt;1, 6/234, d=0.668, g=0.777
...
&gt;100, 230/234, d=0.690, g=0.710
&gt;100, 231/234, d=0.692, g=0.705
&gt;100, 232/234, d=0.698, g=0.701
&gt;100, 233/234, d=0.697, g=0.688
&gt;100, 234/234, d=0.693, g=0.698</textarea></div>
			<div class="crayon-main" style="position: relative; z-index: 1; overflow: hidden;">
				<table class="crayon-table" style="">
					<tbody><tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-5e19f52d36987887876182-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36987887876182-2">2</div><div class="crayon-num" data-line="crayon-5e19f52d36987887876182-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36987887876182-4">4</div><div class="crayon-num" data-line="crayon-5e19f52d36987887876182-5">5</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36987887876182-6">6</div><div class="crayon-num" data-line="crayon-5e19f52d36987887876182-7">7</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36987887876182-8">8</div><div class="crayon-num" data-line="crayon-5e19f52d36987887876182-9">9</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36987887876182-10">10</div><div class="crayon-num" data-line="crayon-5e19f52d36987887876182-11">11</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36987887876182-12">12</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-5e19f52d36987887876182-1">&gt;1, 1/234, d=0.711, g=0.678</div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36987887876182-2">&gt;1, 2/234, d=0.703, g=0.698</div><div class="crayon-line" id="crayon-5e19f52d36987887876182-3">&gt;1, 3/234, d=0.694, g=0.717</div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36987887876182-4">&gt;1, 4/234, d=0.684, g=0.740</div><div class="crayon-line" id="crayon-5e19f52d36987887876182-5">&gt;1, 5/234, d=0.679, g=0.757</div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36987887876182-6">&gt;1, 6/234, d=0.668, g=0.777</div><div class="crayon-line" id="crayon-5e19f52d36987887876182-7">...</div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36987887876182-8">&gt;100, 230/234, d=0.690, g=0.710</div><div class="crayon-line" id="crayon-5e19f52d36987887876182-9">&gt;100, 231/234, d=0.692, g=0.705</div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36987887876182-10">&gt;100, 232/234, d=0.698, g=0.701</div><div class="crayon-line" id="crayon-5e19f52d36987887876182-11">&gt;100, 233/234, d=0.697, g=0.688</div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36987887876182-12">&gt;100, 234/234, d=0.693, g=0.698</div></div></td>
					</tr>
				</tbody></table>
			</div>
		</div>
<!-- [Format Time: 0.0000 seconds] -->
<p>The generator is evaluated every 20 epochs, resulting in 10 evaluations, 10 plots of generated images, and 10 saved models.</p>
<p>In this case, we can see that the accuracy fluctuates over training. When viewing the discriminator model’s accuracy score in concert with generated images, we can see that the accuracy on fake examples does not correlate well with the subjective quality of images, but the accuracy for real examples may.</p>
<p>It is crude and possibly unreliable metric of GAN performance, along with loss.</p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div id="crayon-5e19f52d36989007211945" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover" style="margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important; height: auto;">
		
			<div class="crayon-toolbar" data-settings=" mouseover overlay hide delay" style="font-size: 12px !important; height: 18px !important; line-height: 18px !important; margin-top: -19px; display: none; position: absolute; z-index: 2;"><span class="crayon-title"></span>
			<div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><div class="crayon-button crayon-nums-button crayon-pressed" title="Toggle Line Numbers"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-expand-button" title="Expand Code" style="display: none;"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div></div></div>
			<div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important;"></div>
			<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly="" style="tab-size: 4; font-size: 12px !important; line-height: 15px !important; z-index: 0; opacity: 0; overflow: hidden;">&gt;Accuracy real: 51%, fake: 78%
&gt;Accuracy real: 30%, fake: 95%
&gt;Accuracy real: 75%, fake: 59%
&gt;Accuracy real: 98%, fake: 11%
&gt;Accuracy real: 27%, fake: 92%
&gt;Accuracy real: 21%, fake: 92%
&gt;Accuracy real: 29%, fake: 96%
&gt;Accuracy real: 4%, fake: 99%
&gt;Accuracy real: 18%, fake: 97%
&gt;Accuracy real: 28%, fake: 89%</textarea></div>
			<div class="crayon-main" style="position: relative; z-index: 1; overflow: hidden;">
				<table class="crayon-table" style="">
					<tbody><tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-5e19f52d36989007211945-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36989007211945-2">2</div><div class="crayon-num" data-line="crayon-5e19f52d36989007211945-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36989007211945-4">4</div><div class="crayon-num" data-line="crayon-5e19f52d36989007211945-5">5</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36989007211945-6">6</div><div class="crayon-num" data-line="crayon-5e19f52d36989007211945-7">7</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36989007211945-8">8</div><div class="crayon-num" data-line="crayon-5e19f52d36989007211945-9">9</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d36989007211945-10">10</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-5e19f52d36989007211945-1">&gt;Accuracy real: 51%, fake: 78%</div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36989007211945-2">&gt;Accuracy real: 30%, fake: 95%</div><div class="crayon-line" id="crayon-5e19f52d36989007211945-3">&gt;Accuracy real: 75%, fake: 59%</div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36989007211945-4">&gt;Accuracy real: 98%, fake: 11%</div><div class="crayon-line" id="crayon-5e19f52d36989007211945-5">&gt;Accuracy real: 27%, fake: 92%</div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36989007211945-6">&gt;Accuracy real: 21%, fake: 92%</div><div class="crayon-line" id="crayon-5e19f52d36989007211945-7">&gt;Accuracy real: 29%, fake: 96%</div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36989007211945-8">&gt;Accuracy real: 4%, fake: 99%</div><div class="crayon-line" id="crayon-5e19f52d36989007211945-9">&gt;Accuracy real: 18%, fake: 97%</div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d36989007211945-10">&gt;Accuracy real: 28%, fake: 89%</div></div></td>
					</tr>
				</tbody></table>
			</div>
		</div>
<!-- [Format Time: 0.0000 seconds] -->
<p>More training, beyond some point, does not mean better quality generated images.</p>
<p>In this case, the results after 10 epochs are low quality, although we can see that the generator has learned to generate centered figures in white on a back background (recall we have inverted the grayscale in the plot).</p>
<div id="attachment_8109" style="width: 650px" class="wp-caption aligncenter"><img aria-describedby="caption-attachment-8109" class="size-full wp-image-8109" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/Plot-of-100-GAN-Generated-MNIST-Figures-After-10-Epochs.png" alt="Plot of 100 GAN Generated MNIST Figures After 10 Epochs" width="640" height="480" srcset="https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/uploads/2019/04/Plot-of-100-GAN-Generated-MNIST-Figures-After-10-Epochs.png 640w, https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/uploads/2019/04/Plot-of-100-GAN-Generated-MNIST-Figures-After-10-Epochs-300x225.png 300w" sizes="(max-width: 640px) 100vw, 640px"><p id="caption-attachment-8109" class="wp-caption-text">Plot of 100 GAN Generated MNIST Figures After 10 Epochs</p></div>
<p>After 20 or 30 more epochs, the model begins to generate very plausible MNIST figures, suggesting that 100 epochs are probably not required for the chosen model configurations.</p>
<div id="attachment_8110" style="width: 650px" class="wp-caption aligncenter"><img aria-describedby="caption-attachment-8110" class="size-full wp-image-8110" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/Plot-of-100-GAN-Generated-MNIST-Figures-After-40-Epochs.png" alt="Plot of 100 GAN Generated MNIST Figures After 40 Epochs" width="640" height="480" srcset="https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/uploads/2019/04/Plot-of-100-GAN-Generated-MNIST-Figures-After-40-Epochs.png 640w, https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/uploads/2019/04/Plot-of-100-GAN-Generated-MNIST-Figures-After-40-Epochs-300x225.png 300w" sizes="(max-width: 640px) 100vw, 640px"><p id="caption-attachment-8110" class="wp-caption-text">Plot of 100 GAN Generated MNIST Figures After 40 Epochs</p></div>
<p>The generated images after 100 epochs are not greatly different, but I believe I can detect less blocky-ness in the curves.</p>
<div id="attachment_8111" style="width: 650px" class="wp-caption aligncenter"><img aria-describedby="caption-attachment-8111" class="size-full wp-image-8111" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/Plot-of-100-GAN-Generated-MNIST-Figures-After-100-Epochs.png" alt="Plot of 100 GAN Generated MNIST Figures After 100 Epochs" width="640" height="480" srcset="https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/uploads/2019/04/Plot-of-100-GAN-Generated-MNIST-Figures-After-100-Epochs.png 640w, https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/uploads/2019/04/Plot-of-100-GAN-Generated-MNIST-Figures-After-100-Epochs-300x225.png 300w" sizes="(max-width: 640px) 100vw, 640px"><p id="caption-attachment-8111" class="wp-caption-text">Plot of 100 GAN Generated MNIST Figures After 100 Epochs</p></div>
<h2>How to Use the Final Generator Model to Generate Images</h2>
<p>Once a final generator model is selected, it can be used in a standalone manner for your application.</p>
<p>This involves first loading the model from file, then using it to generate images. The generation of each image requires a point in the latent space as input.</p>
<p>The complete example of loading the saved model and generating images is listed below. In this case, we will use the model saved after 100 training epochs, but the model saved after 40 or 50 epochs would work just as well.</p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div id="crayon-5e19f52d3698a307357816" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover" style="margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important; height: auto;">
		
			<div class="crayon-toolbar" data-settings=" mouseover overlay hide delay" style="font-size: 12px !important; height: 18px !important; line-height: 18px !important; margin-top: -19px; display: none; position: absolute; z-index: 2;"><span class="crayon-title"></span>
			<div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><div class="crayon-button crayon-nums-button crayon-pressed" title="Toggle Line Numbers"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-expand-button" title="Expand Code" style="display: none;"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div></div></div>
			<div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important;"></div>
			<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly="" style="tab-size: 4; font-size: 12px !important; line-height: 15px !important; z-index: 0; opacity: 0; overflow: hidden;"># example of loading the generator model and generating images
from keras.models import load_model
from numpy.random import randn
from matplotlib import pyplot

# generate points in latent space as input for the generator
def generate_latent_points(latent_dim, n_samples):
	# generate points in the latent space
	x_input = randn(latent_dim * n_samples)
	# reshape into a batch of inputs for the network
	x_input = x_input.reshape(n_samples, latent_dim)
	return x_input

# create and save a plot of generated images (reversed grayscale)
def save_plot(examples, n):
	# plot images
	for i in range(n * n):
		# define subplot
		pyplot.subplot(n, n, 1 + i)
		# turn off axis
		pyplot.axis('off')
		# plot raw pixel data
		pyplot.imshow(examples[i, :, :, 0], cmap='gray_r')
	pyplot.show()

# load model
model = load_model('generator_model_100.h5')
# generate images
latent_points = generate_latent_points(100, 25)
# generate images
X = model.predict(latent_points)
# plot the result
save_plot(X, 5)</textarea></div>
			<div class="crayon-main" style="position: relative; z-index: 1; overflow: hidden;">
				<table class="crayon-table" style="">
					<tbody><tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-5e19f52d3698a307357816-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3698a307357816-2">2</div><div class="crayon-num" data-line="crayon-5e19f52d3698a307357816-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3698a307357816-4">4</div><div class="crayon-num" data-line="crayon-5e19f52d3698a307357816-5">5</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3698a307357816-6">6</div><div class="crayon-num" data-line="crayon-5e19f52d3698a307357816-7">7</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3698a307357816-8">8</div><div class="crayon-num" data-line="crayon-5e19f52d3698a307357816-9">9</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3698a307357816-10">10</div><div class="crayon-num" data-line="crayon-5e19f52d3698a307357816-11">11</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3698a307357816-12">12</div><div class="crayon-num" data-line="crayon-5e19f52d3698a307357816-13">13</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3698a307357816-14">14</div><div class="crayon-num" data-line="crayon-5e19f52d3698a307357816-15">15</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3698a307357816-16">16</div><div class="crayon-num" data-line="crayon-5e19f52d3698a307357816-17">17</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3698a307357816-18">18</div><div class="crayon-num" data-line="crayon-5e19f52d3698a307357816-19">19</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3698a307357816-20">20</div><div class="crayon-num" data-line="crayon-5e19f52d3698a307357816-21">21</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3698a307357816-22">22</div><div class="crayon-num" data-line="crayon-5e19f52d3698a307357816-23">23</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3698a307357816-24">24</div><div class="crayon-num" data-line="crayon-5e19f52d3698a307357816-25">25</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3698a307357816-26">26</div><div class="crayon-num" data-line="crayon-5e19f52d3698a307357816-27">27</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3698a307357816-28">28</div><div class="crayon-num" data-line="crayon-5e19f52d3698a307357816-29">29</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3698a307357816-30">30</div><div class="crayon-num" data-line="crayon-5e19f52d3698a307357816-31">31</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3698a307357816-32">32</div><div class="crayon-num" data-line="crayon-5e19f52d3698a307357816-33">33</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-5e19f52d3698a307357816-1"><span class="crayon-p"># example of loading the generator model and generating images</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3698a307357816-2"><span class="crayon-e">from </span><span class="crayon-v">keras</span><span class="crayon-sy">.</span><span class="crayon-e">models </span><span class="crayon-e">import </span><span class="crayon-e">load_model</span></div><div class="crayon-line" id="crayon-5e19f52d3698a307357816-3"><span class="crayon-e">from </span><span class="crayon-v">numpy</span><span class="crayon-sy">.</span><span class="crayon-e">random </span><span class="crayon-e">import </span><span class="crayon-e">randn</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3698a307357816-4"><span class="crayon-e">from </span><span class="crayon-e">matplotlib </span><span class="crayon-e">import </span><span class="crayon-v">pyplot</span></div><div class="crayon-line" id="crayon-5e19f52d3698a307357816-5">&nbsp;</div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3698a307357816-6"><span class="crayon-p"># generate points in latent space as input for the generator</span></div><div class="crayon-line" id="crayon-5e19f52d3698a307357816-7"><span class="crayon-e">def </span><span class="crayon-e">generate_latent_points</span><span class="crayon-sy">(</span><span class="crayon-v">latent_dim</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">n_samples</span><span class="crayon-sy">)</span><span class="crayon-o">:</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3698a307357816-8"><span class="crayon-h">	</span><span class="crayon-p"># generate points in the latent space</span></div><div class="crayon-line" id="crayon-5e19f52d3698a307357816-9"><span class="crayon-h">	</span><span class="crayon-v">x_input</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">randn</span><span class="crayon-sy">(</span><span class="crayon-e ">latent_dim *</span><span class="crayon-h"> </span><span class="crayon-v">n_samples</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3698a307357816-10"><span class="crayon-h">	</span><span class="crayon-p"># reshape into a batch of inputs for the network</span></div><div class="crayon-line" id="crayon-5e19f52d3698a307357816-11"><span class="crayon-h">	</span><span class="crayon-v">x_input</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">x_input</span><span class="crayon-sy">.</span><span class="crayon-e">reshape</span><span class="crayon-sy">(</span><span class="crayon-v">n_samples</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">latent_dim</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3698a307357816-12"><span class="crayon-h">	</span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-v">x_input</span></div><div class="crayon-line" id="crayon-5e19f52d3698a307357816-13">&nbsp;</div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3698a307357816-14"><span class="crayon-p"># create and save a plot of generated images (reversed grayscale)</span></div><div class="crayon-line" id="crayon-5e19f52d3698a307357816-15"><span class="crayon-e">def </span><span class="crayon-e">save_plot</span><span class="crayon-sy">(</span><span class="crayon-v">examples</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">n</span><span class="crayon-sy">)</span><span class="crayon-o">:</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3698a307357816-16"><span class="crayon-h">	</span><span class="crayon-p"># plot images</span></div><div class="crayon-line" id="crayon-5e19f52d3698a307357816-17"><span class="crayon-h">	</span><span class="crayon-st">for</span><span class="crayon-h"> </span><span class="crayon-i">i</span><span class="crayon-h"> </span><span class="crayon-st">in</span><span class="crayon-h"> </span><span class="crayon-e">range</span><span class="crayon-sy">(</span><span class="crayon-e ">n *</span><span class="crayon-h"> </span><span class="crayon-v">n</span><span class="crayon-sy">)</span><span class="crayon-o">:</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3698a307357816-18"><span class="crayon-h">		</span><span class="crayon-p"># define subplot</span></div><div class="crayon-line" id="crayon-5e19f52d3698a307357816-19"><span class="crayon-h">		</span><span class="crayon-v">pyplot</span><span class="crayon-sy">.</span><span class="crayon-e">subplot</span><span class="crayon-sy">(</span><span class="crayon-v">n</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">n</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">1</span><span class="crayon-h"> </span><span class="crayon-o">+</span><span class="crayon-h"> </span><span class="crayon-v">i</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3698a307357816-20"><span class="crayon-h">		</span><span class="crayon-p"># turn off axis</span></div><div class="crayon-line" id="crayon-5e19f52d3698a307357816-21"><span class="crayon-h">		</span><span class="crayon-v">pyplot</span><span class="crayon-sy">.</span><span class="crayon-e">axis</span><span class="crayon-sy">(</span><span class="crayon-s">'off'</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3698a307357816-22"><span class="crayon-h">		</span><span class="crayon-p"># plot raw pixel data</span></div><div class="crayon-line" id="crayon-5e19f52d3698a307357816-23"><span class="crayon-h">		</span><span class="crayon-v">pyplot</span><span class="crayon-sy">.</span><span class="crayon-e">imshow</span><span class="crayon-sy">(</span><span class="crayon-v">examples</span><span class="crayon-sy">[</span><span class="crayon-v">i</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-o">:</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-o">:</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">0</span><span class="crayon-sy">]</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">cmap</span><span class="crayon-o">=</span><span class="crayon-s">'gray_r'</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3698a307357816-24"><span class="crayon-h">	</span><span class="crayon-v">pyplot</span><span class="crayon-sy">.</span><span class="crayon-e">show</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d3698a307357816-25">&nbsp;</div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3698a307357816-26"><span class="crayon-p"># load model</span></div><div class="crayon-line" id="crayon-5e19f52d3698a307357816-27"><span class="crayon-v">model</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">load_model</span><span class="crayon-sy">(</span><span class="crayon-s">'generator_model_100.h5'</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3698a307357816-28"><span class="crayon-p"># generate images</span></div><div class="crayon-line" id="crayon-5e19f52d3698a307357816-29"><span class="crayon-v">latent_points</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">generate_latent_points</span><span class="crayon-sy">(</span><span class="crayon-cn">100</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">25</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3698a307357816-30"><span class="crayon-p"># generate images</span></div><div class="crayon-line" id="crayon-5e19f52d3698a307357816-31"><span class="crayon-v">X</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">predict</span><span class="crayon-sy">(</span><span class="crayon-v">latent_points</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3698a307357816-32"><span class="crayon-p"># plot the result</span></div><div class="crayon-line" id="crayon-5e19f52d3698a307357816-33"><span class="crayon-e">save_plot</span><span class="crayon-sy">(</span><span class="crayon-v">X</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">5</span><span class="crayon-sy">)</span></div></div></td>
					</tr>
				</tbody></table>
			</div>
		</div>
<!-- [Format Time: 0.0008 seconds] -->
<p>Running the example first loads the model, samples 25 random points in the latent space, generates 25 images, then plots the results as a single image.</p>
<p>We can see that most of the images are plausible, or plausible pieces of handwritten digits.</p>
<div id="attachment_8112" style="width: 1034px" class="wp-caption aligncenter"><img aria-describedby="caption-attachment-8112" class="size-large wp-image-8112" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/Example-of-25-GAN-Generated-MNIST-Handwritten-Images-1024x768.png" alt="Example of 25 GAN Generated MNIST Handwritten Images" width="1024" height="768" srcset="https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/uploads/2019/04/Example-of-25-GAN-Generated-MNIST-Handwritten-Images-1024x768.png 1024w, https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/uploads/2019/04/Example-of-25-GAN-Generated-MNIST-Handwritten-Images-300x225.png 300w, https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/uploads/2019/04/Example-of-25-GAN-Generated-MNIST-Handwritten-Images-768x576.png 768w, https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/uploads/2019/04/Example-of-25-GAN-Generated-MNIST-Handwritten-Images.png 1280w" sizes="(max-width: 1024px) 100vw, 1024px"><p id="caption-attachment-8112" class="wp-caption-text">Example of 25 GAN Generated MNIST Handwritten Images</p></div>
<p>The latent space now defines a compressed representation of MNIST handwritten digits.</p>
<p>You can experiment with generating different points in this space and see what types of numbers they generate.</p>
<p>The example below generates a single handwritten digit using a vector of all 0.0 values.</p><!-- Crayon Syntax Highlighter v_2.7.2_beta -->

		<div id="crayon-5e19f52d3698b160426155" class="crayon-syntax crayon-theme-classic crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" minimize scroll-mouseover" style="margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important; height: auto;">
		
			<div class="crayon-toolbar" data-settings=" mouseover overlay hide delay" style="font-size: 12px !important; height: 18px !important; line-height: 18px !important; margin-top: -19px; display: none; position: absolute; z-index: 2;"><span class="crayon-title"></span>
			<div class="crayon-tools" style="font-size: 12px !important;height: 18px !important; line-height: 18px !important;"><div class="crayon-button crayon-nums-button crayon-pressed" title="Toggle Line Numbers"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-plain-button" title="Toggle Plain Code"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-wrap-button" title="Toggle Line Wrap"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-expand-button" title="Expand Code" style="display: none;"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-copy-button" title="Copy"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div><div class="crayon-button crayon-popup-button" title="Open Code In New Window"><div class="crayon-button-icon" style="background-size: 48px 128px; background-image: url(&quot;https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/plugins/crayon-syntax-highlighter/css/images/toolbar/buttons@2x.png&quot;);"></div></div></div></div>
			<div class="crayon-info" style="min-height: 16.8px !important; line-height: 16.8px !important;"></div>
			<div class="crayon-plain-wrap"><textarea wrap="soft" class="crayon-plain print-no" data-settings="dblclick" readonly="" style="tab-size: 4; font-size: 12px !important; line-height: 15px !important; z-index: 0; opacity: 0; overflow: hidden;"># example of generating an image for a specific point in the latent space
from keras.models import load_model
from numpy import asarray
from matplotlib import pyplot
# load model
model = load_model('generator_model_100.h5')
# all 0s
vector = asarray([[0.0 for _ in range(100)]])
# generate image
X = model.predict(vector)
# plot the result
pyplot.imshow(X[0, :, :, 0], cmap='gray_r')
pyplot.show()</textarea></div>
			<div class="crayon-main" style="position: relative; z-index: 1; overflow: hidden;">
				<table class="crayon-table" style="">
					<tbody><tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-5e19f52d3698b160426155-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3698b160426155-2">2</div><div class="crayon-num" data-line="crayon-5e19f52d3698b160426155-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3698b160426155-4">4</div><div class="crayon-num" data-line="crayon-5e19f52d3698b160426155-5">5</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3698b160426155-6">6</div><div class="crayon-num" data-line="crayon-5e19f52d3698b160426155-7">7</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3698b160426155-8">8</div><div class="crayon-num" data-line="crayon-5e19f52d3698b160426155-9">9</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3698b160426155-10">10</div><div class="crayon-num" data-line="crayon-5e19f52d3698b160426155-11">11</div><div class="crayon-num crayon-striped-num" data-line="crayon-5e19f52d3698b160426155-12">12</div><div class="crayon-num" data-line="crayon-5e19f52d3698b160426155-13">13</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-5e19f52d3698b160426155-1"><span class="crayon-p"># example of generating an image for a specific point in the latent space</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3698b160426155-2"><span class="crayon-e">from </span><span class="crayon-v">keras</span><span class="crayon-sy">.</span><span class="crayon-e">models </span><span class="crayon-e">import </span><span class="crayon-e">load_model</span></div><div class="crayon-line" id="crayon-5e19f52d3698b160426155-3"><span class="crayon-e">from </span><span class="crayon-e">numpy </span><span class="crayon-e">import </span><span class="crayon-e">asarray</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3698b160426155-4"><span class="crayon-e">from </span><span class="crayon-e">matplotlib </span><span class="crayon-e">import </span><span class="crayon-v">pyplot</span></div><div class="crayon-line" id="crayon-5e19f52d3698b160426155-5"><span class="crayon-p"># load model</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3698b160426155-6"><span class="crayon-v">model</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">load_model</span><span class="crayon-sy">(</span><span class="crayon-s">'generator_model_100.h5'</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d3698b160426155-7"><span class="crayon-p"># all 0s</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3698b160426155-8"><span class="crayon-v">vector</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-e">asarray</span><span class="crayon-sy">(</span><span class="crayon-sy">[</span><span class="crayon-sy">[</span><span class="crayon-cn">0.0</span><span class="crayon-h"> </span><span class="crayon-st">for</span><span class="crayon-h"> </span><span class="crayon-i">_</span><span class="crayon-h"> </span><span class="crayon-st">in</span><span class="crayon-h"> </span><span class="crayon-e">range</span><span class="crayon-sy">(</span><span class="crayon-cn">100</span><span class="crayon-sy">)</span><span class="crayon-sy">]</span><span class="crayon-sy">]</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d3698b160426155-9"><span class="crayon-p"># generate image</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3698b160426155-10"><span class="crayon-v">X</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">model</span><span class="crayon-sy">.</span><span class="crayon-e">predict</span><span class="crayon-sy">(</span><span class="crayon-v">vector</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d3698b160426155-11"><span class="crayon-p"># plot the result</span></div><div class="crayon-line crayon-striped-line" id="crayon-5e19f52d3698b160426155-12"><span class="crayon-v">pyplot</span><span class="crayon-sy">.</span><span class="crayon-e">imshow</span><span class="crayon-sy">(</span><span class="crayon-v">X</span><span class="crayon-sy">[</span><span class="crayon-cn">0</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-o">:</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-o">:</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">0</span><span class="crayon-sy">]</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">cmap</span><span class="crayon-o">=</span><span class="crayon-s">'gray_r'</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-5e19f52d3698b160426155-13"><span class="crayon-v">pyplot</span><span class="crayon-sy">.</span><span class="crayon-e">show</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span></div></div></td>
					</tr>
				</tbody></table>
			</div>
		</div>
<!-- [Format Time: 0.0004 seconds] -->
<p><strong>Note</strong>: Your specific results may vary given the stochastic nature of the model and the learning algorithm.</p>
<p>In this case, a vector of all zeros results in a handwritten 9 or maybe an 8. You can then try navigating the space and see if you can generate a range of similar, but different handwritten digits.</p>
<div id="attachment_8113" style="width: 310px" class="wp-caption aligncenter"><img aria-describedby="caption-attachment-8113" class="wp-image-8113 size-medium" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/Example-of-a-GAN-Generated-MNIST-Handwritten-Digit-for-a-Vector-of-Zeros-300x225.png" alt="Example of a GAN Generated MNIST Handwritten Digit for a Vector of Zeros" width="300" height="225" srcset="https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/uploads/2019/04/Example-of-a-GAN-Generated-MNIST-Handwritten-Digit-for-a-Vector-of-Zeros-300x225.png 300w, https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/uploads/2019/04/Example-of-a-GAN-Generated-MNIST-Handwritten-Digit-for-a-Vector-of-Zeros-768x576.png 768w, https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/uploads/2019/04/Example-of-a-GAN-Generated-MNIST-Handwritten-Digit-for-a-Vector-of-Zeros-1024x768.png 1024w, https://3qeqpr26caki16dnhd19sv6by6v-wpengine.netdna-ssl.com/wp-content/uploads/2019/04/Example-of-a-GAN-Generated-MNIST-Handwritten-Digit-for-a-Vector-of-Zeros.png 1280w" sizes="(max-width: 300px) 100vw, 300px"><p id="caption-attachment-8113" class="wp-caption-text">Example of a GAN Generated MNIST Handwritten Digit for a Vector of Zeros</p></div>
<h2>Extensions</h2>
<p>This section lists some ideas for extending the tutorial that you may wish to explore.</p>
<ul>
<li><strong>TanH Activation and Scaling</strong>. Update the example to use the tanh activation function in the generator and scale all pixel values to the range [-1, 1].</li>
<li><strong>Change Latent Space</strong>. Update the example to use a larger or smaller latent space and compare the quality of the results and speed of training.</li>
<li><strong>Batch Normalization</strong>. Update the discriminator and/or the generator to make use of batch normalization, recommended for DCGAN models.</li>
<li><strong>Label Smoothing</strong>. Update the example to use one-sided label smoothing when training the discriminator, specifically change the target label of real examples from 1.0 to 0.9, and review the effects on image quality and speed of training.</li>
<li><strong>Model Configuration</strong>. Update the model configuration to use deeper or more shallow discriminator and/or generator models, perhaps experiment with the UpSampling2D layers in the generator.</li>
</ul>
<p>If you explore any of these extensions, I’d love to know.<br>
Post your findings in the comments below.</p>
<h2>Further Reading</h2>
<p>This section provides more resources on the topic if you are looking to go deeper.</p>
<h3>Books</h3>
<ul>
<li>Chapter 20. Deep Generative Models, <a href="https://amzn.to/2YuwVjL">Deep Learning</a>, 2016.</li>
<li>Chapter 8. Generative Deep Learning, <a href="https://amzn.to/2U2bHuP">Deep Learning with Python</a>, 2017.</li>
</ul>
<h3>Papers</h3>
<ul>
<li><a href="https://arxiv.org/abs/1406.2661">Generative Adversarial Networks</a>, 2014.</li>
<li><a href="https://arxiv.org/abs/1701.00160">Tutorial: Generative Adversarial Networks, NIPS</a>, 2016.</li>
<li><a href="https://arxiv.org/abs/1511.06434">Unsupervised Representation Learning with Deep Convolutional Generative Adversarial Networks</a>, 2015</li>
</ul>
<h3>API</h3>
<ul>
<li><a href="https://keras.io/datasets/">Keras Datasets API</a></li>
<li><a href="https://keras.io/models/sequential/">Keras Sequential Model API</a></li>
<li><a href="https://keras.io/layers/convolutional/">Keras Convolutional Layers API</a></li>
<li><a href="https://keras.io/getting-started/faq/#how-can-i-freeze-keras-layers">How can I “freeze” Keras layers?</a></li>
<li><a href="https://matplotlib.org/api/">MatplotLib API</a></li>
<li><a href="https://docs.scipy.org/doc/numpy/reference/routines.random.html">NumPy Random sampling (numpy.random) API</a></li>
<li><a href="https://docs.scipy.org/doc/numpy/reference/routines.array-manipulation.html">NumPy Array manipulation routines</a></li>
</ul>
<h3>Posts</h3>
<ul>
<li><a href="https://machinelearningmastery.com/how-to-generate-random-numbers-in-python/">How to Generate Random Numbers in Python</a></li>
</ul>
<h3>Articles</h3>
<ul>
<li><a href="https://en.wikipedia.org/wiki/MNIST_database">MNIST Dataset, Wikipedia</a>.</li>
<li><a href="https://github.com/kroosen/GAN-in-keras-on-mnist">GAN-in-keras-on-mnist Project, GitHub</a>.</li>
<li><a href="https://github.com/eriklindernoren/Keras-GAN">Keras-GAN Project, GitHub</a>.</li>
<li><a href="https://github.com/Zackory/Keras-MNIST-GAN">Keras-MNIST-GAN Project, GitHub</a>.</li>
</ul>
<h2>Summary</h2>
<p>In this tutorial, you discovered how to develop a generative adversarial network with deep convolutional networks for generating handwritten digits.</p>
<p>Specifically, you learned:</p>
<ul>
<li>How to define and train the standalone discriminator model for learning the difference between real and fake images.</li>
<li>How to define the standalone generator model and train the composite generator and discriminator model.</li>
<li>How to evaluate the performance of the GAN and use the final standalone generator model to generate new images.</li>
</ul>
<p>Do you have any questions?<br>
Ask your questions in the comments below and I will do my best to answer.</p>
<div class="widget_text awac-wrapper"><div class="widget_text awac widget custom_html-6"><div class="textwidget custom-html-widget"><div style="text-align: center;">
<div class="woo-sc-hr"></div>
<h2>Develop Generative Adversarial Networks Today!</h2>
<a href="https://machinelearningmastery.com/generative_adversarial_networks/" rel="nofollow"><img style="border: 0;" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/Generative-Adversarial-Networks-with-Python-220.png" alt="Generative Adversarial Networks with Python" align="left"></a>
	
<p></p><h4>Develop Your GAN Models in Minutes</h4>
...with just a few lines of python code<p></p>

<p>Discover how in my new Ebook:<br>
	<a href="https://machinelearningmastery.com/generative_adversarial_networks/" rel="nofollow">Generative Adversarial Networks with Python</a></p>

<p>It provides <strong>self-study tutorials</strong> and <strong>end-to-end projects</strong> on:<br> 
	<em>DCGAN</em>, <em>conditional GANs</em>, <em>image translation</em>, <em>Pix2Pix</em>, <em>CycleGAN</em><br>
	and much more...</p>

<p></p><h4>Finally Bring GAN Models to your Vision Projects</h4>
Skip the Academics. Just Results.<p></p>

<a href="https://machinelearningmastery.com/generative_adversarial_networks/" class="woo-sc-button  custom" style="background:;border-color:"><span class="woo-">See What's Inside</span></a>
<div class="woo-sc-hr"></div>
</div></div></div></div><div class="simplesocialbuttons simplesocial-simple-icons simplesocialbuttons_inline simplesocialbuttons-align-left post-8099 post  simplesocialbuttons-inline-no-animation">
<button class="ssb_tweet-icon" data-href="https://twitter.com/share?text=How+to+Develop+a+GAN+for+Generating+MNIST+Handwritten+Digits&amp;url=https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/" rel="nofollow" onclick="javascript:window.open(this.dataset.href, &#39;&#39;, &#39;menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=600,width=600&#39;);return false;">
						<span class="icon"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 72"><path fill="none" d="M0 0h72v72H0z"></path><path class="icon" fill="#fff" d="M68.812 15.14c-2.348 1.04-4.87 1.744-7.52 2.06 2.704-1.62 4.78-4.186 5.757-7.243-2.53 1.5-5.33 2.592-8.314 3.176C56.35 10.59 52.948 9 49.182 9c-7.23 0-13.092 5.86-13.092 13.093 0 1.026.118 2.02.338 2.98C25.543 24.527 15.9 19.318 9.44 11.396c-1.125 1.936-1.77 4.184-1.77 6.58 0 4.543 2.312 8.552 5.824 10.9-2.146-.07-4.165-.658-5.93-1.64-.002.056-.002.11-.002.163 0 6.345 4.513 11.638 10.504 12.84-1.1.298-2.256.457-3.45.457-.845 0-1.666-.078-2.464-.23 1.667 5.2 6.5 8.985 12.23 9.09-4.482 3.51-10.13 5.605-16.26 5.605-1.055 0-2.096-.06-3.122-.184 5.794 3.717 12.676 5.882 20.067 5.882 24.083 0 37.25-19.95 37.25-37.25 0-.565-.013-1.133-.038-1.693 2.558-1.847 4.778-4.15 6.532-6.774z"></path></svg></span><i class="simplesocialtxt">Tweet </i></button>
		<button class="ssb_fbshare-icon" target="_blank" data-href="https://www.facebook.com/sharer/sharer.php?u=https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/" onclick="javascript:window.open(this.dataset.href, &#39;&#39;, &#39;menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=600,width=600&#39;);return false;">
						<span class="icon"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" class="_1pbq" color="#ffffff"><path fill="#ffffff" fill-rule="evenodd" class="icon" d="M8 14H3.667C2.733 13.9 2 13.167 2 12.233V3.667A1.65 1.65 0 0 1 3.667 2h8.666A1.65 1.65 0 0 1 14 3.667v8.566c0 .934-.733 1.667-1.667 1.767H10v-3.967h1.3l.7-2.066h-2V6.933c0-.466.167-.9.867-.9H12v-1.8c.033 0-.933-.266-1.533-.266-1.267 0-2.434.7-2.467 2.133v1.867H6v2.066h2V14z"></path></svg></span>
						<span class="simplesocialtxt">Share </span> </button>
<button class="ssb_linkedin-icon" data-href="https://www.linkedin.com/cws/share?url=https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/" onclick="javascript:window.open(this.dataset.href, &#39;&#39;, &#39;menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=600,width=600&#39;);return false;">
						<span class="icon"> <svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="15px" height="14.1px" viewBox="-301.4 387.5 15 14.1" enable-background="new -301.4 387.5 15 14.1" xml:space="preserve"> <g id="XMLID_398_"> <path id="XMLID_399_" fill="#FFFFFF" d="M-296.2,401.6c0-3.2,0-6.3,0-9.5h0.1c1,0,2,0,2.9,0c0.1,0,0.1,0,0.1,0.1c0,0.4,0,0.8,0,1.2 c0.1-0.1,0.2-0.3,0.3-0.4c0.5-0.7,1.2-1,2.1-1.1c0.8-0.1,1.5,0,2.2,0.3c0.7,0.4,1.2,0.8,1.5,1.4c0.4,0.8,0.6,1.7,0.6,2.5 c0,1.8,0,3.6,0,5.4v0.1c-1.1,0-2.1,0-3.2,0c0-0.1,0-0.1,0-0.2c0-1.6,0-3.2,0-4.8c0-0.4,0-0.8-0.2-1.2c-0.2-0.7-0.8-1-1.6-1 c-0.8,0.1-1.3,0.5-1.6,1.2c-0.1,0.2-0.1,0.5-0.1,0.8c0,1.7,0,3.4,0,5.1c0,0.2,0,0.2-0.2,0.2c-1,0-1.9,0-2.9,0 C-296.1,401.6-296.2,401.6-296.2,401.6z"></path> <path id="XMLID_400_" fill="#FFFFFF" d="M-298,401.6L-298,401.6c-1.1,0-2.1,0-3,0c-0.1,0-0.1,0-0.1-0.1c0-3.1,0-6.1,0-9.2 c0-0.1,0-0.1,0.1-0.1c1,0,2,0,2.9,0h0.1C-298,395.3-298,398.5-298,401.6z"></path> <path id="XMLID_401_" fill="#FFFFFF" d="M-299.6,390.9c-0.7-0.1-1.2-0.3-1.6-0.8c-0.5-0.8-0.2-2.1,1-2.4c0.6-0.2,1.2-0.1,1.8,0.2 c0.5,0.4,0.7,0.9,0.6,1.5c-0.1,0.7-0.5,1.1-1.1,1.3C-299.1,390.8-299.4,390.8-299.6,390.9L-299.6,390.9z"></path> </g> </svg> </span>
						<span class="simplesocialtxt">Share</span> </button>
</div>
	</section><!-- /.entry -->
	<div class="fix"></div>
<aside id="post-author">
	<div class="profile-image"><img alt="" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/1d75d46040c28497f0dee5d8e100db37.jpeg" srcset="https://secure.gravatar.com/avatar/1d75d46040c28497f0dee5d8e100db37?s=160&amp;d=mm&amp;r=g 2x" class="avatar avatar-80 photo" height="80" width="80"></div>
	<div class="profile-content">
		<h4>About Jason Brownlee</h4>
		Jason Brownlee, PhD is a machine learning specialist who teaches developers how to get results with modern machine learning methods via hands-on tutorials.				<div class="profile-link">
			<a href="https://machinelearningmastery.com/author/jasonb/">
				View all posts by Jason Brownlee <span class="meta-nav">→</span>			</a>
		</div><!--#profile-link-->
			</div>
	<div class="fix"></div>
</aside>
<div class="post-utility"></div>
</article><!-- /.post -->
	        <div class="post-entries">
	            <div class="nav-prev fl"><a href="https://machinelearningmastery.com/develop-a-deep-learning-caption-generation-model-in-python/" rel="prev"><i class="fa fa-angle-left"></i> How to Develop a Deep Learning Photo Caption Generator from Scratch</a></div>
	            <div class="nav-next fr"><a href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-a-cifar-10-small-object-photographs-from-scratch/" rel="next">How to Develop a GAN to Generate CIFAR10 Small Color Photographs <i class="fa fa-angle-right"></i></a></div>
	            <div class="fix"></div>
	        </div>

		<div id="comments">		 	<h3 id="comments-title">31 Responses to <em>How to Develop a GAN for Generating MNIST Handwritten Digits</em></h3>
		 	<ol class="commentlist">
				
		<li id="comment-490723" class="comment even thread-even depth-1 parent">

	      	<div id="li-comment-490723" class="comment-container">

					                <div class="avatar"><img alt="" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/a4e7ab81c95260f045e82d13c8bb9a9b.png" srcset="https://secure.gravatar.com/avatar/a4e7ab81c95260f045e82d13c8bb9a9b?s=80&amp;d=mm&amp;r=g 2x" class="avatar avatar-40 photo" height="40" width="40"></div>
	            
		      	<div class="comment-head">

	                <span class="name">Abkul</span>
	                <span class="date">June 28, 2019 at 6:06 pm</span>
	                <span class="perma"><a href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#comment-490723" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>

				</div><!-- /.comment-head -->

		   		<div class="comment-entry">

				<p>Hi Jason.</p>
<p>Great tutorial.when is your book on GAN coming out?will you be doing a tutorial on transfer learning in relation to GAN?</p>

				
	                <div class="reply">
	                    <a rel="nofollow" class="comment-reply-link" href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#comment-490723" data-commentid="490723" data-postid="8099" data-belowelement="comment-490723" data-respondelement="respond" aria-label="Reply to Abkul">Reply</a>	                </div><!-- /.reply -->

				</div><!-- /comment-entry -->

			</div><!-- /.comment-container -->

	<ul class="children">

		<li id="comment-490812" class="comment byuser comment-author-jasonb bypostauthor odd alt depth-2">

	      	<div id="li-comment-490812" class="comment-container">

					                <div class="avatar"><img alt="" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/1d75d46040c28497f0dee5d8e100db37(1).jpeg" srcset="https://secure.gravatar.com/avatar/1d75d46040c28497f0dee5d8e100db37?s=80&amp;d=mm&amp;r=g 2x" class="avatar avatar-40 photo" height="40" width="40"></div>
	            
		      	<div class="comment-head">

	                <span class="name"><a href="http://machinelearningmastery.com/" rel="external nofollow ugc" class="url">Jason Brownlee</a></span>
	                <span class="date">June 29, 2019 at 6:45 am</span>
	                <span class="perma"><a href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#comment-490812" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>

				</div><!-- /.comment-head -->

		   		<div class="comment-entry">

				<p>Thanks!</p>
<p>I hope to have the book ready in a few weeks.</p>
<p>Great suggestion!</p>

				
	                <div class="reply">
	                    <a rel="nofollow" class="comment-reply-link" href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#comment-490812" data-commentid="490812" data-postid="8099" data-belowelement="comment-490812" data-respondelement="respond" aria-label="Reply to Jason Brownlee">Reply</a>	                </div><!-- /.reply -->

				</div><!-- /comment-entry -->

			</div><!-- /.comment-container -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->

		<li id="comment-490759" class="comment even thread-odd thread-alt depth-1 parent">

	      	<div id="li-comment-490759" class="comment-container">

					                <div class="avatar"><img alt="" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/1802762eb35c5695954927c5b4218825.png" srcset="https://secure.gravatar.com/avatar/1802762eb35c5695954927c5b4218825?s=80&amp;d=mm&amp;r=g 2x" class="avatar avatar-40 photo" height="40" width="40"></div>
	            
		      	<div class="comment-head">

	                <span class="name"><a href="http://--/" rel="external nofollow ugc" class="url">totoro</a></span>
	                <span class="date">June 29, 2019 at 12:02 am</span>
	                <span class="perma"><a href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#comment-490759" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>

				</div><!-- /.comment-head -->

		   		<div class="comment-entry">

				<p>hello Mr. Jason,</p>
<p>                 pyplot.imshow(trainX[i], cmap=’gray’) and pyplot.imshow(testX[i], cmap=’gray’) are showing error as you have passed variable ‘i’. </p>
<p>thanks for the fantastic tutorials.</p>

				
	                <div class="reply">
	                    <a rel="nofollow" class="comment-reply-link" href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#comment-490759" data-commentid="490759" data-postid="8099" data-belowelement="comment-490759" data-respondelement="respond" aria-label="Reply to totoro">Reply</a>	                </div><!-- /.reply -->

				</div><!-- /comment-entry -->

			</div><!-- /.comment-container -->

	<ul class="children">

		<li id="comment-490822" class="comment byuser comment-author-jasonb bypostauthor odd alt depth-2">

	      	<div id="li-comment-490822" class="comment-container">

					                <div class="avatar"><img alt="" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/1d75d46040c28497f0dee5d8e100db37(1).jpeg" srcset="https://secure.gravatar.com/avatar/1d75d46040c28497f0dee5d8e100db37?s=80&amp;d=mm&amp;r=g 2x" class="avatar avatar-40 photo" height="40" width="40"></div>
	            
		      	<div class="comment-head">

	                <span class="name"><a href="http://machinelearningmastery.com/" rel="external nofollow ugc" class="url">Jason Brownlee</a></span>
	                <span class="date">June 29, 2019 at 6:57 am</span>
	                <span class="perma"><a href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#comment-490822" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>

				</div><!-- /.comment-head -->

		   		<div class="comment-entry">

				<p>I am not getting an error. What error are you getting exactly?</p>
<p>I have some suggestions here:<br>
<a href="https://machinelearningmastery.com/faq/single-faq/why-does-the-code-in-the-tutorial-not-work-for-me" rel="nofollow ugc">https://machinelearningmastery.com/faq/single-faq/why-does-the-code-in-the-tutorial-not-work-for-me</a></p>

				
	                <div class="reply">
	                    <a rel="nofollow" class="comment-reply-link" href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#comment-490822" data-commentid="490822" data-postid="8099" data-belowelement="comment-490822" data-respondelement="respond" aria-label="Reply to Jason Brownlee">Reply</a>	                </div><!-- /.reply -->

				</div><!-- /comment-entry -->

			</div><!-- /.comment-container -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->

		<li id="comment-490789" class="comment even thread-even depth-1 parent">

	      	<div id="li-comment-490789" class="comment-container">

					                <div class="avatar"><img alt="" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/fe5552c5ba4d2c3d69230b79c40bedb6.png" srcset="https://secure.gravatar.com/avatar/fe5552c5ba4d2c3d69230b79c40bedb6?s=80&amp;d=mm&amp;r=g 2x" class="avatar avatar-40 photo" height="40" width="40"></div>
	            
		      	<div class="comment-head">

	                <span class="name">Klaas Brau</span>
	                <span class="date">June 29, 2019 at 4:33 am</span>
	                <span class="perma"><a href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#comment-490789" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>

				</div><!-- /.comment-head -->

		   		<div class="comment-entry">

				<p>Great thanks.<br>
2 Questions if I may.</p>
<p># foundation for 7×7 image<br>
model.add(Dense(128 * 7 * 7, input_dim=100)).</p>
<p>I sometimes see input_dim = 100,  so when do we need the comma?</p>
<p>My second question. The output of the generator must match the input of the discriminator in our gan right? so what’s about these (7,7) filter size?<br>
Thanks a lot for elaborate on this<br>
best regards</p>

				
	                <div class="reply">
	                    <a rel="nofollow" class="comment-reply-link" href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#comment-490789" data-commentid="490789" data-postid="8099" data-belowelement="comment-490789" data-respondelement="respond" aria-label="Reply to Klaas Brau">Reply</a>	                </div><!-- /.reply -->

				</div><!-- /comment-entry -->

			</div><!-- /.comment-container -->

	<ul class="children">

		<li id="comment-490828" class="comment byuser comment-author-jasonb bypostauthor odd alt depth-2 parent">

	      	<div id="li-comment-490828" class="comment-container">

					                <div class="avatar"><img alt="" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/1d75d46040c28497f0dee5d8e100db37(1).jpeg" srcset="https://secure.gravatar.com/avatar/1d75d46040c28497f0dee5d8e100db37?s=80&amp;d=mm&amp;r=g 2x" class="avatar avatar-40 photo" height="40" width="40"></div>
	            
		      	<div class="comment-head">

	                <span class="name"><a href="http://machinelearningmastery.com/" rel="external nofollow ugc" class="url">Jason Brownlee</a></span>
	                <span class="date">June 29, 2019 at 7:01 am</span>
	                <span class="perma"><a href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#comment-490828" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>

				</div><!-- /.comment-head -->

		   		<div class="comment-entry">

				<p>Great questions!</p>
<p>You need the command when specifying “shape” instead of “dim”.</p>
<p>Correct, input of D matches output of G. 7×7 is our starting point for the random image that we scale up to the desired size with the appropriate layers.</p>
<p>Does that help?</p>

				
	                <div class="reply">
	                    <a rel="nofollow" class="comment-reply-link" href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#comment-490828" data-commentid="490828" data-postid="8099" data-belowelement="comment-490828" data-respondelement="respond" aria-label="Reply to Jason Brownlee">Reply</a>	                </div><!-- /.reply -->

				</div><!-- /comment-entry -->

			</div><!-- /.comment-container -->

	<ul class="children">

		<li id="comment-490918" class="comment even depth-3 parent">

	      	<div id="li-comment-490918" class="comment-container">

					                <div class="avatar"><img alt="" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/fe5552c5ba4d2c3d69230b79c40bedb6.png" srcset="https://secure.gravatar.com/avatar/fe5552c5ba4d2c3d69230b79c40bedb6?s=80&amp;d=mm&amp;r=g 2x" class="avatar avatar-40 photo" height="40" width="40"></div>
	            
		      	<div class="comment-head">

	                <span class="name">Klaas Brau</span>
	                <span class="date">June 30, 2019 at 1:02 am</span>
	                <span class="perma"><a href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#comment-490918" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>

				</div><!-- /.comment-head -->

		   		<div class="comment-entry">

				<p>Thanks Jason.<br>
The input of the discriminator is a 28,28 image with  1colorchannel. If we provide a different shape we probably get an error.<br>
Our output is conv2dtransposed to match this size 28,28 but what about these 7×7 filters? In the GAN we stack the output of the generator as input in the discriminator so I would assume we need (batch_size, 28,28,1) which is different from the return value from the generator with this 7×7 filters. Maybe I am missing something here.</p>
<p>Again thanks so much for this blog. Your speed and exlanations are invaluable!</p>

				
	                <div class="reply">
	                    <a rel="nofollow" class="comment-reply-link" href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#comment-490918" data-commentid="490918" data-postid="8099" data-belowelement="comment-490918" data-respondelement="respond" aria-label="Reply to Klaas Brau">Reply</a>	                </div><!-- /.reply -->

				</div><!-- /comment-entry -->

			</div><!-- /.comment-container -->

	<ul class="children">

		<li id="comment-490970" class="comment byuser comment-author-jasonb bypostauthor odd alt depth-4">

	      	<div id="li-comment-490970" class="comment-container">

					                <div class="avatar"><img alt="" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/1d75d46040c28497f0dee5d8e100db37(1).jpeg" srcset="https://secure.gravatar.com/avatar/1d75d46040c28497f0dee5d8e100db37?s=80&amp;d=mm&amp;r=g 2x" class="avatar avatar-40 photo" height="40" width="40"></div>
	            
		      	<div class="comment-head">

	                <span class="name"><a href="http://machinelearningmastery.com/" rel="external nofollow ugc" class="url">Jason Brownlee</a></span>
	                <span class="date">June 30, 2019 at 9:44 am</span>
	                <span class="perma"><a href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#comment-490970" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>

				</div><!-- /.comment-head -->

		   		<div class="comment-entry">

				<p>The output of the generator is a 28x28x1 matrix.</p>

				
	                <div class="reply">
	                    <a rel="nofollow" class="comment-reply-link" href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#comment-490970" data-commentid="490970" data-postid="8099" data-belowelement="comment-490970" data-respondelement="respond" aria-label="Reply to Jason Brownlee">Reply</a>	                </div><!-- /.reply -->

				</div><!-- /comment-entry -->

			</div><!-- /.comment-container -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->

		<li id="comment-490889" class="comment even thread-odd thread-alt depth-1 parent">

	      	<div id="li-comment-490889" class="comment-container">

					                <div class="avatar"><img alt="" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/06313b267bf8cb5737da457899bb8d1f.png" srcset="https://secure.gravatar.com/avatar/06313b267bf8cb5737da457899bb8d1f?s=80&amp;d=mm&amp;r=g 2x" class="avatar avatar-40 photo" height="40" width="40"></div>
	            
		      	<div class="comment-head">

	                <span class="name">Paul</span>
	                <span class="date">June 29, 2019 at 7:20 pm</span>
	                <span class="perma"><a href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#comment-490889" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>

				</div><!-- /.comment-head -->

		   		<div class="comment-entry">

				<p>Thank you for the comprehensive notes Jason. I’ve done some work with deep CNNs as regular classifiers but these examples are a first toe in the water in the world of GANs. Your explanations are very clear.</p>
<p>This worked well. There were problems with the discriminator collapsing to zero on occasions. This seems to be a known feature of GANs. Do any established GAN hacks help with this? </p>
<p>Looking at the discriminator after 100 epochs, it was in a confused state where everything passed into it was circa 50% probability real/fake. I colour coded some generated examples based on disriminator probability (red = fake, green = real, blue = unsure based on an arbitrary banding) and as you mentioned the subjective versus discriminator output does not always tie up. (example posted on linkedin). There was not enough spread in discriminator probability output to make this meaningful.</p>
<p>Finding a mechanism to measure how good the generator is in order to save the ‘best’ model would be good, otherwise it would seem to remain very subjective as to what the best generator is.</p>

				
	                <div class="reply">
	                    <a rel="nofollow" class="comment-reply-link" href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#comment-490889" data-commentid="490889" data-postid="8099" data-belowelement="comment-490889" data-respondelement="respond" aria-label="Reply to Paul">Reply</a>	                </div><!-- /.reply -->

				</div><!-- /comment-entry -->

			</div><!-- /.comment-container -->

	<ul class="children">

		<li id="comment-490959" class="comment byuser comment-author-jasonb bypostauthor odd alt depth-2 parent">

	      	<div id="li-comment-490959" class="comment-container">

					                <div class="avatar"><img alt="" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/1d75d46040c28497f0dee5d8e100db37(1).jpeg" srcset="https://secure.gravatar.com/avatar/1d75d46040c28497f0dee5d8e100db37?s=80&amp;d=mm&amp;r=g 2x" class="avatar avatar-40 photo" height="40" width="40"></div>
	            
		      	<div class="comment-head">

	                <span class="name"><a href="http://machinelearningmastery.com/" rel="external nofollow ugc" class="url">Jason Brownlee</a></span>
	                <span class="date">June 30, 2019 at 9:37 am</span>
	                <span class="perma"><a href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#comment-490959" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>

				</div><!-- /.comment-head -->

		   		<div class="comment-entry">

				<p>Yes, the hacks will help with reducing the likelihood of a collapse.</p>
<p>I will cover good metrics/loss in the future. WGAN might be the best here. I have 2 posts on the topic coming.</p>

				
	                <div class="reply">
	                    <a rel="nofollow" class="comment-reply-link" href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#comment-490959" data-commentid="490959" data-postid="8099" data-belowelement="comment-490959" data-respondelement="respond" aria-label="Reply to Jason Brownlee">Reply</a>	                </div><!-- /.reply -->

				</div><!-- /comment-entry -->

			</div><!-- /.comment-container -->

	<ul class="children">

		<li id="comment-491032" class="comment even depth-3 parent">

	      	<div id="li-comment-491032" class="comment-container">

					                <div class="avatar"><img alt="" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/06313b267bf8cb5737da457899bb8d1f.png" srcset="https://secure.gravatar.com/avatar/06313b267bf8cb5737da457899bb8d1f?s=80&amp;d=mm&amp;r=g 2x" class="avatar avatar-40 photo" height="40" width="40"></div>
	            
		      	<div class="comment-head">

	                <span class="name">Paul</span>
	                <span class="date">July 1, 2019 at 1:28 am</span>
	                <span class="perma"><a href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#comment-491032" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>

				</div><!-- /.comment-head -->

		   		<div class="comment-entry">

				<p>Thanks, I’ll look out for it. In the meantime will use this example as a sand pit for trying some of the suggested hacks. Cheers</p>

				
	                <div class="reply">
	                    <a rel="nofollow" class="comment-reply-link" href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#comment-491032" data-commentid="491032" data-postid="8099" data-belowelement="comment-491032" data-respondelement="respond" aria-label="Reply to Paul">Reply</a>	                </div><!-- /.reply -->

				</div><!-- /comment-entry -->

			</div><!-- /.comment-container -->

	<ul class="children">

		<li id="comment-491068" class="comment byuser comment-author-jasonb bypostauthor odd alt depth-4">

	      	<div id="li-comment-491068" class="comment-container">

					                <div class="avatar"><img alt="" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/1d75d46040c28497f0dee5d8e100db37(1).jpeg" srcset="https://secure.gravatar.com/avatar/1d75d46040c28497f0dee5d8e100db37?s=80&amp;d=mm&amp;r=g 2x" class="avatar avatar-40 photo" height="40" width="40"></div>
	            
		      	<div class="comment-head">

	                <span class="name"><a href="http://machinelearningmastery.com/" rel="external nofollow ugc" class="url">Jason Brownlee</a></span>
	                <span class="date">July 1, 2019 at 6:36 am</span>
	                <span class="perma"><a href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#comment-491068" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>

				</div><!-- /.comment-head -->

		   		<div class="comment-entry">

				<p>Great idea!</p>

				
	                <div class="reply">
	                    <a rel="nofollow" class="comment-reply-link" href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#comment-491068" data-commentid="491068" data-postid="8099" data-belowelement="comment-491068" data-respondelement="respond" aria-label="Reply to Jason Brownlee">Reply</a>	                </div><!-- /.reply -->

				</div><!-- /comment-entry -->

			</div><!-- /.comment-container -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->

		<li id="comment-491160" class="comment even thread-even depth-1 parent">

	      	<div id="li-comment-491160" class="comment-container">

					                <div class="avatar"><img alt="" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/6cc2d7323e832394cc43637c81751978.png" srcset="https://secure.gravatar.com/avatar/6cc2d7323e832394cc43637c81751978?s=80&amp;d=mm&amp;r=g 2x" class="avatar avatar-40 photo" height="40" width="40"></div>
	            
		      	<div class="comment-head">

	                <span class="name">Phillip</span>
	                <span class="date">July 2, 2019 at 2:17 am</span>
	                <span class="perma"><a href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#comment-491160" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>

				</div><!-- /.comment-head -->

		   		<div class="comment-entry">

				<p>I got mine trained and completed in 28 hours using CPU mode, i7, 8th gen PC. The digit images it generated looked good with 90% recognizable.  It’s very good tutorial.  Thanks.</p>

				
	                <div class="reply">
	                    <a rel="nofollow" class="comment-reply-link" href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#comment-491160" data-commentid="491160" data-postid="8099" data-belowelement="comment-491160" data-respondelement="respond" aria-label="Reply to Phillip">Reply</a>	                </div><!-- /.reply -->

				</div><!-- /comment-entry -->

			</div><!-- /.comment-container -->

	<ul class="children">

		<li id="comment-491209" class="comment byuser comment-author-jasonb bypostauthor odd alt depth-2">

	      	<div id="li-comment-491209" class="comment-container">

					                <div class="avatar"><img alt="" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/1d75d46040c28497f0dee5d8e100db37(1).jpeg" srcset="https://secure.gravatar.com/avatar/1d75d46040c28497f0dee5d8e100db37?s=80&amp;d=mm&amp;r=g 2x" class="avatar avatar-40 photo" height="40" width="40"></div>
	            
		      	<div class="comment-head">

	                <span class="name"><a href="http://machinelearningmastery.com/" rel="external nofollow ugc" class="url">Jason Brownlee</a></span>
	                <span class="date">July 2, 2019 at 7:34 am</span>
	                <span class="perma"><a href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#comment-491209" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>

				</div><!-- /.comment-head -->

		   		<div class="comment-entry">

				<p>Well done Phillip!</p>

				
	                <div class="reply">
	                    <a rel="nofollow" class="comment-reply-link" href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#comment-491209" data-commentid="491209" data-postid="8099" data-belowelement="comment-491209" data-respondelement="respond" aria-label="Reply to Jason Brownlee">Reply</a>	                </div><!-- /.reply -->

				</div><!-- /comment-entry -->

			</div><!-- /.comment-container -->

	</li><!-- #comment-## -->

		<li id="comment-493381" class="comment even depth-2">

	      	<div id="li-comment-493381" class="comment-container">

					                <div class="avatar"><img alt="" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/1b3b04ffee3cfc4f6395f3127d36304b.png" srcset="https://secure.gravatar.com/avatar/1b3b04ffee3cfc4f6395f3127d36304b?s=80&amp;d=mm&amp;r=g 2x" class="avatar avatar-40 photo" height="40" width="40"></div>
	            
		      	<div class="comment-head">

	                <span class="name">Franco</span>
	                <span class="date">July 19, 2019 at 5:09 am</span>
	                <span class="perma"><a href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#comment-493381" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>

				</div><!-- /.comment-head -->

		   		<div class="comment-entry">

				<p>RESPECT</p>

				
	                <div class="reply">
	                    <a rel="nofollow" class="comment-reply-link" href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#comment-493381" data-commentid="493381" data-postid="8099" data-belowelement="comment-493381" data-respondelement="respond" aria-label="Reply to Franco">Reply</a>	                </div><!-- /.reply -->

				</div><!-- /comment-entry -->

			</div><!-- /.comment-container -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->

		<li id="comment-491644" class="comment odd alt thread-odd thread-alt depth-1 parent">

	      	<div id="li-comment-491644" class="comment-container">

					                <div class="avatar"><img alt="" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/c5769eabdbbf3ca6c94080d63e5a926f.png" srcset="https://secure.gravatar.com/avatar/c5769eabdbbf3ca6c94080d63e5a926f?s=80&amp;d=mm&amp;r=g 2x" class="avatar avatar-40 photo" height="40" width="40"></div>
	            
		      	<div class="comment-head">

	                <span class="name">Sougandh</span>
	                <span class="date">July 5, 2019 at 4:56 am</span>
	                <span class="perma"><a href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#comment-491644" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>

				</div><!-- /.comment-head -->

		   		<div class="comment-entry">

				<p>Hi Jason,</p>
<p>Thanks for the great tutorial, I am trying to make a GAN for an Ising model, Where I would like to pass an extra argument of temperature to the Generator along with the noise.  Is it possible to do in a Transpose CNN network used as a generator?</p>

				
	                <div class="reply">
	                    <a rel="nofollow" class="comment-reply-link" href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#comment-491644" data-commentid="491644" data-postid="8099" data-belowelement="comment-491644" data-respondelement="respond" aria-label="Reply to Sougandh">Reply</a>	                </div><!-- /.reply -->

				</div><!-- /comment-entry -->

			</div><!-- /.comment-container -->

	<ul class="children">

		<li id="comment-491678" class="comment byuser comment-author-jasonb bypostauthor even depth-2">

	      	<div id="li-comment-491678" class="comment-container">

					                <div class="avatar"><img alt="" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/1d75d46040c28497f0dee5d8e100db37(1).jpeg" srcset="https://secure.gravatar.com/avatar/1d75d46040c28497f0dee5d8e100db37?s=80&amp;d=mm&amp;r=g 2x" class="avatar avatar-40 photo" height="40" width="40"></div>
	            
		      	<div class="comment-head">

	                <span class="name"><a href="http://machinelearningmastery.com/" rel="external nofollow ugc" class="url">Jason Brownlee</a></span>
	                <span class="date">July 5, 2019 at 8:10 am</span>
	                <span class="perma"><a href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#comment-491678" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>

				</div><!-- /.comment-head -->

		   		<div class="comment-entry">

				<p>Sure, perhaps look at some of the conditional GANs, for example:<br>
<a href="https://machinelearningmastery.com/how-to-develop-a-conditional-generative-adversarial-network-from-scratch/" rel="nofollow ugc">https://machinelearningmastery.com/how-to-develop-a-conditional-generative-adversarial-network-from-scratch/</a></p>

				
	                <div class="reply">
	                    <a rel="nofollow" class="comment-reply-link" href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#comment-491678" data-commentid="491678" data-postid="8099" data-belowelement="comment-491678" data-respondelement="respond" aria-label="Reply to Jason Brownlee">Reply</a>	                </div><!-- /.reply -->

				</div><!-- /comment-entry -->

			</div><!-- /.comment-container -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->

		<li id="comment-491784" class="comment odd alt thread-even depth-1 parent">

	      	<div id="li-comment-491784" class="comment-container">

					                <div class="avatar"><img alt="" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/98de17407f67ee57c298cef27ba743ca.png" srcset="https://secure.gravatar.com/avatar/98de17407f67ee57c298cef27ba743ca?s=80&amp;d=mm&amp;r=g 2x" class="avatar avatar-40 photo" height="40" width="40"></div>
	            
		      	<div class="comment-head">

	                <span class="name">Kishan Shankar Singhal</span>
	                <span class="date">July 6, 2019 at 2:29 am</span>
	                <span class="perma"><a href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#comment-491784" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>

				</div><!-- /.comment-head -->

		   		<div class="comment-entry">

				<p>Do you have a github link of above complete code?</p>

				
	                <div class="reply">
	                    <a rel="nofollow" class="comment-reply-link" href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#comment-491784" data-commentid="491784" data-postid="8099" data-belowelement="comment-491784" data-respondelement="respond" aria-label="Reply to Kishan Shankar Singhal">Reply</a>	                </div><!-- /.reply -->

				</div><!-- /comment-entry -->

			</div><!-- /.comment-container -->

	<ul class="children">

		<li id="comment-491836" class="comment byuser comment-author-jasonb bypostauthor even depth-2">

	      	<div id="li-comment-491836" class="comment-container">

					                <div class="avatar"><img alt="" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/1d75d46040c28497f0dee5d8e100db37(1).jpeg" srcset="https://secure.gravatar.com/avatar/1d75d46040c28497f0dee5d8e100db37?s=80&amp;d=mm&amp;r=g 2x" class="avatar avatar-40 photo" height="40" width="40"></div>
	            
		      	<div class="comment-head">

	                <span class="name"><a href="http://machinelearningmastery.com/" rel="external nofollow ugc" class="url">Jason Brownlee</a></span>
	                <span class="date">July 6, 2019 at 8:43 am</span>
	                <span class="perma"><a href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#comment-491836" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>

				</div><!-- /.comment-head -->

		   		<div class="comment-entry">

				<p>The complete code is listed in the above tutorial, you can copy and paste it directly.</p>
<p>If you need help, see this:<br>
<a href="https://machinelearningmastery.com/faq/single-faq/how-do-i-copy-code-from-a-tutorial" rel="nofollow ugc">https://machinelearningmastery.com/faq/single-faq/how-do-i-copy-code-from-a-tutorial</a></p>

				
	                <div class="reply">
	                    <a rel="nofollow" class="comment-reply-link" href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#comment-491836" data-commentid="491836" data-postid="8099" data-belowelement="comment-491836" data-respondelement="respond" aria-label="Reply to Jason Brownlee">Reply</a>	                </div><!-- /.reply -->

				</div><!-- /comment-entry -->

			</div><!-- /.comment-container -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->

		<li id="comment-492413" class="comment odd alt thread-odd thread-alt depth-1 parent">

	      	<div id="li-comment-492413" class="comment-container">

					                <div class="avatar"><img alt="" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/11fe8c12eee8439eec8d7cf30646fba7.png" srcset="https://secure.gravatar.com/avatar/11fe8c12eee8439eec8d7cf30646fba7?s=80&amp;d=mm&amp;r=g 2x" class="avatar avatar-40 photo" height="40" width="40"></div>
	            
		      	<div class="comment-head">

	                <span class="name"><a href="https://www.modyco.fr/fr/component/jsn/minel.html?Itemid=&amp;back=1" rel="external nofollow ugc" class="url">Minel</a></span>
	                <span class="date">July 11, 2019 at 12:55 am</span>
	                <span class="perma"><a href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#comment-492413" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>

				</div><!-- /.comment-head -->

		   		<div class="comment-entry">

				<p>Hello Jason</p>
<p>I tried some of your suggestions :<br>
– I tried tanh instead of sigmoid but quickly the discriminator loss was less than 0.5  (around 0.2)<br>
– I added batchNormalization into the generator but I did not see a big differences in the results<br>
model = Sequential()<br>
	# foundation for 7×7 image<br>
	n_nodes = 128 * 7 * 7<br>
	model.add(Dense(n_nodes, input_dim=latent_dim))<br>
	model.add(LeakyReLU(alpha=0.2))<br>
	model.add(BatchNormalization(momentum=0.8))<br>
	model.add(Reshape((7, 7, 128)))<br>
	# upsample to 14×14<br>
	model.add(Conv2DTranspose(128, (4,4), strides=(2,2), padding=’same’))<br>
	model.add(LeakyReLU(alpha=0.2))<br>
	model.add(BatchNormalization(momentum=0.8))<br>
	# upsample to 28×28<br>
	model.add(Conv2DTranspose(128, (4,4), strides=(2,2), padding=’same’))<br>
	model.add(LeakyReLU(alpha=0.2))<br>
	model.add(BatchNormalization(momentum=0.8))<br>
	model.add(Conv2D(1, (7,7), activation=’sigmoid’, padding=’same’))<br>
	return model</p>
<p>– I changed the latent_dim parameter from  100 to 5000. The computed model was bigger each time, the computed time was longer each time, from 45 mn for 100 to 120 mn for 5000 on an GPU Nvidia k100 and the results were better each time.<br>
I am keep working on it</p>

				
	                <div class="reply">
	                    <a rel="nofollow" class="comment-reply-link" href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#comment-492413" data-commentid="492413" data-postid="8099" data-belowelement="comment-492413" data-respondelement="respond" aria-label="Reply to Minel">Reply</a>	                </div><!-- /.reply -->

				</div><!-- /comment-entry -->

			</div><!-- /.comment-container -->

	<ul class="children">

		<li id="comment-492444" class="comment byuser comment-author-jasonb bypostauthor even depth-2">

	      	<div id="li-comment-492444" class="comment-container">

					                <div class="avatar"><img alt="" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/1d75d46040c28497f0dee5d8e100db37(1).jpeg" srcset="https://secure.gravatar.com/avatar/1d75d46040c28497f0dee5d8e100db37?s=80&amp;d=mm&amp;r=g 2x" class="avatar avatar-40 photo" height="40" width="40"></div>
	            
		      	<div class="comment-head">

	                <span class="name"><a href="http://machinelearningmastery.com/" rel="external nofollow ugc" class="url">Jason Brownlee</a></span>
	                <span class="date">July 11, 2019 at 9:49 am</span>
	                <span class="perma"><a href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#comment-492444" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>

				</div><!-- /.comment-head -->

		   		<div class="comment-entry">

				<p>Keep latent small, at 100.</p>
<p>Perhaps test MSE loss function. It works great!</p>

				
	                <div class="reply">
	                    <a rel="nofollow" class="comment-reply-link" href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#comment-492444" data-commentid="492444" data-postid="8099" data-belowelement="comment-492444" data-respondelement="respond" aria-label="Reply to Jason Brownlee">Reply</a>	                </div><!-- /.reply -->

				</div><!-- /comment-entry -->

			</div><!-- /.comment-container -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->

		<li id="comment-497270" class="comment odd alt thread-even depth-1 parent">

	      	<div id="li-comment-497270" class="comment-container">

					                <div class="avatar"><img alt="" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/fdb2ef34e031b380475037d01eb97d4c.jpeg" srcset="https://secure.gravatar.com/avatar/fdb2ef34e031b380475037d01eb97d4c?s=80&amp;d=mm&amp;r=g 2x" class="avatar avatar-40 photo" height="40" width="40"></div>
	            
		      	<div class="comment-head">

	                <span class="name">Harsh</span>
	                <span class="date">August 19, 2019 at 1:05 am</span>
	                <span class="perma"><a href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#comment-497270" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>

				</div><!-- /.comment-head -->

		   		<div class="comment-entry">

				<p>Hey Jason<br>
I never understood how dropout works in case of conv layers. Theoretically it looks a bit weird to me.<br>
<a href="https://towardsdatascience.com/dropout-on-convolutional-layers-is-weird-5c6ab14f19b2" rel="nofollow ugc">https://towardsdatascience.com/dropout-on-convolutional-layers-is-weird-5c6ab14f19b2</a><br>
This article supports my intuitions.<br>
I tried your model without the dropout and it achieved an accuracy of real:100% fake :3% after the 80th epoch.<br>
If my understanding is correct, this means our generator has become very competent in fooling the discriminator.<br>
How do you view these results? And what is your view on dropouts applied on conv layers?</p>

				
	                <div class="reply">
	                    <a rel="nofollow" class="comment-reply-link" href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#comment-497270" data-commentid="497270" data-postid="8099" data-belowelement="comment-497270" data-respondelement="respond" aria-label="Reply to Harsh">Reply</a>	                </div><!-- /.reply -->

				</div><!-- /comment-entry -->

			</div><!-- /.comment-container -->

	<ul class="children">

		<li id="comment-497292" class="comment byuser comment-author-jasonb bypostauthor even depth-2">

	      	<div id="li-comment-497292" class="comment-container">

					                <div class="avatar"><img alt="" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/1d75d46040c28497f0dee5d8e100db37(1).jpeg" srcset="https://secure.gravatar.com/avatar/1d75d46040c28497f0dee5d8e100db37?s=80&amp;d=mm&amp;r=g 2x" class="avatar avatar-40 photo" height="40" width="40"></div>
	            
		      	<div class="comment-head">

	                <span class="name"><a href="http://machinelearningmastery.com/" rel="external nofollow ugc" class="url">Jason Brownlee</a></span>
	                <span class="date">August 19, 2019 at 6:10 am</span>
	                <span class="perma"><a href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#comment-497292" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>

				</div><!-- /.comment-head -->

		   		<div class="comment-entry">

				<p>With a GAN, you want both the D and the G to have the same skill. If one does a lot better than the other, you will get a failure mode:<br>
<a href="https://machinelearningmastery.com/practical-guide-to-gan-failure-modes/" rel="nofollow ugc">https://machinelearningmastery.com/practical-guide-to-gan-failure-modes/</a></p>

				
	                <div class="reply">
	                    <a rel="nofollow" class="comment-reply-link" href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#comment-497292" data-commentid="497292" data-postid="8099" data-belowelement="comment-497292" data-respondelement="respond" aria-label="Reply to Jason Brownlee">Reply</a>	                </div><!-- /.reply -->

				</div><!-- /comment-entry -->

			</div><!-- /.comment-container -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->

		<li id="comment-506537" class="comment odd alt thread-odd thread-alt depth-1 parent">

	      	<div id="li-comment-506537" class="comment-container">

					                <div class="avatar"><img alt="" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/af72f4c824f7c57df7e7bdf9553ee999.png" srcset="https://secure.gravatar.com/avatar/af72f4c824f7c57df7e7bdf9553ee999?s=80&amp;d=mm&amp;r=g 2x" class="avatar avatar-40 photo" height="40" width="40"></div>
	            
		      	<div class="comment-head">

	                <span class="name">Hai_Sa</span>
	                <span class="date">October 21, 2019 at 2:50 am</span>
	                <span class="perma"><a href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#comment-506537" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>

				</div><!-- /.comment-head -->

		   		<div class="comment-entry">

				<p>Hi, Jason, thants for the great post again, from your advise, I used tanh function on the generator, changed dataset ranges to [-1, 1], but I’ve got black images from the generator, so I changed the generator’s last layer’s filter size to smaller values, to (3, 3), I don’t know why, but it worked.</p>

				
	                <div class="reply">
	                    <a rel="nofollow" class="comment-reply-link" href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#comment-506537" data-commentid="506537" data-postid="8099" data-belowelement="comment-506537" data-respondelement="respond" aria-label="Reply to Hai_Sa">Reply</a>	                </div><!-- /.reply -->

				</div><!-- /comment-entry -->

			</div><!-- /.comment-container -->

	<ul class="children">

		<li id="comment-506579" class="comment byuser comment-author-jasonb bypostauthor even depth-2">

	      	<div id="li-comment-506579" class="comment-container">

					                <div class="avatar"><img alt="" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/1d75d46040c28497f0dee5d8e100db37(1).jpeg" srcset="https://secure.gravatar.com/avatar/1d75d46040c28497f0dee5d8e100db37?s=80&amp;d=mm&amp;r=g 2x" class="avatar avatar-40 photo" height="40" width="40"></div>
	            
		      	<div class="comment-head">

	                <span class="name"><a href="http://machinelearningmastery.com/" rel="external nofollow ugc" class="url">Jason Brownlee</a></span>
	                <span class="date">October 21, 2019 at 6:20 am</span>
	                <span class="perma"><a href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#comment-506579" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>

				</div><!-- /.comment-head -->

		   		<div class="comment-entry">

				<p>Nice work!</p>

				
	                <div class="reply">
	                    <a rel="nofollow" class="comment-reply-link" href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#comment-506579" data-commentid="506579" data-postid="8099" data-belowelement="comment-506579" data-respondelement="respond" aria-label="Reply to Jason Brownlee">Reply</a>	                </div><!-- /.reply -->

				</div><!-- /comment-entry -->

			</div><!-- /.comment-container -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->

		<li id="comment-510842" class="comment odd alt thread-even depth-1 parent">

	      	<div id="li-comment-510842" class="comment-container">

					                <div class="avatar"><img alt="" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/017795889cc5f0d7fe5d8b4ad1341615.png" srcset="https://secure.gravatar.com/avatar/017795889cc5f0d7fe5d8b4ad1341615?s=80&amp;d=mm&amp;r=g 2x" class="avatar avatar-40 photo" height="40" width="40"></div>
	            
		      	<div class="comment-head">

	                <span class="name">Sid</span>
	                <span class="date">November 16, 2019 at 9:17 am</span>
	                <span class="perma"><a href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#comment-510842" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>

				</div><!-- /.comment-head -->

		   		<div class="comment-entry">

				<p>Hi Jason<br>
Thanks for the tutorial<br>
Why you didn’t augment the channels of the fake images to 3 as you did for the real images?</p>

				
	                <div class="reply">
	                    <a rel="nofollow" class="comment-reply-link" href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#comment-510842" data-commentid="510842" data-postid="8099" data-belowelement="comment-510842" data-respondelement="respond" aria-label="Reply to Sid">Reply</a>	                </div><!-- /.reply -->

				</div><!-- /comment-entry -->

			</div><!-- /.comment-container -->

	<ul class="children">

		<li id="comment-511044" class="comment byuser comment-author-jasonb bypostauthor even depth-2">

	      	<div id="li-comment-511044" class="comment-container">

					                <div class="avatar"><img alt="" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/1d75d46040c28497f0dee5d8e100db37(1).jpeg" srcset="https://secure.gravatar.com/avatar/1d75d46040c28497f0dee5d8e100db37?s=80&amp;d=mm&amp;r=g 2x" class="avatar avatar-40 photo" height="40" width="40"></div>
	            
		      	<div class="comment-head">

	                <span class="name"><a href="http://machinelearningmastery.com/" rel="external nofollow ugc" class="url">Jason Brownlee</a></span>
	                <span class="date">November 17, 2019 at 7:12 am</span>
	                <span class="perma"><a href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#comment-511044" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>

				</div><!-- /.comment-head -->

		   		<div class="comment-entry">

				<p>Fake image are generated with 3 dimensions directly.</p>

				
	                <div class="reply">
	                    <a rel="nofollow" class="comment-reply-link" href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#comment-511044" data-commentid="511044" data-postid="8099" data-belowelement="comment-511044" data-respondelement="respond" aria-label="Reply to Jason Brownlee">Reply</a>	                </div><!-- /.reply -->

				</div><!-- /comment-entry -->

			</div><!-- /.comment-container -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->

		<li id="comment-511593" class="comment odd alt thread-odd thread-alt depth-1 parent">

	      	<div id="li-comment-511593" class="comment-container">

					                <div class="avatar"><img alt="" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/eb0641c40a98d3816f4c950212822956.png" srcset="https://secure.gravatar.com/avatar/eb0641c40a98d3816f4c950212822956?s=80&amp;d=mm&amp;r=g 2x" class="avatar avatar-40 photo" height="40" width="40"></div>
	            
		      	<div class="comment-head">

	                <span class="name">Shyam lal</span>
	                <span class="date">November 20, 2019 at 3:44 am</span>
	                <span class="perma"><a href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#comment-511593" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>

				</div><!-- /.comment-head -->

		   		<div class="comment-entry">

				<p>Hi Sir,<br>
 Do you have any related paper on this project?<br>
please do  reply.</p>

				
	                <div class="reply">
	                    <a rel="nofollow" class="comment-reply-link" href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#comment-511593" data-commentid="511593" data-postid="8099" data-belowelement="comment-511593" data-respondelement="respond" aria-label="Reply to Shyam lal">Reply</a>	                </div><!-- /.reply -->

				</div><!-- /comment-entry -->

			</div><!-- /.comment-container -->

	<ul class="children">

		<li id="comment-511626" class="comment byuser comment-author-jasonb bypostauthor even depth-2">

	      	<div id="li-comment-511626" class="comment-container">

					                <div class="avatar"><img alt="" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/1d75d46040c28497f0dee5d8e100db37(1).jpeg" srcset="https://secure.gravatar.com/avatar/1d75d46040c28497f0dee5d8e100db37?s=80&amp;d=mm&amp;r=g 2x" class="avatar avatar-40 photo" height="40" width="40"></div>
	            
		      	<div class="comment-head">

	                <span class="name"><a href="http://machinelearningmastery.com/" rel="external nofollow ugc" class="url">Jason Brownlee</a></span>
	                <span class="date">November 20, 2019 at 6:22 am</span>
	                <span class="perma"><a href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#comment-511626" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>

				</div><!-- /.comment-head -->

		   		<div class="comment-entry">

				<p>Yes, I have a book on the topic:<br>
<a href="https://machinelearningmastery.com/generative_adversarial_networks/" rel="nofollow ugc">https://machinelearningmastery.com/generative_adversarial_networks/</a></p>
<p>Also, there are papers listed in this post in the “further reading” section.</p>

				
	                <div class="reply">
	                    <a rel="nofollow" class="comment-reply-link" href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#comment-511626" data-commentid="511626" data-postid="8099" data-belowelement="comment-511626" data-respondelement="respond" aria-label="Reply to Jason Brownlee">Reply</a>	                </div><!-- /.reply -->

				</div><!-- /comment-entry -->

			</div><!-- /.comment-container -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->

		<li id="comment-514079" class="comment odd alt thread-even depth-1 parent">

	      	<div id="li-comment-514079" class="comment-container">

					                <div class="avatar"><img alt="" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/02912c3138bca57408c7ea926f492b0b.png" srcset="https://secure.gravatar.com/avatar/02912c3138bca57408c7ea926f492b0b?s=80&amp;d=mm&amp;r=g 2x" class="avatar avatar-40 photo" height="40" width="40"></div>
	            
		      	<div class="comment-head">

	                <span class="name">Tanmoy Dam</span>
	                <span class="date">December 7, 2019 at 10:32 pm</span>
	                <span class="perma"><a href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#comment-514079" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>

				</div><!-- /.comment-head -->

		   		<div class="comment-entry">

				<p>Why discriminator are updated twiced by train_on_batch ? I think, this step will update twice the paramters. Is it so? But in pytorch, we just accumulated all the gradients (for the real data and generated data) then update paramters by a single step.</p>

				
	                <div class="reply">
	                    <a rel="nofollow" class="comment-reply-link" href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#comment-514079" data-commentid="514079" data-postid="8099" data-belowelement="comment-514079" data-respondelement="respond" aria-label="Reply to Tanmoy Dam">Reply</a>	                </div><!-- /.reply -->

				</div><!-- /comment-entry -->

			</div><!-- /.comment-container -->

	<ul class="children">

		<li id="comment-514150" class="comment byuser comment-author-jasonb bypostauthor even depth-2">

	      	<div id="li-comment-514150" class="comment-container">

					                <div class="avatar"><img alt="" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/1d75d46040c28497f0dee5d8e100db37(1).jpeg" srcset="https://secure.gravatar.com/avatar/1d75d46040c28497f0dee5d8e100db37?s=80&amp;d=mm&amp;r=g 2x" class="avatar avatar-40 photo" height="40" width="40"></div>
	            
		      	<div class="comment-head">

	                <span class="name"><a href="http://machinelearningmastery.com/" rel="external nofollow ugc" class="url">Jason Brownlee</a></span>
	                <span class="date">December 8, 2019 at 6:10 am</span>
	                <span class="perma"><a href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#comment-514150" title="Direct link to this comment">#</a></span>
	                <span class="edit"></span>

				</div><!-- /.comment-head -->

		   		<div class="comment-entry">

				<p>There are many ways to implement GANs.</p>

				
	                <div class="reply">
	                    <a rel="nofollow" class="comment-reply-link" href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#comment-514150" data-commentid="514150" data-postid="8099" data-belowelement="comment-514150" data-respondelement="respond" aria-label="Reply to Jason Brownlee">Reply</a>	                </div><!-- /.reply -->

				</div><!-- /comment-entry -->

			</div><!-- /.comment-container -->

	</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
			</ol>
		 	</div>	<div id="respond" class="comment-respond">
		<h3 id="reply-title" class="comment-reply-title">Leave a Reply <small><a rel="nofollow" id="cancel-comment-reply-link" href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#respond" style="display:none;">Click here to cancel reply.</a></small></h3><form action="https://machinelearningmastery.com/wp-comments-post.php?wpe-comment-post=mlmastery" method="post" id="commentform" class="comment-form"><p class="comment-form-comment"><label class="hide" for="comment">Comment</label> <textarea tabindex="4" id="comment" name="comment" cols="50" rows="10" maxlength="65525" required="required"></textarea></p><p class="comment-form-author"><input id="author" name="author" type="text" class="txt" tabindex="1" value="" size="30" aria-required="true"><label for="author">Name <span class="required">(required)</span></label> </p>
<p class="comment-form-email"><input id="email" name="email" type="text" class="txt" tabindex="2" value="" size="30" aria-required="true"><label for="email">Email (will not be published) <span class="required">(required)</span></label> </p>
<p class="comment-form-url"><input id="url" name="url" type="text" class="txt" tabindex="3" value="" size="30"><label for="url">Website</label></p>
<p class="form-submit"><input name="submit" type="submit" id="submit" class="submit" value="Submit Comment"> <input type="hidden" name="comment_post_ID" value="8099" id="comment_post_ID">
<input type="hidden" name="comment_parent" id="comment_parent" value="0">
</p><p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="c10a75053e"></p><p style="display: none;"></p><input type="hidden" id="ak_js" name="ak_js" value="1578759487556"></form>	</div><!-- #respond -->
	     
            </section><!-- /#main -->
                
            <aside id="sidebar">
<div id="woo_blogauthorinfo-2" class="widget widget_woo_blogauthorinfo"><span class="left"><img alt="" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/1d75d46040c28497f0dee5d8e100db37(2).jpeg" srcset="https://secure.gravatar.com/avatar/1d75d46040c28497f0dee5d8e100db37?s=170&amp;d=mm&amp;r=g 2x" class="avatar avatar-85 photo" height="85" width="85"></span>
<p></p><h4>Welcome!</h4>
My name is <em>Jason Brownlee</em> PhD, and I <strong>help developers</strong> get results with <strong>machine learning</strong>.<br>
<a href="https://machinelearningmastery.com/about">Read more</a><p></p>
<div class="fix"></div>
</div><div id="custom_html-79" class="widget_text widget widget_custom_html"><div class="textwidget custom-html-widget"><h4>Never miss a tutorial:</h4>
<br>
<div style="text-align: left;">
<a href="https://www.linkedin.com/company/machine-learning-mastery/"><img src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/small_icon_blue_linkedin3.png" alt="LinkedIn"></a>
&nbsp;&nbsp;&nbsp;
<a href="http://twitter.com/TeachTheMachine"><img src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/small_icon_blue_twitter3.png" alt="Twitter"></a>
&nbsp;&nbsp;&nbsp;
<a href="https://www.facebook.com/MachineLearningMastery/"><img src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/small_icon_blue_facebook3.png" alt="Facebook"></a>
&nbsp;&nbsp;&nbsp;
<a href="https://machinelearningmastery.com/newsletter/"><img src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/small_icon_blue_email3.png" alt="Email Newsletter"></a>
&nbsp;&nbsp;&nbsp;
<a href="https://machinelearningmastery.com/rss-feed/"><img src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/small_icon_blue_rss3.png" alt="RSS Feed"></a>
</div></div></div><div id="custom_html-27" class="widget_text widget widget_custom_html"><div class="textwidget custom-html-widget"><h4>Picked for you:</h4>
<br>
<div class="display-posts-listing image-left"><div class="listing-item"><a class="image" href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-a-1-dimensional-function-from-scratch-in-keras/"><img width="150" height="150" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/Scatter-Plot-of-Real-and-Generated-Examples-for-the-Target-Function-After-10000-Iterations-150x150.png" class="attachment-thumbnail size-thumbnail wp-post-image" alt="Scatter Plot of Real and Generated Examples for the Target Function After 10,000 Iterations."></a> <a class="title" href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-a-1-dimensional-function-from-scratch-in-keras/" rel="nofollow">How to Develop a 1D Generative Adversarial Network From Scratch in Keras</a></div><div class="listing-item"><a class="image" href="https://machinelearningmastery.com/how-to-develop-a-pix2pix-gan-for-image-to-image-translation/"><img width="150" height="150" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/Plot-of-Satellite-to-Google-Map-Translated-Images-Using-Pix2Pix-After-100-Training-Epochs-150x150.png" class="attachment-thumbnail size-thumbnail wp-post-image" alt="Plot of Satellite to Google Map Translated Images Using Pix2Pix After 100 Training Epochs"></a> <a class="title" href="https://machinelearningmastery.com/how-to-develop-a-pix2pix-gan-for-image-to-image-translation/" rel="nofollow">How to Develop a Pix2Pix GAN for Image-to-Image Translation</a></div><div class="listing-item"><a class="image" href="https://machinelearningmastery.com/impressive-applications-of-generative-adversarial-networks/"><img width="150" height="150" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/Example-of-GAN-Generated-Images-with-Super-Resolution-150x150.png" class="attachment-thumbnail size-thumbnail wp-post-image" alt="Example of GAN Generated Images with Super Resolution"></a> <a class="title" href="https://machinelearningmastery.com/impressive-applications-of-generative-adversarial-networks/" rel="nofollow">18 Impressive Applications of Generative Adversarial Networks (GANs)</a></div><div class="listing-item"><a class="image" href="https://machinelearningmastery.com/how-to-develop-a-conditional-generative-adversarial-network-from-scratch/"><img width="150" height="150" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/Example-of-100-Generated-items-of-Clothing-using-an-Conditional-GAN-150x150.png" class="attachment-thumbnail size-thumbnail wp-post-image" alt="Example of 100 Generated items of Clothing using a Conditional GAN."></a> <a class="title" href="https://machinelearningmastery.com/how-to-develop-a-conditional-generative-adversarial-network-from-scratch/" rel="nofollow">How to Develop a Conditional GAN (cGAN) From Scratch</a></div><div class="listing-item"><a class="image" href="https://machinelearningmastery.com/how-to-implement-pix2pix-gan-models-from-scratch-with-keras/"><img width="150" height="150" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/Architecture-of-the-U-Net-Generator-Model-150x150.png" class="attachment-thumbnail size-thumbnail wp-post-image" alt="Architecture of the U-Net Generator Model"></a> <a class="title" href="https://machinelearningmastery.com/how-to-implement-pix2pix-gan-models-from-scratch-with-keras/" rel="nofollow">How to Implement Pix2Pix GAN Models From Scratch With Keras</a></div></div></div></div><div id="custom_html-5" class="widget_text widget widget_custom_html"><div class="textwidget custom-html-widget"><div style="text-align: center;">
	<p></p><h4>Loving the Tutorials?</h4><p></p>

<p>The <a href="https://machinelearningmastery.com/generative_adversarial_networks/" rel="nofollow">GANs with Python</a> EBook<br> is where I keep the <strong><i>Really Good</i></strong> stuff.</p>
	
	<a href="https://machinelearningmastery.com/generative_adversarial_networks/" class="woo-sc-button  custom" style="background:;border-color:"><span class="woo-">See What's Inside</span></a>

</div></div></div></aside><!-- /#sidebar -->

		</div><!-- /#main-sidebar-container -->         

		
    </div><!-- /#content -->
	
	<footer id="footer" class="col-full">

		
		<div id="copyright" class="col-left">
			<p>© 2019 Machine Learning Mastery Pty. Ltd. All Rights Reserved.<br>
Address: PO Box 206, Vermont Victoria 3133, Australia. | ACN: 626 223 336.<br>
<a href="https://www.linkedin.com/company/machine-learning-mastery/">LinkedIn</a> |
<a href="http://twitter.com/TeachTheMachine">Twitter</a> |
<a href="https://www.facebook.com/MachineLearningMastery/">Facebook</a> |
<a href="https://machinelearningmastery.com/newsletter/">Newsletter</a> |
<a href="https://machinelearningmastery.com/rss-feed/">RSS</a></p>		</div>

		<div id="credit" class="col-right">
			<p><a href="https://machinelearningmastery.com/privacy/">Privacy</a> | 
<a href="https://machinelearningmastery.com/disclaimer/">Disclaimer</a> | 
<a href="https://machinelearningmastery.com/terms-of-service/">Terms</a> | 
<a href="https://machinelearningmastery.com/contact/">Contact</a> |
<a href="https://machinelearningmastery.com/sitemap/">Sitemap</a> |
<a href="https://machinelearningmastery.com/site-search/">Search</a></p>		</div>

	</footer>

	
	</div><!-- /#inner-wrapper -->

</div><!-- /#wrapper -->

<div class="fix"></div><!--/.fix-->

<!-- Drip -->
<script type="text/javascript">
  var _dcq = _dcq || [];
  var _dcs = _dcs || {};
  _dcs.account = '9556588';

  (function() {
    var dc = document.createElement('script');
    dc.type = 'text/javascript'; dc.async = true;
    dc.src = '//tag.getdrip.com/9556588.js';
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(dc, s);
  })();
</script>
<!-- end Drip --><script type="text/javascript" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/comment-reply.min.js"></script>
<script type="text/javascript">
/* <![CDATA[ */
var wpcf7 = {"apiSettings":{"root":"https:\/\/machinelearningmastery.com\/wp-json\/contact-form-7\/v1","namespace":"contact-form-7\/v1"},"cached":"1"};
/* ]]> */
</script>
<script type="text/javascript" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/scripts.js"></script>
<script type="text/javascript" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/wp-embed.min.js"></script>
<script async="async" type="text/javascript" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/form.js"></script>
<script type="text/javascript">function initTwitCount(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://static1.twitcount.com/js/twitcount.js';fjs.parentNode.insertBefore(js,fjs)}}
        var ssb_twit_count_init=!1;addEventListener('mouseover',function(event){if(!ssb_twit_count_init){initTwitCount(document,'script','twitcount_plugins')
        ssb_twit_count_init=!0}})</script>
<div style="position: absolute; right: 0px; left: 0px; bottom: 0px; top: 0px; z-index: 2147483646; background: black; width: 100%; opacity: 0.5; display: none; height: 42245px;"></div><iframe src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/saved_resource.html" style="position: absolute; left: 0px; top: 0px; width: 100%; display: none; border: none; z-index: 2147483647; height: 1540px;"></iframe><iframe src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/saved_resource(1).html" style="position: absolute; left: 0px; top: 0px; width: 100%; display: none; border: none; z-index: 2147483647; height: 1540px;"></iframe><div class="drip-tab-container">
  <div id="drip-2211" class="drip-tab bottom right no-image classic">
    <div id="drip-header-2211" class="drip-header drip-hidden">
      <a href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/#" id="drip-toggle-2211" class="drip-toggle">
        <h2 id="drip-teaser-2211">Start Machine Learning</h2>
        <span id="drip-tab-up-2211" class="drip-arrow up">
          <svg width="12px" height="8px" viewBox="1362 659 12 8" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
            <polygon id="right_angle" stroke="none" fill="#FFFFFF" fill-rule="evenodd" transform="translate(1368.000000, 662.703125) rotate(-90.000000) translate(-1368.000000, -662.703125) " points="1364.29688 667.296875 1368.89062 662.703125 1364.29688 658.109375 1365.70312 656.703125 1371.70312 662.703125 1365.70312 668.703125"></polygon>
          </svg>
        </span>
        <span id="drip-tab-down-2211" class="drip-arrow down" style="display: none"></span>
      </a>
    </div>

    <div id="drip-content-2211" class="drip-content drip-clearfix" style="height: auto; bottom: 0px;">
      <div id="drip-form-panel-2211" class="drip-panel" style="display: block;">
        <a id="drip-close-2211" class="drip-close">×</a>
        <h3 id="drip-content-header-2211">Start Machine Learning</h3>
        <div id="drip-scroll-2211" class="drip-scroll">
          <div class="drip-clearfix">
            
            <div class="drip-description">You can master applied Machine Learning&nbsp;<br>
<strong>without math or fancy degrees</strong>.<br>
Find out how in this <em>free</em>&nbsp;and <em>practical</em>&nbsp;course.</div>
          </div>
          <form id="drip-form-2211">
            <div style="display: none">
              <input type="hidden" name="form_id" value="2211">
            </div>
            <dl class="no-labels">
              
                
                  <dt>Email Address</dt>
                  <dd class="drip-clearfix">
                    
                      <input type="email" name="fields[email]" value="" placeholder="Email Address" class="drip-text-field">
                      <div id="drip-errors-for-email-2211" class="drip-errors"></div>
                    
                  </dd>
                
              
                
                  <dt></dt>
                  <dd class="drip-clearfix">
                    
                      <div class="classic--checkbox hidden" data-container="eu-checkbox">
                        <input type="hidden" name="fields[eu_consent]" id="drip-field-eu_consent-2211-denied" value="denied" disabled="disabled">
                        <input type="checkbox" name="fields[eu_consent]" id="drip-field-eu_consent-2211" value="granted" disabled="disabled">
                        <label for="drip-field-eu_consent-2211">I consent to receive information about services and special offers by email. For more information, see the <a href="https://machinelearningmastery.com/privacy/">Privacy Policy</a>.</label>
                      </div>
                    
                  </dd>
                
              
                
                  <input type="hidden" name="fields[eu_consent_message]" value="I consent to receive information about services and special offers by email. For more information, see the Privacy Policy (https://machinelearningmastery.com/privacy/).">
                
              
              
              <div style="display: none;" aria-hidden="true">
                <dt for="website">Website</dt>
                <dd>
                  <input type="text" id="website" name="website" placeholder="Website" class="drip-text-field" tabindex="-1" autocomplete="false" value="">
                </dd>
              </div>
            </dl>
            <div class="form-controls">
              <input type="submit" name="submit" value="Start My Email Course" id="drip-submit-2211" class="drip-submit-button">
            </div>
          </form>
        </div>
      </div>

      <div id="drip-success-panel-2211" class="drip-success drip-panel drip-clearfix" style="display: none">
        <a id="drip-hide-2211" class="drip-close">×</a>
        <h3>Thank you for signing up!</h3>
        <p class="drip-description">Please check your email and click the link provided to confirm your subscription.</p>
      </div>

      
    </div>
  </div>
</div><iframe scrolling="no" frameborder="0" allowtransparency="true" src="../../../../Downloads/How%20to%20Develop%20a%20GAN%20for%20Generating%20MNIST%20Handwritten%20Digits_files/widget_iframe.4f8aea4342a4ada72cba2bdffcff6b4d.html" title="Twitter settings iframe" style="display: none;"></iframe></body></html>